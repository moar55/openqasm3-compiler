
// Generated from qasm.g4 by ANTLR 4.10.1


#include "qasmListener.h"
#include "qasmVisitor.h"

#include "qasmParser.h"


using namespace antlrcpp;
using namespace mlir;

using namespace antlr4;

namespace {

struct QasmParserStaticData final {
  QasmParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  QasmParserStaticData(const QasmParserStaticData&) = delete;
  QasmParserStaticData(QasmParserStaticData&&) = delete;
  QasmParserStaticData& operator=(const QasmParserStaticData&) = delete;
  QasmParserStaticData& operator=(QasmParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

std::once_flag qasmParserOnceFlag;
QasmParserStaticData *qasmParserStaticData = nullptr;

void qasmParserInitialize() {
  assert(qasmParserStaticData == nullptr);
  auto staticData = std::make_unique<QasmParserStaticData>(
    std::vector<std::string>{
      "program", "header", "version", "include", "ioIdentifier", "io", "globalStatement", 
      "statement", "quantumDeclarationStatement", "classicalDeclarationStatement", 
      "classicalAssignment", "assignmentStatement", "returnSignature", "designator", 
      "identifierList", "quantumDeclaration", "quantumArgument", "quantumArgumentList", 
      "bitType", "singleDesignatorType", "noDesignatorType", "nonArrayType", 
      "arrayType", "arrayReferenceTypeDimensionSpecifier", "arrayReferenceType", 
      "classicalType", "numericType", "constantDeclaration", "singleDesignatorDeclaration", 
      "noDesignatorDeclaration", "bitDeclaration", "complexDeclaration", 
      "arrayInitializer", "arrayDeclaration", "classicalDeclaration", "classicalTypeList", 
      "classicalArgument", "classicalArgumentList", "anyTypeArgument", "anyTypeArgumentList", 
      "aliasStatement", "aliasInitializer", "rangeDefinition", "quantumGateDefinition", 
      "quantumGateSignature", "quantumGateName", "quantumBlock", "quantumLoop", 
      "quantumLoopBlock", "quantumStatement", "quantumInstruction", "quantumPhase", 
      "quantumReset", "quantumMeasurement", "quantumMeasurementAssignment", 
      "quantumBarrier", "quantumGateModifier", "powModifier", "ctrlModifier", 
      "quantumGateCall", "unaryOperator", "comparisonOperator", "equalityOperator", 
      "logicalOperator", "expressionStatement", "expression", "logicalAndExpression", 
      "bitOrExpression", "xOrExpression", "bitAndExpression", "equalityExpression", 
      "comparisonExpression", "bitShiftExpression", "additiveExpression", 
      "multiplicativeExpression", "unaryExpression", "powerExpression", 
      "indexOperator", "indexExpression", "indexedIdentifier", "expressionTerminator", 
      "booleanLiteral", "builtInCall", "builtInMath", "castOperator", "expressionList", 
      "equalsExpression", "assignmentOperator", "discreteSet", "setDeclaration", 
      "programBlock", "branchingStatement", "loopSignature", "loopStatement", 
      "endStatement", "returnStatement", "controlDirective", "externDeclaration", 
      "externOrSubroutineCall", "subroutineDefinition", "subroutineBlock", 
      "pragma", "timingType", "timingBox", "timingIdentifier", "timingInstructionName", 
      "timingInstruction", "timingStatement", "calibration", "calibrationGrammarDeclaration", 
      "calibrationDefinition", "calibrationGrammar", "calibrationArgumentList"
    },
    std::vector<std::string>{
      "", "'OPENQASM'", "'include'", "'input'", "'output'", "'qreg'", "'qubit'", 
      "'bit'", "'creg'", "'int'", "'uint'", "'float'", "'angle'", "'bool'", 
      "'let'", "'++'", "'gate'", "'U'", "'CX'", "'H'", "'X'", "'Y'", "'Z'", 
      "'RX'", "'RY'", "'RZ'", "'PT3'", "'PT4'", "'gphase'", "'reset'", "'measure'", 
      "'barrier'", "'inv'", "'@'", "'pow'", "'ctrl'", "'negctrl'", "'~'", 
      "'!'", "'>'", "'<'", "'>='", "'<='", "'=='", "'!='", "'&&'", "'||'", 
      "'|'", "'^'", "'&'", "'<<'", "'>>'", "'**'", "'true'", "'false'", 
      "'arcsin'", "'sin'", "'arccos'", "'cos'", "'arctan'", "'tan'", "'exp'", 
      "'ln'", "'sqrt'", "'rotl'", "'rotr'", "'popcount'", "'+='", "'-='", 
      "'*='", "'/='", "'&='", "'|='", "'~='", "'^='", "'<<='", "'>>='", 
      "'%='", "'**='", "'if'", "'else'", "'for'", "'in'", "'while'", "'end'", 
      "'return'", "'break'", "'continue'", "'extern'", "'def'", "'#pragma'", 
      "'duration'", "'stretch'", "'box'", "'durationof'", "'delay'", "'rotary'", 
      "'defcalgrammar'", "'defcal'", "'\"openpulse\"'", "'['", "']'", "'{'", 
      "'}'", "'('", "')'", "':'", "';'", "'.'", "','", "'='", "'->'", "'+'", 
      "'-'", "'*'", "'/'", "'%'", "'im'", "", "'complex'", "'#'", "'const'", 
      "'mutable'", "'array'", "'sizeof'", "'#dim'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "LBRACKET", 
      "RBRACKET", "LBRACE", "RBRACE", "LPAREN", "RPAREN", "COLON", "SEMICOLON", 
      "DOT", "COMMA", "EQUALS", "ARROW", "PLUS", "MINUS", "MUL", "DIV", 
      "MOD", "IMAG", "ImagNumber", "COMPLEX", "HASH", "CONST", "MUTABLE", 
      "ARRAY", "SIZEOF", "DIM", "Constant", "Whitespace", "Newline", "Integer", 
      "Identifier", "RealNumber", "TimingLiteral", "StringLiteral", "LineComment", 
      "BlockComment"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,135,1129,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,1,0,1,0,1,0,5,0,230,8,0,10,0,12,0,233,9,
  	0,1,1,3,1,236,8,1,1,1,5,1,239,8,1,10,1,12,1,242,9,1,1,1,5,1,245,8,1,10,
  	1,12,1,248,9,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,
  	5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,3,6,271,8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
  	1,7,3,7,281,8,7,1,8,1,8,1,8,1,9,1,9,3,9,288,8,9,1,9,1,9,1,10,1,10,1,10,
  	1,10,1,11,1,11,3,11,298,8,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,
  	1,13,1,14,1,14,5,14,311,8,14,10,14,12,14,314,9,14,1,14,1,14,1,15,1,15,
  	1,15,3,15,321,8,15,1,15,1,15,3,15,325,8,15,1,15,3,15,328,8,15,1,16,1,
  	16,1,16,3,16,333,8,16,1,16,1,16,3,16,337,8,16,1,16,3,16,340,8,16,1,17,
  	1,17,1,17,5,17,345,8,17,10,17,12,17,348,9,17,1,18,1,18,1,19,1,19,1,20,
  	1,20,3,20,356,8,20,1,21,1,21,1,21,1,21,1,21,1,21,3,21,364,8,21,1,21,1,
  	21,1,21,1,21,1,21,3,21,371,8,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,
  	23,1,23,1,23,1,23,3,23,384,8,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,
  	25,1,25,3,25,395,8,25,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,28,1,
  	28,1,28,1,28,3,28,409,8,28,1,29,1,29,1,29,3,29,414,8,29,1,30,1,30,1,30,
  	3,30,419,8,30,1,30,1,30,3,30,423,8,30,1,30,3,30,426,8,30,1,30,3,30,429,
  	8,30,1,31,1,31,1,31,1,31,1,31,1,31,3,31,437,8,31,1,32,1,32,1,32,3,32,
  	442,8,32,1,32,1,32,1,32,3,32,447,8,32,5,32,449,8,32,10,32,12,32,452,9,
  	32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,3,33,461,8,33,3,33,463,8,33,1,34,
  	1,34,1,34,1,34,1,34,3,34,470,8,34,1,35,1,35,1,35,5,35,475,8,35,10,35,
  	12,35,478,9,35,1,35,1,35,1,36,1,36,1,36,1,36,3,36,486,8,36,1,36,1,36,
  	1,36,1,36,1,36,3,36,493,8,36,1,36,1,36,3,36,497,8,36,1,36,1,36,1,36,1,
  	36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,510,8,36,1,37,1,37,1,37,5,
  	37,515,8,37,10,37,12,37,518,9,37,1,38,1,38,3,38,522,8,38,1,39,1,39,1,
  	39,5,39,527,8,39,10,39,12,39,530,9,39,1,39,1,39,1,40,1,40,1,40,1,40,1,
  	40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,5,41,546,8,41,10,41,12,41,549,9,
  	41,1,42,3,42,552,8,42,1,42,1,42,3,42,556,8,42,1,42,1,42,3,42,560,8,42,
  	1,43,1,43,1,43,1,43,1,44,1,44,1,44,3,44,569,8,44,1,44,3,44,572,8,44,1,
  	44,1,44,1,45,1,45,1,46,1,46,1,46,5,46,581,8,46,10,46,12,46,584,9,46,1,
  	46,1,46,1,47,1,47,1,47,1,48,1,48,1,48,5,48,594,8,48,10,48,12,48,597,9,
  	48,1,48,3,48,600,8,48,1,49,1,49,1,49,1,49,3,49,606,8,49,1,50,1,50,1,50,
  	1,50,1,50,3,50,613,8,50,1,51,5,51,616,8,51,10,51,12,51,619,9,51,1,51,
  	1,51,1,51,1,51,1,51,1,51,1,51,5,51,628,8,51,10,51,12,51,631,9,51,3,51,
  	633,8,51,1,52,1,52,1,52,1,53,1,53,1,53,1,54,1,54,1,54,3,54,644,8,54,1,
  	54,1,54,1,54,1,54,3,54,650,8,54,1,55,1,55,1,55,1,55,5,55,656,8,55,10,
  	55,12,55,659,9,55,3,55,661,8,55,1,56,1,56,1,56,3,56,666,8,56,1,56,1,56,
  	1,57,1,57,1,57,1,57,1,57,1,58,1,58,1,58,1,58,1,58,3,58,680,8,58,1,59,
  	5,59,683,8,59,10,59,12,59,686,9,59,1,59,1,59,1,59,1,59,1,59,3,59,693,
  	8,59,1,59,1,59,1,59,5,59,698,8,59,10,59,12,59,701,9,59,1,60,1,60,1,61,
  	1,61,1,62,1,62,1,63,1,63,1,64,1,64,1,64,1,65,1,65,1,65,1,65,3,65,718,
  	8,65,1,65,1,65,1,65,5,65,723,8,65,10,65,12,65,726,9,65,1,66,1,66,1,66,
  	1,66,1,66,1,66,5,66,734,8,66,10,66,12,66,737,9,66,1,67,1,67,1,67,1,67,
  	1,67,1,67,5,67,745,8,67,10,67,12,67,748,9,67,1,68,1,68,1,68,1,68,1,68,
  	1,68,5,68,756,8,68,10,68,12,68,759,9,68,1,69,1,69,1,69,1,69,1,69,1,69,
  	5,69,767,8,69,10,69,12,69,770,9,69,1,70,1,70,1,70,1,70,1,70,1,70,1,70,
  	5,70,779,8,70,10,70,12,70,782,9,70,1,71,1,71,1,71,1,71,1,71,1,71,1,71,
  	5,71,791,8,71,10,71,12,71,794,9,71,1,72,1,72,1,72,1,72,1,72,1,72,5,72,
  	802,8,72,10,72,12,72,805,9,72,1,73,1,73,1,73,1,73,1,73,1,73,5,73,813,
  	8,73,10,73,12,73,816,9,73,1,74,1,74,1,74,1,74,1,74,1,74,5,74,824,8,74,
  	10,74,12,74,827,9,74,1,75,3,75,830,8,75,1,75,1,75,1,76,1,76,1,76,1,76,
  	1,76,1,76,5,76,840,8,76,10,76,12,76,843,9,76,1,77,1,77,1,77,1,77,3,77,
  	849,8,77,1,77,1,77,1,77,3,77,854,8,77,5,77,856,8,77,10,77,12,77,859,9,
  	77,3,77,861,8,77,1,77,1,77,1,78,1,78,1,78,1,78,1,78,5,78,870,8,78,10,
  	78,12,78,873,9,78,1,79,1,79,5,79,877,8,79,10,79,12,79,880,9,79,1,80,1,
  	80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,3,80,896,
  	8,80,1,81,1,81,1,82,1,82,1,82,3,82,903,8,82,1,82,1,82,1,82,1,82,1,83,
  	1,83,1,84,1,84,1,85,1,85,1,85,5,85,916,8,85,10,85,12,85,919,9,85,1,86,
  	1,86,1,86,1,87,1,87,1,88,1,88,1,88,1,88,5,88,930,8,88,10,88,12,88,933,
  	9,88,1,88,1,88,1,89,1,89,1,89,1,89,1,89,1,89,3,89,943,8,89,1,90,1,90,
  	1,90,1,90,1,90,5,90,950,8,90,10,90,12,90,953,9,90,1,90,3,90,956,8,90,
  	1,91,1,91,1,91,1,91,1,91,1,91,1,91,3,91,965,8,91,1,92,1,92,1,92,1,92,
  	1,92,1,92,1,92,1,92,1,92,3,92,976,8,92,1,93,1,93,1,93,1,94,1,94,1,94,
  	1,95,1,95,1,95,3,95,987,8,95,1,95,1,95,1,96,1,96,1,96,1,96,3,96,995,8,
  	96,1,97,1,97,1,97,1,97,3,97,1001,8,97,1,97,1,97,3,97,1005,8,97,1,97,1,
  	97,1,98,1,98,1,98,3,98,1012,8,98,1,98,1,98,1,99,1,99,1,99,1,99,3,99,1020,
  	8,99,1,99,1,99,3,99,1024,8,99,1,99,1,99,1,100,1,100,5,100,1030,8,100,
  	10,100,12,100,1033,9,100,1,100,3,100,1036,8,100,1,100,1,100,1,101,1,101,
  	1,101,5,101,1043,8,101,10,101,12,101,1046,9,101,1,101,1,101,1,102,1,102,
  	1,103,1,103,3,103,1054,8,103,1,103,1,103,1,104,1,104,1,104,1,104,1,104,
  	3,104,1063,8,104,1,104,3,104,1066,8,104,1,105,1,105,1,106,1,106,1,106,
  	3,106,1073,8,106,1,106,3,106,1076,8,106,1,106,1,106,1,106,1,106,5,106,
  	1082,8,106,10,106,12,106,1085,9,106,1,107,1,107,1,107,1,107,3,107,1091,
  	8,107,1,108,1,108,3,108,1095,8,108,1,109,1,109,1,109,1,109,1,110,1,110,
  	1,110,1,110,3,110,1105,8,110,1,110,3,110,1108,8,110,1,110,1,110,3,110,
  	1112,8,110,1,110,1,110,5,110,1116,8,110,10,110,12,110,1119,9,110,1,110,
  	1,110,1,111,1,111,1,112,1,112,3,112,1127,8,112,1,112,1,1117,13,82,130,
  	132,134,136,138,140,142,144,146,148,152,156,113,0,2,4,6,8,10,12,14,16,
  	18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,
  	64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,
  	108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,
  	144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,
  	180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,
  	216,218,220,222,224,0,21,2,0,129,129,131,131,1,0,3,4,1,0,7,8,1,0,9,12,
  	1,0,121,122,1,0,17,27,1,0,35,36,2,0,37,38,113,113,1,0,39,42,1,0,43,44,
  	1,0,45,46,1,0,50,51,1,0,112,113,1,0,114,116,1,0,53,54,1,0,55,66,2,0,67,
  	78,110,110,1,0,86,87,1,0,91,92,1,0,95,96,2,0,99,99,133,133,1171,0,226,
  	1,0,0,0,2,235,1,0,0,0,4,249,1,0,0,0,6,253,1,0,0,0,8,257,1,0,0,0,10,259,
  	1,0,0,0,12,270,1,0,0,0,14,280,1,0,0,0,16,282,1,0,0,0,18,287,1,0,0,0,20,
  	291,1,0,0,0,22,297,1,0,0,0,24,301,1,0,0,0,26,304,1,0,0,0,28,312,1,0,0,
  	0,30,327,1,0,0,0,32,339,1,0,0,0,34,341,1,0,0,0,36,349,1,0,0,0,38,351,
  	1,0,0,0,40,355,1,0,0,0,42,370,1,0,0,0,44,372,1,0,0,0,46,383,1,0,0,0,48,
  	385,1,0,0,0,50,394,1,0,0,0,52,396,1,0,0,0,54,399,1,0,0,0,56,404,1,0,0,
  	0,58,410,1,0,0,0,60,425,1,0,0,0,62,430,1,0,0,0,64,438,1,0,0,0,66,455,
  	1,0,0,0,68,469,1,0,0,0,70,476,1,0,0,0,72,509,1,0,0,0,74,511,1,0,0,0,76,
  	521,1,0,0,0,78,528,1,0,0,0,80,533,1,0,0,0,82,539,1,0,0,0,84,551,1,0,0,
  	0,86,561,1,0,0,0,88,565,1,0,0,0,90,575,1,0,0,0,92,577,1,0,0,0,94,587,
  	1,0,0,0,96,599,1,0,0,0,98,605,1,0,0,0,100,612,1,0,0,0,102,617,1,0,0,0,
  	104,634,1,0,0,0,106,637,1,0,0,0,108,649,1,0,0,0,110,651,1,0,0,0,112,665,
  	1,0,0,0,114,669,1,0,0,0,116,674,1,0,0,0,118,684,1,0,0,0,120,702,1,0,0,
  	0,122,704,1,0,0,0,124,706,1,0,0,0,126,708,1,0,0,0,128,710,1,0,0,0,130,
  	717,1,0,0,0,132,727,1,0,0,0,134,738,1,0,0,0,136,749,1,0,0,0,138,760,1,
  	0,0,0,140,771,1,0,0,0,142,783,1,0,0,0,144,795,1,0,0,0,146,806,1,0,0,0,
  	148,817,1,0,0,0,150,829,1,0,0,0,152,833,1,0,0,0,154,844,1,0,0,0,156,864,
  	1,0,0,0,158,874,1,0,0,0,160,895,1,0,0,0,162,897,1,0,0,0,164,902,1,0,0,
  	0,166,908,1,0,0,0,168,910,1,0,0,0,170,912,1,0,0,0,172,920,1,0,0,0,174,
  	923,1,0,0,0,176,925,1,0,0,0,178,942,1,0,0,0,180,955,1,0,0,0,182,957,1,
  	0,0,0,184,975,1,0,0,0,186,977,1,0,0,0,188,980,1,0,0,0,190,983,1,0,0,0,
  	192,994,1,0,0,0,194,996,1,0,0,0,196,1008,1,0,0,0,198,1015,1,0,0,0,200,
  	1027,1,0,0,0,202,1039,1,0,0,0,204,1049,1,0,0,0,206,1051,1,0,0,0,208,1065,
  	1,0,0,0,210,1067,1,0,0,0,212,1069,1,0,0,0,214,1090,1,0,0,0,216,1094,1,
  	0,0,0,218,1096,1,0,0,0,220,1100,1,0,0,0,222,1122,1,0,0,0,224,1126,1,0,
  	0,0,226,231,3,2,1,0,227,230,3,12,6,0,228,230,3,14,7,0,229,227,1,0,0,0,
  	229,228,1,0,0,0,230,233,1,0,0,0,231,229,1,0,0,0,231,232,1,0,0,0,232,1,
  	1,0,0,0,233,231,1,0,0,0,234,236,3,4,2,0,235,234,1,0,0,0,235,236,1,0,0,
  	0,236,240,1,0,0,0,237,239,3,6,3,0,238,237,1,0,0,0,239,242,1,0,0,0,240,
  	238,1,0,0,0,240,241,1,0,0,0,241,246,1,0,0,0,242,240,1,0,0,0,243,245,3,
  	10,5,0,244,243,1,0,0,0,245,248,1,0,0,0,246,244,1,0,0,0,246,247,1,0,0,
  	0,247,3,1,0,0,0,248,246,1,0,0,0,249,250,5,1,0,0,250,251,7,0,0,0,251,252,
  	5,107,0,0,252,5,1,0,0,0,253,254,5,2,0,0,254,255,5,133,0,0,255,256,5,107,
  	0,0,256,7,1,0,0,0,257,258,7,1,0,0,258,9,1,0,0,0,259,260,3,8,4,0,260,261,
  	3,50,25,0,261,262,5,130,0,0,262,263,5,107,0,0,263,11,1,0,0,0,264,271,
  	3,198,99,0,265,271,3,194,97,0,266,271,3,86,43,0,267,271,3,216,108,0,268,
  	271,3,16,8,0,269,271,3,202,101,0,270,264,1,0,0,0,270,265,1,0,0,0,270,
  	266,1,0,0,0,270,267,1,0,0,0,270,268,1,0,0,0,270,269,1,0,0,0,271,13,1,
  	0,0,0,272,281,3,128,64,0,273,281,3,22,11,0,274,281,3,18,9,0,275,281,3,
  	182,91,0,276,281,3,186,93,0,277,281,3,188,94,0,278,281,3,80,40,0,279,
  	281,3,98,49,0,280,272,1,0,0,0,280,273,1,0,0,0,280,274,1,0,0,0,280,275,
  	1,0,0,0,280,276,1,0,0,0,280,277,1,0,0,0,280,278,1,0,0,0,280,279,1,0,0,
  	0,281,15,1,0,0,0,282,283,3,30,15,0,283,284,5,107,0,0,284,17,1,0,0,0,285,
  	288,3,68,34,0,286,288,3,54,27,0,287,285,1,0,0,0,287,286,1,0,0,0,288,289,
  	1,0,0,0,289,290,5,107,0,0,290,19,1,0,0,0,291,292,3,158,79,0,292,293,3,
  	174,87,0,293,294,3,130,65,0,294,21,1,0,0,0,295,298,3,20,10,0,296,298,
  	3,108,54,0,297,295,1,0,0,0,297,296,1,0,0,0,298,299,1,0,0,0,299,300,5,
  	107,0,0,300,23,1,0,0,0,301,302,5,111,0,0,302,303,3,50,25,0,303,25,1,0,
  	0,0,304,305,5,100,0,0,305,306,3,130,65,0,306,307,5,101,0,0,307,27,1,0,
  	0,0,308,309,5,130,0,0,309,311,5,109,0,0,310,308,1,0,0,0,311,314,1,0,0,
  	0,312,310,1,0,0,0,312,313,1,0,0,0,313,315,1,0,0,0,314,312,1,0,0,0,315,
  	316,5,130,0,0,316,29,1,0,0,0,317,318,5,5,0,0,318,320,5,130,0,0,319,321,
  	3,26,13,0,320,319,1,0,0,0,320,321,1,0,0,0,321,328,1,0,0,0,322,324,5,6,
  	0,0,323,325,3,26,13,0,324,323,1,0,0,0,324,325,1,0,0,0,325,326,1,0,0,0,
  	326,328,5,130,0,0,327,317,1,0,0,0,327,322,1,0,0,0,328,31,1,0,0,0,329,
  	330,5,5,0,0,330,332,5,130,0,0,331,333,3,26,13,0,332,331,1,0,0,0,332,333,
  	1,0,0,0,333,340,1,0,0,0,334,336,5,6,0,0,335,337,3,26,13,0,336,335,1,0,
  	0,0,336,337,1,0,0,0,337,338,1,0,0,0,338,340,5,130,0,0,339,329,1,0,0,0,
  	339,334,1,0,0,0,340,33,1,0,0,0,341,346,3,32,16,0,342,343,5,109,0,0,343,
  	345,3,32,16,0,344,342,1,0,0,0,345,348,1,0,0,0,346,344,1,0,0,0,346,347,
  	1,0,0,0,347,35,1,0,0,0,348,346,1,0,0,0,349,350,7,2,0,0,350,37,1,0,0,0,
  	351,352,7,3,0,0,352,39,1,0,0,0,353,356,5,13,0,0,354,356,3,204,102,0,355,
  	353,1,0,0,0,355,354,1,0,0,0,356,41,1,0,0,0,357,358,3,38,19,0,358,359,
  	3,26,13,0,359,371,1,0,0,0,360,371,3,40,20,0,361,363,3,36,18,0,362,364,
  	3,26,13,0,363,362,1,0,0,0,363,364,1,0,0,0,364,371,1,0,0,0,365,366,5,119,
  	0,0,366,367,5,100,0,0,367,368,3,52,26,0,368,369,5,101,0,0,369,371,1,0,
  	0,0,370,357,1,0,0,0,370,360,1,0,0,0,370,361,1,0,0,0,370,365,1,0,0,0,371,
  	43,1,0,0,0,372,373,5,123,0,0,373,374,5,100,0,0,374,375,3,42,21,0,375,
  	376,5,109,0,0,376,377,3,170,85,0,377,378,5,101,0,0,378,45,1,0,0,0,379,
  	384,3,170,85,0,380,381,5,125,0,0,381,382,5,110,0,0,382,384,3,130,65,0,
  	383,379,1,0,0,0,383,380,1,0,0,0,384,47,1,0,0,0,385,386,5,123,0,0,386,
  	387,5,100,0,0,387,388,3,42,21,0,388,389,5,109,0,0,389,390,3,46,23,0,390,
  	391,5,101,0,0,391,49,1,0,0,0,392,395,3,42,21,0,393,395,3,44,22,0,394,
  	392,1,0,0,0,394,393,1,0,0,0,395,51,1,0,0,0,396,397,3,38,19,0,397,398,
  	3,26,13,0,398,53,1,0,0,0,399,400,5,121,0,0,400,401,3,50,25,0,401,402,
  	5,130,0,0,402,403,3,172,86,0,403,55,1,0,0,0,404,405,3,38,19,0,405,406,
  	3,26,13,0,406,408,5,130,0,0,407,409,3,172,86,0,408,407,1,0,0,0,408,409,
  	1,0,0,0,409,57,1,0,0,0,410,411,3,40,20,0,411,413,5,130,0,0,412,414,3,
  	172,86,0,413,412,1,0,0,0,413,414,1,0,0,0,414,59,1,0,0,0,415,416,5,8,0,
  	0,416,418,5,130,0,0,417,419,3,26,13,0,418,417,1,0,0,0,418,419,1,0,0,0,
  	419,426,1,0,0,0,420,422,5,7,0,0,421,423,3,26,13,0,422,421,1,0,0,0,422,
  	423,1,0,0,0,423,424,1,0,0,0,424,426,5,130,0,0,425,415,1,0,0,0,425,420,
  	1,0,0,0,426,428,1,0,0,0,427,429,3,172,86,0,428,427,1,0,0,0,428,429,1,
  	0,0,0,429,61,1,0,0,0,430,431,5,119,0,0,431,432,5,100,0,0,432,433,3,52,
  	26,0,433,434,5,101,0,0,434,436,5,130,0,0,435,437,3,172,86,0,436,435,1,
  	0,0,0,436,437,1,0,0,0,437,63,1,0,0,0,438,441,5,102,0,0,439,442,3,130,
  	65,0,440,442,3,64,32,0,441,439,1,0,0,0,441,440,1,0,0,0,442,450,1,0,0,
  	0,443,446,5,109,0,0,444,447,3,130,65,0,445,447,3,64,32,0,446,444,1,0,
  	0,0,446,445,1,0,0,0,447,449,1,0,0,0,448,443,1,0,0,0,449,452,1,0,0,0,450,
  	448,1,0,0,0,450,451,1,0,0,0,451,453,1,0,0,0,452,450,1,0,0,0,453,454,5,
  	103,0,0,454,65,1,0,0,0,455,456,3,44,22,0,456,462,5,130,0,0,457,460,5,
  	110,0,0,458,461,3,64,32,0,459,461,3,130,65,0,460,458,1,0,0,0,460,459,
  	1,0,0,0,461,463,1,0,0,0,462,457,1,0,0,0,462,463,1,0,0,0,463,67,1,0,0,
  	0,464,470,3,56,28,0,465,470,3,58,29,0,466,470,3,60,30,0,467,470,3,62,
  	31,0,468,470,3,66,33,0,469,464,1,0,0,0,469,465,1,0,0,0,469,466,1,0,0,
  	0,469,467,1,0,0,0,469,468,1,0,0,0,470,69,1,0,0,0,471,472,3,50,25,0,472,
  	473,5,109,0,0,473,475,1,0,0,0,474,471,1,0,0,0,475,478,1,0,0,0,476,474,
  	1,0,0,0,476,477,1,0,0,0,477,479,1,0,0,0,478,476,1,0,0,0,479,480,3,50,
  	25,0,480,71,1,0,0,0,481,482,3,38,19,0,482,483,3,26,13,0,483,486,1,0,0,
  	0,484,486,3,40,20,0,485,481,1,0,0,0,485,484,1,0,0,0,486,487,1,0,0,0,487,
  	488,5,130,0,0,488,510,1,0,0,0,489,490,5,8,0,0,490,492,5,130,0,0,491,493,
  	3,26,13,0,492,491,1,0,0,0,492,493,1,0,0,0,493,510,1,0,0,0,494,496,5,7,
  	0,0,495,497,3,26,13,0,496,495,1,0,0,0,496,497,1,0,0,0,497,498,1,0,0,0,
  	498,510,5,130,0,0,499,500,5,119,0,0,500,501,5,100,0,0,501,502,3,52,26,
  	0,502,503,5,101,0,0,503,504,5,130,0,0,504,510,1,0,0,0,505,506,7,4,0,0,
  	506,507,3,48,24,0,507,508,5,130,0,0,508,510,1,0,0,0,509,485,1,0,0,0,509,
  	489,1,0,0,0,509,494,1,0,0,0,509,499,1,0,0,0,509,505,1,0,0,0,510,73,1,
  	0,0,0,511,516,3,72,36,0,512,513,5,109,0,0,513,515,3,72,36,0,514,512,1,
  	0,0,0,515,518,1,0,0,0,516,514,1,0,0,0,516,517,1,0,0,0,517,75,1,0,0,0,
  	518,516,1,0,0,0,519,522,3,72,36,0,520,522,3,32,16,0,521,519,1,0,0,0,521,
  	520,1,0,0,0,522,77,1,0,0,0,523,524,3,76,38,0,524,525,5,109,0,0,525,527,
  	1,0,0,0,526,523,1,0,0,0,527,530,1,0,0,0,528,526,1,0,0,0,528,529,1,0,0,
  	0,529,531,1,0,0,0,530,528,1,0,0,0,531,532,3,76,38,0,532,79,1,0,0,0,533,
  	534,5,14,0,0,534,535,5,130,0,0,535,536,5,110,0,0,536,537,3,82,41,0,537,
  	538,5,107,0,0,538,81,1,0,0,0,539,540,6,41,-1,0,540,541,3,130,65,0,541,
  	547,1,0,0,0,542,543,10,1,0,0,543,544,5,15,0,0,544,546,3,82,41,2,545,542,
  	1,0,0,0,546,549,1,0,0,0,547,545,1,0,0,0,547,548,1,0,0,0,548,83,1,0,0,
  	0,549,547,1,0,0,0,550,552,3,130,65,0,551,550,1,0,0,0,551,552,1,0,0,0,
  	552,553,1,0,0,0,553,555,5,106,0,0,554,556,3,130,65,0,555,554,1,0,0,0,
  	555,556,1,0,0,0,556,559,1,0,0,0,557,558,5,106,0,0,558,560,3,130,65,0,
  	559,557,1,0,0,0,559,560,1,0,0,0,560,85,1,0,0,0,561,562,5,16,0,0,562,563,
  	3,88,44,0,563,564,3,92,46,0,564,87,1,0,0,0,565,571,3,90,45,0,566,568,
  	5,104,0,0,567,569,3,28,14,0,568,567,1,0,0,0,568,569,1,0,0,0,569,570,1,
  	0,0,0,570,572,5,105,0,0,571,566,1,0,0,0,571,572,1,0,0,0,572,573,1,0,0,
  	0,573,574,3,28,14,0,574,89,1,0,0,0,575,576,7,5,0,0,576,91,1,0,0,0,577,
  	582,5,102,0,0,578,581,3,98,49,0,579,581,3,94,47,0,580,578,1,0,0,0,580,
  	579,1,0,0,0,581,584,1,0,0,0,582,580,1,0,0,0,582,583,1,0,0,0,583,585,1,
  	0,0,0,584,582,1,0,0,0,585,586,5,103,0,0,586,93,1,0,0,0,587,588,3,184,
  	92,0,588,589,3,96,48,0,589,95,1,0,0,0,590,600,3,98,49,0,591,595,5,102,
  	0,0,592,594,3,98,49,0,593,592,1,0,0,0,594,597,1,0,0,0,595,593,1,0,0,0,
  	595,596,1,0,0,0,596,598,1,0,0,0,597,595,1,0,0,0,598,600,5,103,0,0,599,
  	590,1,0,0,0,599,591,1,0,0,0,600,97,1,0,0,0,601,602,3,100,50,0,602,603,
  	5,107,0,0,603,606,1,0,0,0,604,606,3,214,107,0,605,601,1,0,0,0,605,604,
  	1,0,0,0,606,99,1,0,0,0,607,613,3,118,59,0,608,613,3,102,51,0,609,613,
  	3,106,53,0,610,613,3,104,52,0,611,613,3,110,55,0,612,607,1,0,0,0,612,
  	608,1,0,0,0,612,609,1,0,0,0,612,610,1,0,0,0,612,611,1,0,0,0,613,101,1,
  	0,0,0,614,616,3,112,56,0,615,614,1,0,0,0,616,619,1,0,0,0,617,615,1,0,
  	0,0,617,618,1,0,0,0,618,620,1,0,0,0,619,617,1,0,0,0,620,621,5,28,0,0,
  	621,622,5,104,0,0,622,623,3,130,65,0,623,632,5,105,0,0,624,629,3,158,
  	79,0,625,626,5,109,0,0,626,628,3,158,79,0,627,625,1,0,0,0,628,631,1,0,
  	0,0,629,627,1,0,0,0,629,630,1,0,0,0,630,633,1,0,0,0,631,629,1,0,0,0,632,
  	624,1,0,0,0,632,633,1,0,0,0,633,103,1,0,0,0,634,635,5,29,0,0,635,636,
  	3,158,79,0,636,105,1,0,0,0,637,638,5,30,0,0,638,639,3,158,79,0,639,107,
  	1,0,0,0,640,643,3,106,53,0,641,642,5,111,0,0,642,644,3,158,79,0,643,641,
  	1,0,0,0,643,644,1,0,0,0,644,650,1,0,0,0,645,646,3,158,79,0,646,647,5,
  	110,0,0,647,648,3,106,53,0,648,650,1,0,0,0,649,640,1,0,0,0,649,645,1,
  	0,0,0,650,109,1,0,0,0,651,660,5,31,0,0,652,657,3,158,79,0,653,654,5,109,
  	0,0,654,656,3,158,79,0,655,653,1,0,0,0,656,659,1,0,0,0,657,655,1,0,0,
  	0,657,658,1,0,0,0,658,661,1,0,0,0,659,657,1,0,0,0,660,652,1,0,0,0,660,
  	661,1,0,0,0,661,111,1,0,0,0,662,666,5,32,0,0,663,666,3,114,57,0,664,666,
  	3,116,58,0,665,662,1,0,0,0,665,663,1,0,0,0,665,664,1,0,0,0,666,667,1,
  	0,0,0,667,668,5,33,0,0,668,113,1,0,0,0,669,670,5,34,0,0,670,671,5,104,
  	0,0,671,672,3,130,65,0,672,673,5,105,0,0,673,115,1,0,0,0,674,679,7,6,
  	0,0,675,676,5,104,0,0,676,677,3,130,65,0,677,678,5,105,0,0,678,680,1,
  	0,0,0,679,675,1,0,0,0,679,680,1,0,0,0,680,117,1,0,0,0,681,683,3,112,56,
  	0,682,681,1,0,0,0,683,686,1,0,0,0,684,682,1,0,0,0,684,685,1,0,0,0,685,
  	687,1,0,0,0,686,684,1,0,0,0,687,692,3,90,45,0,688,689,5,104,0,0,689,690,
  	3,170,85,0,690,691,5,105,0,0,691,693,1,0,0,0,692,688,1,0,0,0,692,693,
  	1,0,0,0,693,694,1,0,0,0,694,699,3,158,79,0,695,696,5,109,0,0,696,698,
  	3,158,79,0,697,695,1,0,0,0,698,701,1,0,0,0,699,697,1,0,0,0,699,700,1,
  	0,0,0,700,119,1,0,0,0,701,699,1,0,0,0,702,703,7,7,0,0,703,121,1,0,0,0,
  	704,705,7,8,0,0,705,123,1,0,0,0,706,707,7,9,0,0,707,125,1,0,0,0,708,709,
  	7,10,0,0,709,127,1,0,0,0,710,711,3,130,65,0,711,712,5,107,0,0,712,129,
  	1,0,0,0,713,714,6,65,-1,0,714,718,3,160,80,0,715,718,3,150,75,0,716,718,
  	3,132,66,0,717,713,1,0,0,0,717,715,1,0,0,0,717,716,1,0,0,0,718,724,1,
  	0,0,0,719,720,10,1,0,0,720,721,5,46,0,0,721,723,3,132,66,0,722,719,1,
  	0,0,0,723,726,1,0,0,0,724,722,1,0,0,0,724,725,1,0,0,0,725,131,1,0,0,0,
  	726,724,1,0,0,0,727,728,6,66,-1,0,728,729,3,134,67,0,729,735,1,0,0,0,
  	730,731,10,1,0,0,731,732,5,45,0,0,732,734,3,134,67,0,733,730,1,0,0,0,
  	734,737,1,0,0,0,735,733,1,0,0,0,735,736,1,0,0,0,736,133,1,0,0,0,737,735,
  	1,0,0,0,738,739,6,67,-1,0,739,740,3,136,68,0,740,746,1,0,0,0,741,742,
  	10,1,0,0,742,743,5,47,0,0,743,745,3,136,68,0,744,741,1,0,0,0,745,748,
  	1,0,0,0,746,744,1,0,0,0,746,747,1,0,0,0,747,135,1,0,0,0,748,746,1,0,0,
  	0,749,750,6,68,-1,0,750,751,3,138,69,0,751,757,1,0,0,0,752,753,10,1,0,
  	0,753,754,5,48,0,0,754,756,3,138,69,0,755,752,1,0,0,0,756,759,1,0,0,0,
  	757,755,1,0,0,0,757,758,1,0,0,0,758,137,1,0,0,0,759,757,1,0,0,0,760,761,
  	6,69,-1,0,761,762,3,140,70,0,762,768,1,0,0,0,763,764,10,1,0,0,764,765,
  	5,49,0,0,765,767,3,140,70,0,766,763,1,0,0,0,767,770,1,0,0,0,768,766,1,
  	0,0,0,768,769,1,0,0,0,769,139,1,0,0,0,770,768,1,0,0,0,771,772,6,70,-1,
  	0,772,773,3,142,71,0,773,780,1,0,0,0,774,775,10,1,0,0,775,776,3,124,62,
  	0,776,777,3,142,71,0,777,779,1,0,0,0,778,774,1,0,0,0,779,782,1,0,0,0,
  	780,778,1,0,0,0,780,781,1,0,0,0,781,141,1,0,0,0,782,780,1,0,0,0,783,784,
  	6,71,-1,0,784,785,3,144,72,0,785,792,1,0,0,0,786,787,10,1,0,0,787,788,
  	3,122,61,0,788,789,3,144,72,0,789,791,1,0,0,0,790,786,1,0,0,0,791,794,
  	1,0,0,0,792,790,1,0,0,0,792,793,1,0,0,0,793,143,1,0,0,0,794,792,1,0,0,
  	0,795,796,6,72,-1,0,796,797,3,146,73,0,797,803,1,0,0,0,798,799,10,1,0,
  	0,799,800,7,11,0,0,800,802,3,146,73,0,801,798,1,0,0,0,802,805,1,0,0,0,
  	803,801,1,0,0,0,803,804,1,0,0,0,804,145,1,0,0,0,805,803,1,0,0,0,806,807,
  	6,73,-1,0,807,808,3,148,74,0,808,814,1,0,0,0,809,810,10,1,0,0,810,811,
  	7,12,0,0,811,813,3,148,74,0,812,809,1,0,0,0,813,816,1,0,0,0,814,812,1,
  	0,0,0,814,815,1,0,0,0,815,147,1,0,0,0,816,814,1,0,0,0,817,818,6,74,-1,
  	0,818,819,3,150,75,0,819,825,1,0,0,0,820,821,10,1,0,0,821,822,7,13,0,
  	0,822,824,3,150,75,0,823,820,1,0,0,0,824,827,1,0,0,0,825,823,1,0,0,0,
  	825,826,1,0,0,0,826,149,1,0,0,0,827,825,1,0,0,0,828,830,3,120,60,0,829,
  	828,1,0,0,0,829,830,1,0,0,0,830,831,1,0,0,0,831,832,3,152,76,0,832,151,
  	1,0,0,0,833,834,6,76,-1,0,834,835,3,156,78,0,835,841,1,0,0,0,836,837,
  	10,1,0,0,837,838,5,52,0,0,838,840,3,156,78,0,839,836,1,0,0,0,840,843,
  	1,0,0,0,841,839,1,0,0,0,841,842,1,0,0,0,842,153,1,0,0,0,843,841,1,0,0,
  	0,844,860,5,100,0,0,845,861,3,176,88,0,846,849,3,130,65,0,847,849,3,84,
  	42,0,848,846,1,0,0,0,848,847,1,0,0,0,849,857,1,0,0,0,850,853,5,109,0,
  	0,851,854,3,130,65,0,852,854,3,84,42,0,853,851,1,0,0,0,853,852,1,0,0,
  	0,854,856,1,0,0,0,855,850,1,0,0,0,856,859,1,0,0,0,857,855,1,0,0,0,857,
  	858,1,0,0,0,858,861,1,0,0,0,859,857,1,0,0,0,860,845,1,0,0,0,860,848,1,
  	0,0,0,861,862,1,0,0,0,862,863,5,101,0,0,863,155,1,0,0,0,864,865,6,78,
  	-1,0,865,866,3,160,80,0,866,871,1,0,0,0,867,868,10,1,0,0,868,870,3,154,
  	77,0,869,867,1,0,0,0,870,873,1,0,0,0,871,869,1,0,0,0,871,872,1,0,0,0,
  	872,157,1,0,0,0,873,871,1,0,0,0,874,878,5,130,0,0,875,877,3,154,77,0,
  	876,875,1,0,0,0,877,880,1,0,0,0,878,876,1,0,0,0,878,879,1,0,0,0,879,159,
  	1,0,0,0,880,878,1,0,0,0,881,896,5,126,0,0,882,896,5,129,0,0,883,896,5,
  	131,0,0,884,896,5,118,0,0,885,896,3,162,81,0,886,896,5,130,0,0,887,896,
  	5,133,0,0,888,896,3,164,82,0,889,896,3,196,98,0,890,896,3,208,104,0,891,
  	892,5,104,0,0,892,893,3,130,65,0,893,894,5,105,0,0,894,896,1,0,0,0,895,
  	881,1,0,0,0,895,882,1,0,0,0,895,883,1,0,0,0,895,884,1,0,0,0,895,885,1,
  	0,0,0,895,886,1,0,0,0,895,887,1,0,0,0,895,888,1,0,0,0,895,889,1,0,0,0,
  	895,890,1,0,0,0,895,891,1,0,0,0,896,161,1,0,0,0,897,898,7,14,0,0,898,
  	163,1,0,0,0,899,903,3,166,83,0,900,903,3,168,84,0,901,903,5,124,0,0,902,
  	899,1,0,0,0,902,900,1,0,0,0,902,901,1,0,0,0,903,904,1,0,0,0,904,905,5,
  	104,0,0,905,906,3,170,85,0,906,907,5,105,0,0,907,165,1,0,0,0,908,909,
  	7,15,0,0,909,167,1,0,0,0,910,911,3,50,25,0,911,169,1,0,0,0,912,917,3,
  	130,65,0,913,914,5,109,0,0,914,916,3,130,65,0,915,913,1,0,0,0,916,919,
  	1,0,0,0,917,915,1,0,0,0,917,918,1,0,0,0,918,171,1,0,0,0,919,917,1,0,0,
  	0,920,921,5,110,0,0,921,922,3,130,65,0,922,173,1,0,0,0,923,924,7,16,0,
  	0,924,175,1,0,0,0,925,926,5,102,0,0,926,931,3,130,65,0,927,928,5,109,
  	0,0,928,930,3,130,65,0,929,927,1,0,0,0,930,933,1,0,0,0,931,929,1,0,0,
  	0,931,932,1,0,0,0,932,934,1,0,0,0,933,931,1,0,0,0,934,935,5,103,0,0,935,
  	177,1,0,0,0,936,943,3,176,88,0,937,938,5,100,0,0,938,939,3,84,42,0,939,
  	940,5,101,0,0,940,943,1,0,0,0,941,943,5,130,0,0,942,936,1,0,0,0,942,937,
  	1,0,0,0,942,941,1,0,0,0,943,179,1,0,0,0,944,956,3,14,7,0,945,956,3,192,
  	96,0,946,951,5,102,0,0,947,950,3,14,7,0,948,950,3,192,96,0,949,947,1,
  	0,0,0,949,948,1,0,0,0,950,953,1,0,0,0,951,949,1,0,0,0,951,952,1,0,0,0,
  	952,954,1,0,0,0,953,951,1,0,0,0,954,956,5,103,0,0,955,944,1,0,0,0,955,
  	945,1,0,0,0,955,946,1,0,0,0,956,181,1,0,0,0,957,958,5,79,0,0,958,959,
  	5,104,0,0,959,960,3,130,65,0,960,961,5,105,0,0,961,964,3,180,90,0,962,
  	963,5,80,0,0,963,965,3,180,90,0,964,962,1,0,0,0,964,965,1,0,0,0,965,183,
  	1,0,0,0,966,967,5,81,0,0,967,968,5,130,0,0,968,969,5,82,0,0,969,976,3,
  	178,89,0,970,971,5,83,0,0,971,972,5,104,0,0,972,973,3,130,65,0,973,974,
  	5,105,0,0,974,976,1,0,0,0,975,966,1,0,0,0,975,970,1,0,0,0,976,185,1,0,
  	0,0,977,978,3,184,92,0,978,979,3,180,90,0,979,187,1,0,0,0,980,981,5,84,
  	0,0,981,982,5,107,0,0,982,189,1,0,0,0,983,986,5,85,0,0,984,987,3,130,
  	65,0,985,987,3,106,53,0,986,984,1,0,0,0,986,985,1,0,0,0,986,987,1,0,0,
  	0,987,988,1,0,0,0,988,989,5,107,0,0,989,191,1,0,0,0,990,991,7,17,0,0,
  	991,995,5,107,0,0,992,995,3,188,94,0,993,995,3,190,95,0,994,990,1,0,0,
  	0,994,992,1,0,0,0,994,993,1,0,0,0,995,193,1,0,0,0,996,997,5,88,0,0,997,
  	998,5,130,0,0,998,1000,5,104,0,0,999,1001,3,70,35,0,1000,999,1,0,0,0,
  	1000,1001,1,0,0,0,1001,1002,1,0,0,0,1002,1004,5,105,0,0,1003,1005,3,24,
  	12,0,1004,1003,1,0,0,0,1004,1005,1,0,0,0,1005,1006,1,0,0,0,1006,1007,
  	5,107,0,0,1007,195,1,0,0,0,1008,1009,5,130,0,0,1009,1011,5,104,0,0,1010,
  	1012,3,170,85,0,1011,1010,1,0,0,0,1011,1012,1,0,0,0,1012,1013,1,0,0,0,
  	1013,1014,5,105,0,0,1014,197,1,0,0,0,1015,1016,5,89,0,0,1016,1017,5,130,
  	0,0,1017,1019,5,104,0,0,1018,1020,3,78,39,0,1019,1018,1,0,0,0,1019,1020,
  	1,0,0,0,1020,1021,1,0,0,0,1021,1023,5,105,0,0,1022,1024,3,24,12,0,1023,
  	1022,1,0,0,0,1023,1024,1,0,0,0,1024,1025,1,0,0,0,1025,1026,3,200,100,
  	0,1026,199,1,0,0,0,1027,1031,5,102,0,0,1028,1030,3,14,7,0,1029,1028,1,
  	0,0,0,1030,1033,1,0,0,0,1031,1029,1,0,0,0,1031,1032,1,0,0,0,1032,1035,
  	1,0,0,0,1033,1031,1,0,0,0,1034,1036,3,190,95,0,1035,1034,1,0,0,0,1035,
  	1036,1,0,0,0,1036,1037,1,0,0,0,1037,1038,5,103,0,0,1038,201,1,0,0,0,1039,
  	1040,5,90,0,0,1040,1044,5,102,0,0,1041,1043,3,14,7,0,1042,1041,1,0,0,
  	0,1043,1046,1,0,0,0,1044,1042,1,0,0,0,1044,1045,1,0,0,0,1045,1047,1,0,
  	0,0,1046,1044,1,0,0,0,1047,1048,5,103,0,0,1048,203,1,0,0,0,1049,1050,
  	7,18,0,0,1050,205,1,0,0,0,1051,1053,5,93,0,0,1052,1054,3,26,13,0,1053,
  	1052,1,0,0,0,1053,1054,1,0,0,0,1054,1055,1,0,0,0,1055,1056,3,92,46,0,
  	1056,207,1,0,0,0,1057,1066,5,132,0,0,1058,1059,5,94,0,0,1059,1062,5,104,
  	0,0,1060,1063,5,130,0,0,1061,1063,3,92,46,0,1062,1060,1,0,0,0,1062,1061,
  	1,0,0,0,1063,1064,1,0,0,0,1064,1066,5,105,0,0,1065,1057,1,0,0,0,1065,
  	1058,1,0,0,0,1066,209,1,0,0,0,1067,1068,7,19,0,0,1068,211,1,0,0,0,1069,
  	1075,3,210,105,0,1070,1072,5,104,0,0,1071,1073,3,170,85,0,1072,1071,1,
  	0,0,0,1072,1073,1,0,0,0,1073,1074,1,0,0,0,1074,1076,5,105,0,0,1075,1070,
  	1,0,0,0,1075,1076,1,0,0,0,1076,1077,1,0,0,0,1077,1078,3,26,13,0,1078,
  	1083,3,158,79,0,1079,1080,5,109,0,0,1080,1082,3,158,79,0,1081,1079,1,
  	0,0,0,1082,1085,1,0,0,0,1083,1081,1,0,0,0,1083,1084,1,0,0,0,1084,213,
  	1,0,0,0,1085,1083,1,0,0,0,1086,1087,3,212,106,0,1087,1088,5,107,0,0,1088,
  	1091,1,0,0,0,1089,1091,3,206,103,0,1090,1086,1,0,0,0,1090,1089,1,0,0,
  	0,1091,215,1,0,0,0,1092,1095,3,218,109,0,1093,1095,3,220,110,0,1094,1092,
  	1,0,0,0,1094,1093,1,0,0,0,1095,217,1,0,0,0,1096,1097,5,97,0,0,1097,1098,
  	3,222,111,0,1098,1099,5,107,0,0,1099,219,1,0,0,0,1100,1101,5,98,0,0,1101,
  	1107,5,130,0,0,1102,1104,5,104,0,0,1103,1105,3,224,112,0,1104,1103,1,
  	0,0,0,1104,1105,1,0,0,0,1105,1106,1,0,0,0,1106,1108,5,105,0,0,1107,1102,
  	1,0,0,0,1107,1108,1,0,0,0,1108,1109,1,0,0,0,1109,1111,3,28,14,0,1110,
  	1112,3,24,12,0,1111,1110,1,0,0,0,1111,1112,1,0,0,0,1112,1113,1,0,0,0,
  	1113,1117,5,102,0,0,1114,1116,9,0,0,0,1115,1114,1,0,0,0,1116,1119,1,0,
  	0,0,1117,1118,1,0,0,0,1117,1115,1,0,0,0,1118,1120,1,0,0,0,1119,1117,1,
  	0,0,0,1120,1121,5,103,0,0,1121,221,1,0,0,0,1122,1123,7,20,0,0,1123,223,
  	1,0,0,0,1124,1127,3,74,37,0,1125,1127,3,170,85,0,1126,1124,1,0,0,0,1126,
  	1125,1,0,0,0,1127,225,1,0,0,0,119,229,231,235,240,246,270,280,287,297,
  	312,320,324,327,332,336,339,346,355,363,370,383,394,408,413,418,422,425,
  	428,436,441,446,450,460,462,469,476,485,492,496,509,516,521,528,547,551,
  	555,559,568,571,580,582,595,599,605,612,617,629,632,643,649,657,660,665,
  	679,684,692,699,717,724,735,746,757,768,780,792,803,814,825,829,841,848,
  	853,857,860,871,878,895,902,917,931,942,949,951,955,964,975,986,994,1000,
  	1004,1011,1019,1023,1031,1035,1044,1053,1062,1065,1072,1075,1083,1090,
  	1094,1104,1107,1111,1117,1126
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  qasmParserStaticData = staticData.release();
}

}

qasmParser::qasmParser(TokenStream *input) : qasmParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

qasmParser::qasmParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  qasmParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *qasmParserStaticData->atn, qasmParserStaticData->decisionToDFA, qasmParserStaticData->sharedContextCache, options);
}

qasmParser::~qasmParser() {
  delete _interpreter;
}

const atn::ATN& qasmParser::getATN() const {
  return *qasmParserStaticData->atn;
}

std::string qasmParser::getGrammarFileName() const {
  return "qasm.g4";
}

const std::vector<std::string>& qasmParser::getRuleNames() const {
  return qasmParserStaticData->ruleNames;
}

const dfa::Vocabulary& qasmParser::getVocabulary() const {
  return qasmParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView qasmParser::getSerializedATN() const {
  return qasmParserStaticData->serializedATN;
}


//----------------- ProgramContext ------------------------------------------------------------------

qasmParser::ProgramContext::ProgramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

qasmParser::HeaderContext* qasmParser::ProgramContext::header() {
  return getRuleContext<qasmParser::HeaderContext>(0);
}

std::vector<qasmParser::GlobalStatementContext *> qasmParser::ProgramContext::globalStatement() {
  return getRuleContexts<qasmParser::GlobalStatementContext>();
}

qasmParser::GlobalStatementContext* qasmParser::ProgramContext::globalStatement(size_t i) {
  return getRuleContext<qasmParser::GlobalStatementContext>(i);
}

std::vector<qasmParser::StatementContext *> qasmParser::ProgramContext::statement() {
  return getRuleContexts<qasmParser::StatementContext>();
}

qasmParser::StatementContext* qasmParser::ProgramContext::statement(size_t i) {
  return getRuleContext<qasmParser::StatementContext>(i);
}


size_t qasmParser::ProgramContext::getRuleIndex() const {
  return qasmParser::RuleProgram;
}

void qasmParser::ProgramContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProgram(this);
}

void qasmParser::ProgramContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProgram(this);
}


std::any qasmParser::ProgramContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitProgram(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::ProgramContext* qasmParser::program() {
  ProgramContext *_localctx = _tracker.createInstance<ProgramContext>(_ctx, getState());
  enterRule(_localctx, 0, qasmParser::RuleProgram);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(226);
    header();
    setState(231);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 5) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 5)) & ((1ULL << (qasmParser::T__4 - 5))
      | (1ULL << (qasmParser::T__5 - 5))
      | (1ULL << (qasmParser::T__6 - 5))
      | (1ULL << (qasmParser::T__7 - 5))
      | (1ULL << (qasmParser::T__8 - 5))
      | (1ULL << (qasmParser::T__9 - 5))
      | (1ULL << (qasmParser::T__10 - 5))
      | (1ULL << (qasmParser::T__11 - 5))
      | (1ULL << (qasmParser::T__12 - 5))
      | (1ULL << (qasmParser::T__13 - 5))
      | (1ULL << (qasmParser::T__15 - 5))
      | (1ULL << (qasmParser::T__16 - 5))
      | (1ULL << (qasmParser::T__17 - 5))
      | (1ULL << (qasmParser::T__18 - 5))
      | (1ULL << (qasmParser::T__19 - 5))
      | (1ULL << (qasmParser::T__20 - 5))
      | (1ULL << (qasmParser::T__21 - 5))
      | (1ULL << (qasmParser::T__22 - 5))
      | (1ULL << (qasmParser::T__23 - 5))
      | (1ULL << (qasmParser::T__24 - 5))
      | (1ULL << (qasmParser::T__25 - 5))
      | (1ULL << (qasmParser::T__26 - 5))
      | (1ULL << (qasmParser::T__27 - 5))
      | (1ULL << (qasmParser::T__28 - 5))
      | (1ULL << (qasmParser::T__29 - 5))
      | (1ULL << (qasmParser::T__30 - 5))
      | (1ULL << (qasmParser::T__31 - 5))
      | (1ULL << (qasmParser::T__33 - 5))
      | (1ULL << (qasmParser::T__34 - 5))
      | (1ULL << (qasmParser::T__35 - 5))
      | (1ULL << (qasmParser::T__36 - 5))
      | (1ULL << (qasmParser::T__37 - 5))
      | (1ULL << (qasmParser::T__52 - 5))
      | (1ULL << (qasmParser::T__53 - 5))
      | (1ULL << (qasmParser::T__54 - 5))
      | (1ULL << (qasmParser::T__55 - 5))
      | (1ULL << (qasmParser::T__56 - 5))
      | (1ULL << (qasmParser::T__57 - 5))
      | (1ULL << (qasmParser::T__58 - 5))
      | (1ULL << (qasmParser::T__59 - 5))
      | (1ULL << (qasmParser::T__60 - 5))
      | (1ULL << (qasmParser::T__61 - 5))
      | (1ULL << (qasmParser::T__62 - 5))
      | (1ULL << (qasmParser::T__63 - 5))
      | (1ULL << (qasmParser::T__64 - 5))
      | (1ULL << (qasmParser::T__65 - 5)))) != 0) || ((((_la - 79) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 79)) & ((1ULL << (qasmParser::T__78 - 79))
      | (1ULL << (qasmParser::T__80 - 79))
      | (1ULL << (qasmParser::T__82 - 79))
      | (1ULL << (qasmParser::T__83 - 79))
      | (1ULL << (qasmParser::T__87 - 79))
      | (1ULL << (qasmParser::T__88 - 79))
      | (1ULL << (qasmParser::T__89 - 79))
      | (1ULL << (qasmParser::T__90 - 79))
      | (1ULL << (qasmParser::T__91 - 79))
      | (1ULL << (qasmParser::T__92 - 79))
      | (1ULL << (qasmParser::T__93 - 79))
      | (1ULL << (qasmParser::T__94 - 79))
      | (1ULL << (qasmParser::T__95 - 79))
      | (1ULL << (qasmParser::T__96 - 79))
      | (1ULL << (qasmParser::T__97 - 79))
      | (1ULL << (qasmParser::LPAREN - 79))
      | (1ULL << (qasmParser::MINUS - 79))
      | (1ULL << (qasmParser::ImagNumber - 79))
      | (1ULL << (qasmParser::COMPLEX - 79))
      | (1ULL << (qasmParser::CONST - 79))
      | (1ULL << (qasmParser::ARRAY - 79))
      | (1ULL << (qasmParser::SIZEOF - 79))
      | (1ULL << (qasmParser::Constant - 79))
      | (1ULL << (qasmParser::Integer - 79))
      | (1ULL << (qasmParser::Identifier - 79))
      | (1ULL << (qasmParser::RealNumber - 79))
      | (1ULL << (qasmParser::TimingLiteral - 79))
      | (1ULL << (qasmParser::StringLiteral - 79)))) != 0)) {
      setState(229);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case qasmParser::T__4:
        case qasmParser::T__5:
        case qasmParser::T__15:
        case qasmParser::T__87:
        case qasmParser::T__88:
        case qasmParser::T__89:
        case qasmParser::T__96:
        case qasmParser::T__97: {
          setState(227);
          globalStatement();
          break;
        }

        case qasmParser::T__6:
        case qasmParser::T__7:
        case qasmParser::T__8:
        case qasmParser::T__9:
        case qasmParser::T__10:
        case qasmParser::T__11:
        case qasmParser::T__12:
        case qasmParser::T__13:
        case qasmParser::T__16:
        case qasmParser::T__17:
        case qasmParser::T__18:
        case qasmParser::T__19:
        case qasmParser::T__20:
        case qasmParser::T__21:
        case qasmParser::T__22:
        case qasmParser::T__23:
        case qasmParser::T__24:
        case qasmParser::T__25:
        case qasmParser::T__26:
        case qasmParser::T__27:
        case qasmParser::T__28:
        case qasmParser::T__29:
        case qasmParser::T__30:
        case qasmParser::T__31:
        case qasmParser::T__33:
        case qasmParser::T__34:
        case qasmParser::T__35:
        case qasmParser::T__36:
        case qasmParser::T__37:
        case qasmParser::T__52:
        case qasmParser::T__53:
        case qasmParser::T__54:
        case qasmParser::T__55:
        case qasmParser::T__56:
        case qasmParser::T__57:
        case qasmParser::T__58:
        case qasmParser::T__59:
        case qasmParser::T__60:
        case qasmParser::T__61:
        case qasmParser::T__62:
        case qasmParser::T__63:
        case qasmParser::T__64:
        case qasmParser::T__65:
        case qasmParser::T__78:
        case qasmParser::T__80:
        case qasmParser::T__82:
        case qasmParser::T__83:
        case qasmParser::T__90:
        case qasmParser::T__91:
        case qasmParser::T__92:
        case qasmParser::T__93:
        case qasmParser::T__94:
        case qasmParser::T__95:
        case qasmParser::LPAREN:
        case qasmParser::MINUS:
        case qasmParser::ImagNumber:
        case qasmParser::COMPLEX:
        case qasmParser::CONST:
        case qasmParser::ARRAY:
        case qasmParser::SIZEOF:
        case qasmParser::Constant:
        case qasmParser::Integer:
        case qasmParser::Identifier:
        case qasmParser::RealNumber:
        case qasmParser::TimingLiteral:
        case qasmParser::StringLiteral: {
          setState(228);
          statement();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(233);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HeaderContext ------------------------------------------------------------------

qasmParser::HeaderContext::HeaderContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

qasmParser::VersionContext* qasmParser::HeaderContext::version() {
  return getRuleContext<qasmParser::VersionContext>(0);
}

std::vector<qasmParser::IncludeContext *> qasmParser::HeaderContext::include() {
  return getRuleContexts<qasmParser::IncludeContext>();
}

qasmParser::IncludeContext* qasmParser::HeaderContext::include(size_t i) {
  return getRuleContext<qasmParser::IncludeContext>(i);
}

std::vector<qasmParser::IoContext *> qasmParser::HeaderContext::io() {
  return getRuleContexts<qasmParser::IoContext>();
}

qasmParser::IoContext* qasmParser::HeaderContext::io(size_t i) {
  return getRuleContext<qasmParser::IoContext>(i);
}


size_t qasmParser::HeaderContext::getRuleIndex() const {
  return qasmParser::RuleHeader;
}

void qasmParser::HeaderContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterHeader(this);
}

void qasmParser::HeaderContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitHeader(this);
}


std::any qasmParser::HeaderContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitHeader(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::HeaderContext* qasmParser::header() {
  HeaderContext *_localctx = _tracker.createInstance<HeaderContext>(_ctx, getState());
  enterRule(_localctx, 2, qasmParser::RuleHeader);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(235);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == qasmParser::T__0) {
      setState(234);
      version();
    }
    setState(240);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == qasmParser::T__1) {
      setState(237);
      include();
      setState(242);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(246);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == qasmParser::T__2

    || _la == qasmParser::T__3) {
      setState(243);
      io();
      setState(248);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VersionContext ------------------------------------------------------------------

qasmParser::VersionContext::VersionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* qasmParser::VersionContext::SEMICOLON() {
  return getToken(qasmParser::SEMICOLON, 0);
}

tree::TerminalNode* qasmParser::VersionContext::Integer() {
  return getToken(qasmParser::Integer, 0);
}

tree::TerminalNode* qasmParser::VersionContext::RealNumber() {
  return getToken(qasmParser::RealNumber, 0);
}


size_t qasmParser::VersionContext::getRuleIndex() const {
  return qasmParser::RuleVersion;
}

void qasmParser::VersionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVersion(this);
}

void qasmParser::VersionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVersion(this);
}


std::any qasmParser::VersionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitVersion(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::VersionContext* qasmParser::version() {
  VersionContext *_localctx = _tracker.createInstance<VersionContext>(_ctx, getState());
  enterRule(_localctx, 4, qasmParser::RuleVersion);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(249);
    match(qasmParser::T__0);
    setState(250);
    _la = _input->LA(1);
    if (!(_la == qasmParser::Integer

    || _la == qasmParser::RealNumber)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(251);
    match(qasmParser::SEMICOLON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IncludeContext ------------------------------------------------------------------

qasmParser::IncludeContext::IncludeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* qasmParser::IncludeContext::StringLiteral() {
  return getToken(qasmParser::StringLiteral, 0);
}

tree::TerminalNode* qasmParser::IncludeContext::SEMICOLON() {
  return getToken(qasmParser::SEMICOLON, 0);
}


size_t qasmParser::IncludeContext::getRuleIndex() const {
  return qasmParser::RuleInclude;
}

void qasmParser::IncludeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInclude(this);
}

void qasmParser::IncludeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInclude(this);
}


std::any qasmParser::IncludeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitInclude(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::IncludeContext* qasmParser::include() {
  IncludeContext *_localctx = _tracker.createInstance<IncludeContext>(_ctx, getState());
  enterRule(_localctx, 6, qasmParser::RuleInclude);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(253);
    match(qasmParser::T__1);
    setState(254);
    match(qasmParser::StringLiteral);
    setState(255);
    match(qasmParser::SEMICOLON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IoIdentifierContext ------------------------------------------------------------------

qasmParser::IoIdentifierContext::IoIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t qasmParser::IoIdentifierContext::getRuleIndex() const {
  return qasmParser::RuleIoIdentifier;
}

void qasmParser::IoIdentifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIoIdentifier(this);
}

void qasmParser::IoIdentifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIoIdentifier(this);
}


std::any qasmParser::IoIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitIoIdentifier(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::IoIdentifierContext* qasmParser::ioIdentifier() {
  IoIdentifierContext *_localctx = _tracker.createInstance<IoIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 8, qasmParser::RuleIoIdentifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(257);
    _la = _input->LA(1);
    if (!(_la == qasmParser::T__2

    || _la == qasmParser::T__3)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IoContext ------------------------------------------------------------------

qasmParser::IoContext::IoContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

qasmParser::IoIdentifierContext* qasmParser::IoContext::ioIdentifier() {
  return getRuleContext<qasmParser::IoIdentifierContext>(0);
}

qasmParser::ClassicalTypeContext* qasmParser::IoContext::classicalType() {
  return getRuleContext<qasmParser::ClassicalTypeContext>(0);
}

tree::TerminalNode* qasmParser::IoContext::Identifier() {
  return getToken(qasmParser::Identifier, 0);
}

tree::TerminalNode* qasmParser::IoContext::SEMICOLON() {
  return getToken(qasmParser::SEMICOLON, 0);
}


size_t qasmParser::IoContext::getRuleIndex() const {
  return qasmParser::RuleIo;
}

void qasmParser::IoContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIo(this);
}

void qasmParser::IoContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIo(this);
}


std::any qasmParser::IoContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitIo(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::IoContext* qasmParser::io() {
  IoContext *_localctx = _tracker.createInstance<IoContext>(_ctx, getState());
  enterRule(_localctx, 10, qasmParser::RuleIo);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(259);
    ioIdentifier();
    setState(260);
    classicalType();
    setState(261);
    match(qasmParser::Identifier);
    setState(262);
    match(qasmParser::SEMICOLON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GlobalStatementContext ------------------------------------------------------------------

qasmParser::GlobalStatementContext::GlobalStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

qasmParser::SubroutineDefinitionContext* qasmParser::GlobalStatementContext::subroutineDefinition() {
  return getRuleContext<qasmParser::SubroutineDefinitionContext>(0);
}

qasmParser::ExternDeclarationContext* qasmParser::GlobalStatementContext::externDeclaration() {
  return getRuleContext<qasmParser::ExternDeclarationContext>(0);
}

qasmParser::QuantumGateDefinitionContext* qasmParser::GlobalStatementContext::quantumGateDefinition() {
  return getRuleContext<qasmParser::QuantumGateDefinitionContext>(0);
}

qasmParser::CalibrationContext* qasmParser::GlobalStatementContext::calibration() {
  return getRuleContext<qasmParser::CalibrationContext>(0);
}

qasmParser::QuantumDeclarationStatementContext* qasmParser::GlobalStatementContext::quantumDeclarationStatement() {
  return getRuleContext<qasmParser::QuantumDeclarationStatementContext>(0);
}

qasmParser::PragmaContext* qasmParser::GlobalStatementContext::pragma() {
  return getRuleContext<qasmParser::PragmaContext>(0);
}


size_t qasmParser::GlobalStatementContext::getRuleIndex() const {
  return qasmParser::RuleGlobalStatement;
}

void qasmParser::GlobalStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGlobalStatement(this);
}

void qasmParser::GlobalStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGlobalStatement(this);
}


std::any qasmParser::GlobalStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitGlobalStatement(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::GlobalStatementContext* qasmParser::globalStatement() {
  GlobalStatementContext *_localctx = _tracker.createInstance<GlobalStatementContext>(_ctx, getState());
  enterRule(_localctx, 12, qasmParser::RuleGlobalStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(270);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case qasmParser::T__88: {
        enterOuterAlt(_localctx, 1);
        setState(264);
        subroutineDefinition();
        break;
      }

      case qasmParser::T__87: {
        enterOuterAlt(_localctx, 2);
        setState(265);
        externDeclaration();
        break;
      }

      case qasmParser::T__15: {
        enterOuterAlt(_localctx, 3);
        setState(266);
        quantumGateDefinition();
        break;
      }

      case qasmParser::T__96:
      case qasmParser::T__97: {
        enterOuterAlt(_localctx, 4);
        setState(267);
        calibration();
        break;
      }

      case qasmParser::T__4:
      case qasmParser::T__5: {
        enterOuterAlt(_localctx, 5);
        setState(268);
        quantumDeclarationStatement();
        break;
      }

      case qasmParser::T__89: {
        enterOuterAlt(_localctx, 6);
        setState(269);
        pragma();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementContext ------------------------------------------------------------------

qasmParser::StatementContext::StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

qasmParser::ExpressionStatementContext* qasmParser::StatementContext::expressionStatement() {
  return getRuleContext<qasmParser::ExpressionStatementContext>(0);
}

qasmParser::AssignmentStatementContext* qasmParser::StatementContext::assignmentStatement() {
  return getRuleContext<qasmParser::AssignmentStatementContext>(0);
}

qasmParser::ClassicalDeclarationStatementContext* qasmParser::StatementContext::classicalDeclarationStatement() {
  return getRuleContext<qasmParser::ClassicalDeclarationStatementContext>(0);
}

qasmParser::BranchingStatementContext* qasmParser::StatementContext::branchingStatement() {
  return getRuleContext<qasmParser::BranchingStatementContext>(0);
}

qasmParser::LoopStatementContext* qasmParser::StatementContext::loopStatement() {
  return getRuleContext<qasmParser::LoopStatementContext>(0);
}

qasmParser::EndStatementContext* qasmParser::StatementContext::endStatement() {
  return getRuleContext<qasmParser::EndStatementContext>(0);
}

qasmParser::AliasStatementContext* qasmParser::StatementContext::aliasStatement() {
  return getRuleContext<qasmParser::AliasStatementContext>(0);
}

qasmParser::QuantumStatementContext* qasmParser::StatementContext::quantumStatement() {
  return getRuleContext<qasmParser::QuantumStatementContext>(0);
}


size_t qasmParser::StatementContext::getRuleIndex() const {
  return qasmParser::RuleStatement;
}

void qasmParser::StatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatement(this);
}

void qasmParser::StatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatement(this);
}


std::any qasmParser::StatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitStatement(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::StatementContext* qasmParser::statement() {
  StatementContext *_localctx = _tracker.createInstance<StatementContext>(_ctx, getState());
  enterRule(_localctx, 14, qasmParser::RuleStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(280);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 6, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(272);
      expressionStatement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(273);
      assignmentStatement();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(274);
      classicalDeclarationStatement();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(275);
      branchingStatement();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(276);
      loopStatement();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(277);
      endStatement();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(278);
      aliasStatement();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(279);
      quantumStatement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QuantumDeclarationStatementContext ------------------------------------------------------------------

qasmParser::QuantumDeclarationStatementContext::QuantumDeclarationStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

qasmParser::QuantumDeclarationContext* qasmParser::QuantumDeclarationStatementContext::quantumDeclaration() {
  return getRuleContext<qasmParser::QuantumDeclarationContext>(0);
}

tree::TerminalNode* qasmParser::QuantumDeclarationStatementContext::SEMICOLON() {
  return getToken(qasmParser::SEMICOLON, 0);
}


size_t qasmParser::QuantumDeclarationStatementContext::getRuleIndex() const {
  return qasmParser::RuleQuantumDeclarationStatement;
}

void qasmParser::QuantumDeclarationStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQuantumDeclarationStatement(this);
}

void qasmParser::QuantumDeclarationStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQuantumDeclarationStatement(this);
}


std::any qasmParser::QuantumDeclarationStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitQuantumDeclarationStatement(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::QuantumDeclarationStatementContext* qasmParser::quantumDeclarationStatement() {
  QuantumDeclarationStatementContext *_localctx = _tracker.createInstance<QuantumDeclarationStatementContext>(_ctx, getState());
  enterRule(_localctx, 16, qasmParser::RuleQuantumDeclarationStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(282);
    quantumDeclaration();
    setState(283);
    match(qasmParser::SEMICOLON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassicalDeclarationStatementContext ------------------------------------------------------------------

qasmParser::ClassicalDeclarationStatementContext::ClassicalDeclarationStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* qasmParser::ClassicalDeclarationStatementContext::SEMICOLON() {
  return getToken(qasmParser::SEMICOLON, 0);
}

qasmParser::ClassicalDeclarationContext* qasmParser::ClassicalDeclarationStatementContext::classicalDeclaration() {
  return getRuleContext<qasmParser::ClassicalDeclarationContext>(0);
}

qasmParser::ConstantDeclarationContext* qasmParser::ClassicalDeclarationStatementContext::constantDeclaration() {
  return getRuleContext<qasmParser::ConstantDeclarationContext>(0);
}


size_t qasmParser::ClassicalDeclarationStatementContext::getRuleIndex() const {
  return qasmParser::RuleClassicalDeclarationStatement;
}

void qasmParser::ClassicalDeclarationStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassicalDeclarationStatement(this);
}

void qasmParser::ClassicalDeclarationStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassicalDeclarationStatement(this);
}


std::any qasmParser::ClassicalDeclarationStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitClassicalDeclarationStatement(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::ClassicalDeclarationStatementContext* qasmParser::classicalDeclarationStatement() {
  ClassicalDeclarationStatementContext *_localctx = _tracker.createInstance<ClassicalDeclarationStatementContext>(_ctx, getState());
  enterRule(_localctx, 18, qasmParser::RuleClassicalDeclarationStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(287);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case qasmParser::T__6:
      case qasmParser::T__7:
      case qasmParser::T__8:
      case qasmParser::T__9:
      case qasmParser::T__10:
      case qasmParser::T__11:
      case qasmParser::T__12:
      case qasmParser::T__90:
      case qasmParser::T__91:
      case qasmParser::COMPLEX:
      case qasmParser::ARRAY: {
        setState(285);
        classicalDeclaration();
        break;
      }

      case qasmParser::CONST: {
        setState(286);
        constantDeclaration();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(289);
    match(qasmParser::SEMICOLON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassicalAssignmentContext ------------------------------------------------------------------

qasmParser::ClassicalAssignmentContext::ClassicalAssignmentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

qasmParser::IndexedIdentifierContext* qasmParser::ClassicalAssignmentContext::indexedIdentifier() {
  return getRuleContext<qasmParser::IndexedIdentifierContext>(0);
}

qasmParser::AssignmentOperatorContext* qasmParser::ClassicalAssignmentContext::assignmentOperator() {
  return getRuleContext<qasmParser::AssignmentOperatorContext>(0);
}

qasmParser::ExpressionContext* qasmParser::ClassicalAssignmentContext::expression() {
  return getRuleContext<qasmParser::ExpressionContext>(0);
}


size_t qasmParser::ClassicalAssignmentContext::getRuleIndex() const {
  return qasmParser::RuleClassicalAssignment;
}

void qasmParser::ClassicalAssignmentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassicalAssignment(this);
}

void qasmParser::ClassicalAssignmentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassicalAssignment(this);
}


std::any qasmParser::ClassicalAssignmentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitClassicalAssignment(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::ClassicalAssignmentContext* qasmParser::classicalAssignment() {
  ClassicalAssignmentContext *_localctx = _tracker.createInstance<ClassicalAssignmentContext>(_ctx, getState());
  enterRule(_localctx, 20, qasmParser::RuleClassicalAssignment);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(291);
    indexedIdentifier();
    setState(292);
    assignmentOperator();
    setState(293);
    expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssignmentStatementContext ------------------------------------------------------------------

qasmParser::AssignmentStatementContext::AssignmentStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* qasmParser::AssignmentStatementContext::SEMICOLON() {
  return getToken(qasmParser::SEMICOLON, 0);
}

qasmParser::ClassicalAssignmentContext* qasmParser::AssignmentStatementContext::classicalAssignment() {
  return getRuleContext<qasmParser::ClassicalAssignmentContext>(0);
}

qasmParser::QuantumMeasurementAssignmentContext* qasmParser::AssignmentStatementContext::quantumMeasurementAssignment() {
  return getRuleContext<qasmParser::QuantumMeasurementAssignmentContext>(0);
}


size_t qasmParser::AssignmentStatementContext::getRuleIndex() const {
  return qasmParser::RuleAssignmentStatement;
}

void qasmParser::AssignmentStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssignmentStatement(this);
}

void qasmParser::AssignmentStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssignmentStatement(this);
}


std::any qasmParser::AssignmentStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitAssignmentStatement(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::AssignmentStatementContext* qasmParser::assignmentStatement() {
  AssignmentStatementContext *_localctx = _tracker.createInstance<AssignmentStatementContext>(_ctx, getState());
  enterRule(_localctx, 22, qasmParser::RuleAssignmentStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(297);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 8, _ctx)) {
    case 1: {
      setState(295);
      classicalAssignment();
      break;
    }

    case 2: {
      setState(296);
      quantumMeasurementAssignment();
      break;
    }

    default:
      break;
    }
    setState(299);
    match(qasmParser::SEMICOLON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReturnSignatureContext ------------------------------------------------------------------

qasmParser::ReturnSignatureContext::ReturnSignatureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* qasmParser::ReturnSignatureContext::ARROW() {
  return getToken(qasmParser::ARROW, 0);
}

qasmParser::ClassicalTypeContext* qasmParser::ReturnSignatureContext::classicalType() {
  return getRuleContext<qasmParser::ClassicalTypeContext>(0);
}


size_t qasmParser::ReturnSignatureContext::getRuleIndex() const {
  return qasmParser::RuleReturnSignature;
}

void qasmParser::ReturnSignatureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReturnSignature(this);
}

void qasmParser::ReturnSignatureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReturnSignature(this);
}


std::any qasmParser::ReturnSignatureContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitReturnSignature(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::ReturnSignatureContext* qasmParser::returnSignature() {
  ReturnSignatureContext *_localctx = _tracker.createInstance<ReturnSignatureContext>(_ctx, getState());
  enterRule(_localctx, 24, qasmParser::RuleReturnSignature);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(301);
    match(qasmParser::ARROW);
    setState(302);
    classicalType();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DesignatorContext ------------------------------------------------------------------

qasmParser::DesignatorContext::DesignatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* qasmParser::DesignatorContext::LBRACKET() {
  return getToken(qasmParser::LBRACKET, 0);
}

qasmParser::ExpressionContext* qasmParser::DesignatorContext::expression() {
  return getRuleContext<qasmParser::ExpressionContext>(0);
}

tree::TerminalNode* qasmParser::DesignatorContext::RBRACKET() {
  return getToken(qasmParser::RBRACKET, 0);
}


size_t qasmParser::DesignatorContext::getRuleIndex() const {
  return qasmParser::RuleDesignator;
}

void qasmParser::DesignatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDesignator(this);
}

void qasmParser::DesignatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDesignator(this);
}


std::any qasmParser::DesignatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitDesignator(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::DesignatorContext* qasmParser::designator() {
  DesignatorContext *_localctx = _tracker.createInstance<DesignatorContext>(_ctx, getState());
  enterRule(_localctx, 26, qasmParser::RuleDesignator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(304);
    match(qasmParser::LBRACKET);
    setState(305);
    expression(0);
    setState(306);
    match(qasmParser::RBRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentifierListContext ------------------------------------------------------------------

qasmParser::IdentifierListContext::IdentifierListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> qasmParser::IdentifierListContext::Identifier() {
  return getTokens(qasmParser::Identifier);
}

tree::TerminalNode* qasmParser::IdentifierListContext::Identifier(size_t i) {
  return getToken(qasmParser::Identifier, i);
}

std::vector<tree::TerminalNode *> qasmParser::IdentifierListContext::COMMA() {
  return getTokens(qasmParser::COMMA);
}

tree::TerminalNode* qasmParser::IdentifierListContext::COMMA(size_t i) {
  return getToken(qasmParser::COMMA, i);
}


size_t qasmParser::IdentifierListContext::getRuleIndex() const {
  return qasmParser::RuleIdentifierList;
}

void qasmParser::IdentifierListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIdentifierList(this);
}

void qasmParser::IdentifierListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIdentifierList(this);
}


std::any qasmParser::IdentifierListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitIdentifierList(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::IdentifierListContext* qasmParser::identifierList() {
  IdentifierListContext *_localctx = _tracker.createInstance<IdentifierListContext>(_ctx, getState());
  enterRule(_localctx, 28, qasmParser::RuleIdentifierList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(312);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 9, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(308);
        match(qasmParser::Identifier);
        setState(309);
        match(qasmParser::COMMA); 
      }
      setState(314);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 9, _ctx);
    }
    setState(315);
    match(qasmParser::Identifier);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QuantumDeclarationContext ------------------------------------------------------------------

qasmParser::QuantumDeclarationContext::QuantumDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* qasmParser::QuantumDeclarationContext::Identifier() {
  return getToken(qasmParser::Identifier, 0);
}

qasmParser::DesignatorContext* qasmParser::QuantumDeclarationContext::designator() {
  return getRuleContext<qasmParser::DesignatorContext>(0);
}


size_t qasmParser::QuantumDeclarationContext::getRuleIndex() const {
  return qasmParser::RuleQuantumDeclaration;
}

void qasmParser::QuantumDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQuantumDeclaration(this);
}

void qasmParser::QuantumDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQuantumDeclaration(this);
}


std::any qasmParser::QuantumDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitQuantumDeclaration(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::QuantumDeclarationContext* qasmParser::quantumDeclaration() {
  QuantumDeclarationContext *_localctx = _tracker.createInstance<QuantumDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 30, qasmParser::RuleQuantumDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(327);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case qasmParser::T__4: {
        enterOuterAlt(_localctx, 1);
        setState(317);
        match(qasmParser::T__4);
        setState(318);
        match(qasmParser::Identifier);
        setState(320);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == qasmParser::LBRACKET) {
          setState(319);
          designator();
        }
        break;
      }

      case qasmParser::T__5: {
        enterOuterAlt(_localctx, 2);
        setState(322);
        match(qasmParser::T__5);
        setState(324);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == qasmParser::LBRACKET) {
          setState(323);
          designator();
        }
        setState(326);
        match(qasmParser::Identifier);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QuantumArgumentContext ------------------------------------------------------------------

qasmParser::QuantumArgumentContext::QuantumArgumentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* qasmParser::QuantumArgumentContext::Identifier() {
  return getToken(qasmParser::Identifier, 0);
}

qasmParser::DesignatorContext* qasmParser::QuantumArgumentContext::designator() {
  return getRuleContext<qasmParser::DesignatorContext>(0);
}


size_t qasmParser::QuantumArgumentContext::getRuleIndex() const {
  return qasmParser::RuleQuantumArgument;
}

void qasmParser::QuantumArgumentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQuantumArgument(this);
}

void qasmParser::QuantumArgumentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQuantumArgument(this);
}


std::any qasmParser::QuantumArgumentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitQuantumArgument(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::QuantumArgumentContext* qasmParser::quantumArgument() {
  QuantumArgumentContext *_localctx = _tracker.createInstance<QuantumArgumentContext>(_ctx, getState());
  enterRule(_localctx, 32, qasmParser::RuleQuantumArgument);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(339);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case qasmParser::T__4: {
        enterOuterAlt(_localctx, 1);
        setState(329);
        match(qasmParser::T__4);
        setState(330);
        match(qasmParser::Identifier);
        setState(332);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == qasmParser::LBRACKET) {
          setState(331);
          designator();
        }
        break;
      }

      case qasmParser::T__5: {
        enterOuterAlt(_localctx, 2);
        setState(334);
        match(qasmParser::T__5);
        setState(336);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == qasmParser::LBRACKET) {
          setState(335);
          designator();
        }
        setState(338);
        match(qasmParser::Identifier);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QuantumArgumentListContext ------------------------------------------------------------------

qasmParser::QuantumArgumentListContext::QuantumArgumentListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<qasmParser::QuantumArgumentContext *> qasmParser::QuantumArgumentListContext::quantumArgument() {
  return getRuleContexts<qasmParser::QuantumArgumentContext>();
}

qasmParser::QuantumArgumentContext* qasmParser::QuantumArgumentListContext::quantumArgument(size_t i) {
  return getRuleContext<qasmParser::QuantumArgumentContext>(i);
}

std::vector<tree::TerminalNode *> qasmParser::QuantumArgumentListContext::COMMA() {
  return getTokens(qasmParser::COMMA);
}

tree::TerminalNode* qasmParser::QuantumArgumentListContext::COMMA(size_t i) {
  return getToken(qasmParser::COMMA, i);
}


size_t qasmParser::QuantumArgumentListContext::getRuleIndex() const {
  return qasmParser::RuleQuantumArgumentList;
}

void qasmParser::QuantumArgumentListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQuantumArgumentList(this);
}

void qasmParser::QuantumArgumentListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQuantumArgumentList(this);
}


std::any qasmParser::QuantumArgumentListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitQuantumArgumentList(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::QuantumArgumentListContext* qasmParser::quantumArgumentList() {
  QuantumArgumentListContext *_localctx = _tracker.createInstance<QuantumArgumentListContext>(_ctx, getState());
  enterRule(_localctx, 34, qasmParser::RuleQuantumArgumentList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(341);
    quantumArgument();
    setState(346);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == qasmParser::COMMA) {
      setState(342);
      match(qasmParser::COMMA);
      setState(343);
      quantumArgument();
      setState(348);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BitTypeContext ------------------------------------------------------------------

qasmParser::BitTypeContext::BitTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t qasmParser::BitTypeContext::getRuleIndex() const {
  return qasmParser::RuleBitType;
}

void qasmParser::BitTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBitType(this);
}

void qasmParser::BitTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBitType(this);
}


std::any qasmParser::BitTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitBitType(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::BitTypeContext* qasmParser::bitType() {
  BitTypeContext *_localctx = _tracker.createInstance<BitTypeContext>(_ctx, getState());
  enterRule(_localctx, 36, qasmParser::RuleBitType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(349);
    _la = _input->LA(1);
    if (!(_la == qasmParser::T__6

    || _la == qasmParser::T__7)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SingleDesignatorTypeContext ------------------------------------------------------------------

qasmParser::SingleDesignatorTypeContext::SingleDesignatorTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t qasmParser::SingleDesignatorTypeContext::getRuleIndex() const {
  return qasmParser::RuleSingleDesignatorType;
}

void qasmParser::SingleDesignatorTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSingleDesignatorType(this);
}

void qasmParser::SingleDesignatorTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSingleDesignatorType(this);
}


std::any qasmParser::SingleDesignatorTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitSingleDesignatorType(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::SingleDesignatorTypeContext* qasmParser::singleDesignatorType() {
  SingleDesignatorTypeContext *_localctx = _tracker.createInstance<SingleDesignatorTypeContext>(_ctx, getState());
  enterRule(_localctx, 38, qasmParser::RuleSingleDesignatorType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(351);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << qasmParser::T__8)
      | (1ULL << qasmParser::T__9)
      | (1ULL << qasmParser::T__10)
      | (1ULL << qasmParser::T__11))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NoDesignatorTypeContext ------------------------------------------------------------------

qasmParser::NoDesignatorTypeContext::NoDesignatorTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

qasmParser::TimingTypeContext* qasmParser::NoDesignatorTypeContext::timingType() {
  return getRuleContext<qasmParser::TimingTypeContext>(0);
}


size_t qasmParser::NoDesignatorTypeContext::getRuleIndex() const {
  return qasmParser::RuleNoDesignatorType;
}

void qasmParser::NoDesignatorTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNoDesignatorType(this);
}

void qasmParser::NoDesignatorTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNoDesignatorType(this);
}


std::any qasmParser::NoDesignatorTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitNoDesignatorType(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::NoDesignatorTypeContext* qasmParser::noDesignatorType() {
  NoDesignatorTypeContext *_localctx = _tracker.createInstance<NoDesignatorTypeContext>(_ctx, getState());
  enterRule(_localctx, 40, qasmParser::RuleNoDesignatorType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(355);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case qasmParser::T__12: {
        enterOuterAlt(_localctx, 1);
        setState(353);
        match(qasmParser::T__12);
        break;
      }

      case qasmParser::T__90:
      case qasmParser::T__91: {
        enterOuterAlt(_localctx, 2);
        setState(354);
        timingType();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NonArrayTypeContext ------------------------------------------------------------------

qasmParser::NonArrayTypeContext::NonArrayTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

qasmParser::SingleDesignatorTypeContext* qasmParser::NonArrayTypeContext::singleDesignatorType() {
  return getRuleContext<qasmParser::SingleDesignatorTypeContext>(0);
}

qasmParser::DesignatorContext* qasmParser::NonArrayTypeContext::designator() {
  return getRuleContext<qasmParser::DesignatorContext>(0);
}

qasmParser::NoDesignatorTypeContext* qasmParser::NonArrayTypeContext::noDesignatorType() {
  return getRuleContext<qasmParser::NoDesignatorTypeContext>(0);
}

qasmParser::BitTypeContext* qasmParser::NonArrayTypeContext::bitType() {
  return getRuleContext<qasmParser::BitTypeContext>(0);
}

tree::TerminalNode* qasmParser::NonArrayTypeContext::COMPLEX() {
  return getToken(qasmParser::COMPLEX, 0);
}

tree::TerminalNode* qasmParser::NonArrayTypeContext::LBRACKET() {
  return getToken(qasmParser::LBRACKET, 0);
}

qasmParser::NumericTypeContext* qasmParser::NonArrayTypeContext::numericType() {
  return getRuleContext<qasmParser::NumericTypeContext>(0);
}

tree::TerminalNode* qasmParser::NonArrayTypeContext::RBRACKET() {
  return getToken(qasmParser::RBRACKET, 0);
}


size_t qasmParser::NonArrayTypeContext::getRuleIndex() const {
  return qasmParser::RuleNonArrayType;
}

void qasmParser::NonArrayTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNonArrayType(this);
}

void qasmParser::NonArrayTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNonArrayType(this);
}


std::any qasmParser::NonArrayTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitNonArrayType(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::NonArrayTypeContext* qasmParser::nonArrayType() {
  NonArrayTypeContext *_localctx = _tracker.createInstance<NonArrayTypeContext>(_ctx, getState());
  enterRule(_localctx, 42, qasmParser::RuleNonArrayType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(370);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case qasmParser::T__8:
      case qasmParser::T__9:
      case qasmParser::T__10:
      case qasmParser::T__11: {
        enterOuterAlt(_localctx, 1);
        setState(357);
        singleDesignatorType();
        setState(358);
        designator();
        break;
      }

      case qasmParser::T__12:
      case qasmParser::T__90:
      case qasmParser::T__91: {
        enterOuterAlt(_localctx, 2);
        setState(360);
        noDesignatorType();
        break;
      }

      case qasmParser::T__6:
      case qasmParser::T__7: {
        enterOuterAlt(_localctx, 3);
        setState(361);
        bitType();
        setState(363);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == qasmParser::LBRACKET) {
          setState(362);
          designator();
        }
        break;
      }

      case qasmParser::COMPLEX: {
        enterOuterAlt(_localctx, 4);
        setState(365);
        match(qasmParser::COMPLEX);
        setState(366);
        match(qasmParser::LBRACKET);
        setState(367);
        numericType();
        setState(368);
        match(qasmParser::RBRACKET);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayTypeContext ------------------------------------------------------------------

qasmParser::ArrayTypeContext::ArrayTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* qasmParser::ArrayTypeContext::ARRAY() {
  return getToken(qasmParser::ARRAY, 0);
}

tree::TerminalNode* qasmParser::ArrayTypeContext::LBRACKET() {
  return getToken(qasmParser::LBRACKET, 0);
}

qasmParser::NonArrayTypeContext* qasmParser::ArrayTypeContext::nonArrayType() {
  return getRuleContext<qasmParser::NonArrayTypeContext>(0);
}

tree::TerminalNode* qasmParser::ArrayTypeContext::COMMA() {
  return getToken(qasmParser::COMMA, 0);
}

qasmParser::ExpressionListContext* qasmParser::ArrayTypeContext::expressionList() {
  return getRuleContext<qasmParser::ExpressionListContext>(0);
}

tree::TerminalNode* qasmParser::ArrayTypeContext::RBRACKET() {
  return getToken(qasmParser::RBRACKET, 0);
}


size_t qasmParser::ArrayTypeContext::getRuleIndex() const {
  return qasmParser::RuleArrayType;
}

void qasmParser::ArrayTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrayType(this);
}

void qasmParser::ArrayTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrayType(this);
}


std::any qasmParser::ArrayTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitArrayType(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::ArrayTypeContext* qasmParser::arrayType() {
  ArrayTypeContext *_localctx = _tracker.createInstance<ArrayTypeContext>(_ctx, getState());
  enterRule(_localctx, 44, qasmParser::RuleArrayType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(372);
    match(qasmParser::ARRAY);
    setState(373);
    match(qasmParser::LBRACKET);
    setState(374);
    nonArrayType();
    setState(375);
    match(qasmParser::COMMA);
    setState(376);
    expressionList();
    setState(377);
    match(qasmParser::RBRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayReferenceTypeDimensionSpecifierContext ------------------------------------------------------------------

qasmParser::ArrayReferenceTypeDimensionSpecifierContext::ArrayReferenceTypeDimensionSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

qasmParser::ExpressionListContext* qasmParser::ArrayReferenceTypeDimensionSpecifierContext::expressionList() {
  return getRuleContext<qasmParser::ExpressionListContext>(0);
}

tree::TerminalNode* qasmParser::ArrayReferenceTypeDimensionSpecifierContext::DIM() {
  return getToken(qasmParser::DIM, 0);
}

tree::TerminalNode* qasmParser::ArrayReferenceTypeDimensionSpecifierContext::EQUALS() {
  return getToken(qasmParser::EQUALS, 0);
}

qasmParser::ExpressionContext* qasmParser::ArrayReferenceTypeDimensionSpecifierContext::expression() {
  return getRuleContext<qasmParser::ExpressionContext>(0);
}


size_t qasmParser::ArrayReferenceTypeDimensionSpecifierContext::getRuleIndex() const {
  return qasmParser::RuleArrayReferenceTypeDimensionSpecifier;
}

void qasmParser::ArrayReferenceTypeDimensionSpecifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrayReferenceTypeDimensionSpecifier(this);
}

void qasmParser::ArrayReferenceTypeDimensionSpecifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrayReferenceTypeDimensionSpecifier(this);
}


std::any qasmParser::ArrayReferenceTypeDimensionSpecifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitArrayReferenceTypeDimensionSpecifier(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::ArrayReferenceTypeDimensionSpecifierContext* qasmParser::arrayReferenceTypeDimensionSpecifier() {
  ArrayReferenceTypeDimensionSpecifierContext *_localctx = _tracker.createInstance<ArrayReferenceTypeDimensionSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 46, qasmParser::RuleArrayReferenceTypeDimensionSpecifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(383);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case qasmParser::T__6:
      case qasmParser::T__7:
      case qasmParser::T__8:
      case qasmParser::T__9:
      case qasmParser::T__10:
      case qasmParser::T__11:
      case qasmParser::T__12:
      case qasmParser::T__36:
      case qasmParser::T__37:
      case qasmParser::T__52:
      case qasmParser::T__53:
      case qasmParser::T__54:
      case qasmParser::T__55:
      case qasmParser::T__56:
      case qasmParser::T__57:
      case qasmParser::T__58:
      case qasmParser::T__59:
      case qasmParser::T__60:
      case qasmParser::T__61:
      case qasmParser::T__62:
      case qasmParser::T__63:
      case qasmParser::T__64:
      case qasmParser::T__65:
      case qasmParser::T__90:
      case qasmParser::T__91:
      case qasmParser::T__93:
      case qasmParser::LPAREN:
      case qasmParser::MINUS:
      case qasmParser::ImagNumber:
      case qasmParser::COMPLEX:
      case qasmParser::ARRAY:
      case qasmParser::SIZEOF:
      case qasmParser::Constant:
      case qasmParser::Integer:
      case qasmParser::Identifier:
      case qasmParser::RealNumber:
      case qasmParser::TimingLiteral:
      case qasmParser::StringLiteral: {
        setState(379);
        expressionList();
        break;
      }

      case qasmParser::DIM: {
        setState(380);
        match(qasmParser::DIM);
        setState(381);
        match(qasmParser::EQUALS);
        setState(382);
        expression(0);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayReferenceTypeContext ------------------------------------------------------------------

qasmParser::ArrayReferenceTypeContext::ArrayReferenceTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* qasmParser::ArrayReferenceTypeContext::ARRAY() {
  return getToken(qasmParser::ARRAY, 0);
}

tree::TerminalNode* qasmParser::ArrayReferenceTypeContext::LBRACKET() {
  return getToken(qasmParser::LBRACKET, 0);
}

qasmParser::NonArrayTypeContext* qasmParser::ArrayReferenceTypeContext::nonArrayType() {
  return getRuleContext<qasmParser::NonArrayTypeContext>(0);
}

tree::TerminalNode* qasmParser::ArrayReferenceTypeContext::COMMA() {
  return getToken(qasmParser::COMMA, 0);
}

qasmParser::ArrayReferenceTypeDimensionSpecifierContext* qasmParser::ArrayReferenceTypeContext::arrayReferenceTypeDimensionSpecifier() {
  return getRuleContext<qasmParser::ArrayReferenceTypeDimensionSpecifierContext>(0);
}

tree::TerminalNode* qasmParser::ArrayReferenceTypeContext::RBRACKET() {
  return getToken(qasmParser::RBRACKET, 0);
}


size_t qasmParser::ArrayReferenceTypeContext::getRuleIndex() const {
  return qasmParser::RuleArrayReferenceType;
}

void qasmParser::ArrayReferenceTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrayReferenceType(this);
}

void qasmParser::ArrayReferenceTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrayReferenceType(this);
}


std::any qasmParser::ArrayReferenceTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitArrayReferenceType(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::ArrayReferenceTypeContext* qasmParser::arrayReferenceType() {
  ArrayReferenceTypeContext *_localctx = _tracker.createInstance<ArrayReferenceTypeContext>(_ctx, getState());
  enterRule(_localctx, 48, qasmParser::RuleArrayReferenceType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(385);
    match(qasmParser::ARRAY);
    setState(386);
    match(qasmParser::LBRACKET);
    setState(387);
    nonArrayType();
    setState(388);
    match(qasmParser::COMMA);
    setState(389);
    arrayReferenceTypeDimensionSpecifier();
    setState(390);
    match(qasmParser::RBRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassicalTypeContext ------------------------------------------------------------------

qasmParser::ClassicalTypeContext::ClassicalTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

qasmParser::NonArrayTypeContext* qasmParser::ClassicalTypeContext::nonArrayType() {
  return getRuleContext<qasmParser::NonArrayTypeContext>(0);
}

qasmParser::ArrayTypeContext* qasmParser::ClassicalTypeContext::arrayType() {
  return getRuleContext<qasmParser::ArrayTypeContext>(0);
}


size_t qasmParser::ClassicalTypeContext::getRuleIndex() const {
  return qasmParser::RuleClassicalType;
}

void qasmParser::ClassicalTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassicalType(this);
}

void qasmParser::ClassicalTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassicalType(this);
}


std::any qasmParser::ClassicalTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitClassicalType(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::ClassicalTypeContext* qasmParser::classicalType() {
  ClassicalTypeContext *_localctx = _tracker.createInstance<ClassicalTypeContext>(_ctx, getState());
  enterRule(_localctx, 50, qasmParser::RuleClassicalType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(394);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case qasmParser::T__6:
      case qasmParser::T__7:
      case qasmParser::T__8:
      case qasmParser::T__9:
      case qasmParser::T__10:
      case qasmParser::T__11:
      case qasmParser::T__12:
      case qasmParser::T__90:
      case qasmParser::T__91:
      case qasmParser::COMPLEX: {
        enterOuterAlt(_localctx, 1);
        setState(392);
        nonArrayType();
        break;
      }

      case qasmParser::ARRAY: {
        enterOuterAlt(_localctx, 2);
        setState(393);
        arrayType();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NumericTypeContext ------------------------------------------------------------------

qasmParser::NumericTypeContext::NumericTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

qasmParser::SingleDesignatorTypeContext* qasmParser::NumericTypeContext::singleDesignatorType() {
  return getRuleContext<qasmParser::SingleDesignatorTypeContext>(0);
}

qasmParser::DesignatorContext* qasmParser::NumericTypeContext::designator() {
  return getRuleContext<qasmParser::DesignatorContext>(0);
}


size_t qasmParser::NumericTypeContext::getRuleIndex() const {
  return qasmParser::RuleNumericType;
}

void qasmParser::NumericTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNumericType(this);
}

void qasmParser::NumericTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNumericType(this);
}


std::any qasmParser::NumericTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitNumericType(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::NumericTypeContext* qasmParser::numericType() {
  NumericTypeContext *_localctx = _tracker.createInstance<NumericTypeContext>(_ctx, getState());
  enterRule(_localctx, 52, qasmParser::RuleNumericType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(396);
    singleDesignatorType();
    setState(397);
    designator();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstantDeclarationContext ------------------------------------------------------------------

qasmParser::ConstantDeclarationContext::ConstantDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* qasmParser::ConstantDeclarationContext::CONST() {
  return getToken(qasmParser::CONST, 0);
}

qasmParser::ClassicalTypeContext* qasmParser::ConstantDeclarationContext::classicalType() {
  return getRuleContext<qasmParser::ClassicalTypeContext>(0);
}

tree::TerminalNode* qasmParser::ConstantDeclarationContext::Identifier() {
  return getToken(qasmParser::Identifier, 0);
}

qasmParser::EqualsExpressionContext* qasmParser::ConstantDeclarationContext::equalsExpression() {
  return getRuleContext<qasmParser::EqualsExpressionContext>(0);
}


size_t qasmParser::ConstantDeclarationContext::getRuleIndex() const {
  return qasmParser::RuleConstantDeclaration;
}

void qasmParser::ConstantDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstantDeclaration(this);
}

void qasmParser::ConstantDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstantDeclaration(this);
}


std::any qasmParser::ConstantDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitConstantDeclaration(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::ConstantDeclarationContext* qasmParser::constantDeclaration() {
  ConstantDeclarationContext *_localctx = _tracker.createInstance<ConstantDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 54, qasmParser::RuleConstantDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(399);
    match(qasmParser::CONST);
    setState(400);
    classicalType();
    setState(401);
    match(qasmParser::Identifier);
    setState(402);
    equalsExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SingleDesignatorDeclarationContext ------------------------------------------------------------------

qasmParser::SingleDesignatorDeclarationContext::SingleDesignatorDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

qasmParser::SingleDesignatorTypeContext* qasmParser::SingleDesignatorDeclarationContext::singleDesignatorType() {
  return getRuleContext<qasmParser::SingleDesignatorTypeContext>(0);
}

qasmParser::DesignatorContext* qasmParser::SingleDesignatorDeclarationContext::designator() {
  return getRuleContext<qasmParser::DesignatorContext>(0);
}

tree::TerminalNode* qasmParser::SingleDesignatorDeclarationContext::Identifier() {
  return getToken(qasmParser::Identifier, 0);
}

qasmParser::EqualsExpressionContext* qasmParser::SingleDesignatorDeclarationContext::equalsExpression() {
  return getRuleContext<qasmParser::EqualsExpressionContext>(0);
}


size_t qasmParser::SingleDesignatorDeclarationContext::getRuleIndex() const {
  return qasmParser::RuleSingleDesignatorDeclaration;
}

void qasmParser::SingleDesignatorDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSingleDesignatorDeclaration(this);
}

void qasmParser::SingleDesignatorDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSingleDesignatorDeclaration(this);
}


std::any qasmParser::SingleDesignatorDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitSingleDesignatorDeclaration(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::SingleDesignatorDeclarationContext* qasmParser::singleDesignatorDeclaration() {
  SingleDesignatorDeclarationContext *_localctx = _tracker.createInstance<SingleDesignatorDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 56, qasmParser::RuleSingleDesignatorDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(404);
    singleDesignatorType();
    setState(405);
    designator();
    setState(406);
    match(qasmParser::Identifier);
    setState(408);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == qasmParser::EQUALS) {
      setState(407);
      equalsExpression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NoDesignatorDeclarationContext ------------------------------------------------------------------

qasmParser::NoDesignatorDeclarationContext::NoDesignatorDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

qasmParser::NoDesignatorTypeContext* qasmParser::NoDesignatorDeclarationContext::noDesignatorType() {
  return getRuleContext<qasmParser::NoDesignatorTypeContext>(0);
}

tree::TerminalNode* qasmParser::NoDesignatorDeclarationContext::Identifier() {
  return getToken(qasmParser::Identifier, 0);
}

qasmParser::EqualsExpressionContext* qasmParser::NoDesignatorDeclarationContext::equalsExpression() {
  return getRuleContext<qasmParser::EqualsExpressionContext>(0);
}


size_t qasmParser::NoDesignatorDeclarationContext::getRuleIndex() const {
  return qasmParser::RuleNoDesignatorDeclaration;
}

void qasmParser::NoDesignatorDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNoDesignatorDeclaration(this);
}

void qasmParser::NoDesignatorDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNoDesignatorDeclaration(this);
}


std::any qasmParser::NoDesignatorDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitNoDesignatorDeclaration(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::NoDesignatorDeclarationContext* qasmParser::noDesignatorDeclaration() {
  NoDesignatorDeclarationContext *_localctx = _tracker.createInstance<NoDesignatorDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 58, qasmParser::RuleNoDesignatorDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(410);
    noDesignatorType();
    setState(411);
    match(qasmParser::Identifier);
    setState(413);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == qasmParser::EQUALS) {
      setState(412);
      equalsExpression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BitDeclarationContext ------------------------------------------------------------------

qasmParser::BitDeclarationContext::BitDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* qasmParser::BitDeclarationContext::Identifier() {
  return getToken(qasmParser::Identifier, 0);
}

qasmParser::EqualsExpressionContext* qasmParser::BitDeclarationContext::equalsExpression() {
  return getRuleContext<qasmParser::EqualsExpressionContext>(0);
}

qasmParser::DesignatorContext* qasmParser::BitDeclarationContext::designator() {
  return getRuleContext<qasmParser::DesignatorContext>(0);
}


size_t qasmParser::BitDeclarationContext::getRuleIndex() const {
  return qasmParser::RuleBitDeclaration;
}

void qasmParser::BitDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBitDeclaration(this);
}

void qasmParser::BitDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBitDeclaration(this);
}


std::any qasmParser::BitDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitBitDeclaration(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::BitDeclarationContext* qasmParser::bitDeclaration() {
  BitDeclarationContext *_localctx = _tracker.createInstance<BitDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 60, qasmParser::RuleBitDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(425);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case qasmParser::T__7: {
        setState(415);
        match(qasmParser::T__7);
        setState(416);
        match(qasmParser::Identifier);
        setState(418);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == qasmParser::LBRACKET) {
          setState(417);
          designator();
        }
        break;
      }

      case qasmParser::T__6: {
        setState(420);
        match(qasmParser::T__6);
        setState(422);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == qasmParser::LBRACKET) {
          setState(421);
          designator();
        }
        setState(424);
        match(qasmParser::Identifier);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(428);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == qasmParser::EQUALS) {
      setState(427);
      equalsExpression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ComplexDeclarationContext ------------------------------------------------------------------

qasmParser::ComplexDeclarationContext::ComplexDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* qasmParser::ComplexDeclarationContext::COMPLEX() {
  return getToken(qasmParser::COMPLEX, 0);
}

tree::TerminalNode* qasmParser::ComplexDeclarationContext::LBRACKET() {
  return getToken(qasmParser::LBRACKET, 0);
}

qasmParser::NumericTypeContext* qasmParser::ComplexDeclarationContext::numericType() {
  return getRuleContext<qasmParser::NumericTypeContext>(0);
}

tree::TerminalNode* qasmParser::ComplexDeclarationContext::RBRACKET() {
  return getToken(qasmParser::RBRACKET, 0);
}

tree::TerminalNode* qasmParser::ComplexDeclarationContext::Identifier() {
  return getToken(qasmParser::Identifier, 0);
}

qasmParser::EqualsExpressionContext* qasmParser::ComplexDeclarationContext::equalsExpression() {
  return getRuleContext<qasmParser::EqualsExpressionContext>(0);
}


size_t qasmParser::ComplexDeclarationContext::getRuleIndex() const {
  return qasmParser::RuleComplexDeclaration;
}

void qasmParser::ComplexDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComplexDeclaration(this);
}

void qasmParser::ComplexDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComplexDeclaration(this);
}


std::any qasmParser::ComplexDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitComplexDeclaration(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::ComplexDeclarationContext* qasmParser::complexDeclaration() {
  ComplexDeclarationContext *_localctx = _tracker.createInstance<ComplexDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 62, qasmParser::RuleComplexDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(430);
    match(qasmParser::COMPLEX);
    setState(431);
    match(qasmParser::LBRACKET);
    setState(432);
    numericType();
    setState(433);
    match(qasmParser::RBRACKET);
    setState(434);
    match(qasmParser::Identifier);
    setState(436);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == qasmParser::EQUALS) {
      setState(435);
      equalsExpression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayInitializerContext ------------------------------------------------------------------

qasmParser::ArrayInitializerContext::ArrayInitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* qasmParser::ArrayInitializerContext::LBRACE() {
  return getToken(qasmParser::LBRACE, 0);
}

tree::TerminalNode* qasmParser::ArrayInitializerContext::RBRACE() {
  return getToken(qasmParser::RBRACE, 0);
}

std::vector<qasmParser::ExpressionContext *> qasmParser::ArrayInitializerContext::expression() {
  return getRuleContexts<qasmParser::ExpressionContext>();
}

qasmParser::ExpressionContext* qasmParser::ArrayInitializerContext::expression(size_t i) {
  return getRuleContext<qasmParser::ExpressionContext>(i);
}

std::vector<qasmParser::ArrayInitializerContext *> qasmParser::ArrayInitializerContext::arrayInitializer() {
  return getRuleContexts<qasmParser::ArrayInitializerContext>();
}

qasmParser::ArrayInitializerContext* qasmParser::ArrayInitializerContext::arrayInitializer(size_t i) {
  return getRuleContext<qasmParser::ArrayInitializerContext>(i);
}

std::vector<tree::TerminalNode *> qasmParser::ArrayInitializerContext::COMMA() {
  return getTokens(qasmParser::COMMA);
}

tree::TerminalNode* qasmParser::ArrayInitializerContext::COMMA(size_t i) {
  return getToken(qasmParser::COMMA, i);
}


size_t qasmParser::ArrayInitializerContext::getRuleIndex() const {
  return qasmParser::RuleArrayInitializer;
}

void qasmParser::ArrayInitializerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrayInitializer(this);
}

void qasmParser::ArrayInitializerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrayInitializer(this);
}


std::any qasmParser::ArrayInitializerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitArrayInitializer(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::ArrayInitializerContext* qasmParser::arrayInitializer() {
  ArrayInitializerContext *_localctx = _tracker.createInstance<ArrayInitializerContext>(_ctx, getState());
  enterRule(_localctx, 64, qasmParser::RuleArrayInitializer);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(438);
    match(qasmParser::LBRACE);

    setState(441);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case qasmParser::T__6:
      case qasmParser::T__7:
      case qasmParser::T__8:
      case qasmParser::T__9:
      case qasmParser::T__10:
      case qasmParser::T__11:
      case qasmParser::T__12:
      case qasmParser::T__36:
      case qasmParser::T__37:
      case qasmParser::T__52:
      case qasmParser::T__53:
      case qasmParser::T__54:
      case qasmParser::T__55:
      case qasmParser::T__56:
      case qasmParser::T__57:
      case qasmParser::T__58:
      case qasmParser::T__59:
      case qasmParser::T__60:
      case qasmParser::T__61:
      case qasmParser::T__62:
      case qasmParser::T__63:
      case qasmParser::T__64:
      case qasmParser::T__65:
      case qasmParser::T__90:
      case qasmParser::T__91:
      case qasmParser::T__93:
      case qasmParser::LPAREN:
      case qasmParser::MINUS:
      case qasmParser::ImagNumber:
      case qasmParser::COMPLEX:
      case qasmParser::ARRAY:
      case qasmParser::SIZEOF:
      case qasmParser::Constant:
      case qasmParser::Integer:
      case qasmParser::Identifier:
      case qasmParser::RealNumber:
      case qasmParser::TimingLiteral:
      case qasmParser::StringLiteral: {
        setState(439);
        expression(0);
        break;
      }

      case qasmParser::LBRACE: {
        setState(440);
        arrayInitializer();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(450);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == qasmParser::COMMA) {
      setState(443);
      match(qasmParser::COMMA);
      setState(446);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case qasmParser::T__6:
        case qasmParser::T__7:
        case qasmParser::T__8:
        case qasmParser::T__9:
        case qasmParser::T__10:
        case qasmParser::T__11:
        case qasmParser::T__12:
        case qasmParser::T__36:
        case qasmParser::T__37:
        case qasmParser::T__52:
        case qasmParser::T__53:
        case qasmParser::T__54:
        case qasmParser::T__55:
        case qasmParser::T__56:
        case qasmParser::T__57:
        case qasmParser::T__58:
        case qasmParser::T__59:
        case qasmParser::T__60:
        case qasmParser::T__61:
        case qasmParser::T__62:
        case qasmParser::T__63:
        case qasmParser::T__64:
        case qasmParser::T__65:
        case qasmParser::T__90:
        case qasmParser::T__91:
        case qasmParser::T__93:
        case qasmParser::LPAREN:
        case qasmParser::MINUS:
        case qasmParser::ImagNumber:
        case qasmParser::COMPLEX:
        case qasmParser::ARRAY:
        case qasmParser::SIZEOF:
        case qasmParser::Constant:
        case qasmParser::Integer:
        case qasmParser::Identifier:
        case qasmParser::RealNumber:
        case qasmParser::TimingLiteral:
        case qasmParser::StringLiteral: {
          setState(444);
          expression(0);
          break;
        }

        case qasmParser::LBRACE: {
          setState(445);
          arrayInitializer();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(452);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(453);
    match(qasmParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayDeclarationContext ------------------------------------------------------------------

qasmParser::ArrayDeclarationContext::ArrayDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

qasmParser::ArrayTypeContext* qasmParser::ArrayDeclarationContext::arrayType() {
  return getRuleContext<qasmParser::ArrayTypeContext>(0);
}

tree::TerminalNode* qasmParser::ArrayDeclarationContext::Identifier() {
  return getToken(qasmParser::Identifier, 0);
}

tree::TerminalNode* qasmParser::ArrayDeclarationContext::EQUALS() {
  return getToken(qasmParser::EQUALS, 0);
}

qasmParser::ArrayInitializerContext* qasmParser::ArrayDeclarationContext::arrayInitializer() {
  return getRuleContext<qasmParser::ArrayInitializerContext>(0);
}

qasmParser::ExpressionContext* qasmParser::ArrayDeclarationContext::expression() {
  return getRuleContext<qasmParser::ExpressionContext>(0);
}


size_t qasmParser::ArrayDeclarationContext::getRuleIndex() const {
  return qasmParser::RuleArrayDeclaration;
}

void qasmParser::ArrayDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrayDeclaration(this);
}

void qasmParser::ArrayDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrayDeclaration(this);
}


std::any qasmParser::ArrayDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitArrayDeclaration(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::ArrayDeclarationContext* qasmParser::arrayDeclaration() {
  ArrayDeclarationContext *_localctx = _tracker.createInstance<ArrayDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 66, qasmParser::RuleArrayDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(455);
    arrayType();
    setState(456);
    match(qasmParser::Identifier);
    setState(462);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == qasmParser::EQUALS) {
      setState(457);
      match(qasmParser::EQUALS);
      setState(460);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case qasmParser::LBRACE: {
          setState(458);
          arrayInitializer();
          break;
        }

        case qasmParser::T__6:
        case qasmParser::T__7:
        case qasmParser::T__8:
        case qasmParser::T__9:
        case qasmParser::T__10:
        case qasmParser::T__11:
        case qasmParser::T__12:
        case qasmParser::T__36:
        case qasmParser::T__37:
        case qasmParser::T__52:
        case qasmParser::T__53:
        case qasmParser::T__54:
        case qasmParser::T__55:
        case qasmParser::T__56:
        case qasmParser::T__57:
        case qasmParser::T__58:
        case qasmParser::T__59:
        case qasmParser::T__60:
        case qasmParser::T__61:
        case qasmParser::T__62:
        case qasmParser::T__63:
        case qasmParser::T__64:
        case qasmParser::T__65:
        case qasmParser::T__90:
        case qasmParser::T__91:
        case qasmParser::T__93:
        case qasmParser::LPAREN:
        case qasmParser::MINUS:
        case qasmParser::ImagNumber:
        case qasmParser::COMPLEX:
        case qasmParser::ARRAY:
        case qasmParser::SIZEOF:
        case qasmParser::Constant:
        case qasmParser::Integer:
        case qasmParser::Identifier:
        case qasmParser::RealNumber:
        case qasmParser::TimingLiteral:
        case qasmParser::StringLiteral: {
          setState(459);
          expression(0);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassicalDeclarationContext ------------------------------------------------------------------

qasmParser::ClassicalDeclarationContext::ClassicalDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

qasmParser::SingleDesignatorDeclarationContext* qasmParser::ClassicalDeclarationContext::singleDesignatorDeclaration() {
  return getRuleContext<qasmParser::SingleDesignatorDeclarationContext>(0);
}

qasmParser::NoDesignatorDeclarationContext* qasmParser::ClassicalDeclarationContext::noDesignatorDeclaration() {
  return getRuleContext<qasmParser::NoDesignatorDeclarationContext>(0);
}

qasmParser::BitDeclarationContext* qasmParser::ClassicalDeclarationContext::bitDeclaration() {
  return getRuleContext<qasmParser::BitDeclarationContext>(0);
}

qasmParser::ComplexDeclarationContext* qasmParser::ClassicalDeclarationContext::complexDeclaration() {
  return getRuleContext<qasmParser::ComplexDeclarationContext>(0);
}

qasmParser::ArrayDeclarationContext* qasmParser::ClassicalDeclarationContext::arrayDeclaration() {
  return getRuleContext<qasmParser::ArrayDeclarationContext>(0);
}


size_t qasmParser::ClassicalDeclarationContext::getRuleIndex() const {
  return qasmParser::RuleClassicalDeclaration;
}

void qasmParser::ClassicalDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassicalDeclaration(this);
}

void qasmParser::ClassicalDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassicalDeclaration(this);
}


std::any qasmParser::ClassicalDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitClassicalDeclaration(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::ClassicalDeclarationContext* qasmParser::classicalDeclaration() {
  ClassicalDeclarationContext *_localctx = _tracker.createInstance<ClassicalDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 68, qasmParser::RuleClassicalDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(469);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case qasmParser::T__8:
      case qasmParser::T__9:
      case qasmParser::T__10:
      case qasmParser::T__11: {
        enterOuterAlt(_localctx, 1);
        setState(464);
        singleDesignatorDeclaration();
        break;
      }

      case qasmParser::T__12:
      case qasmParser::T__90:
      case qasmParser::T__91: {
        enterOuterAlt(_localctx, 2);
        setState(465);
        noDesignatorDeclaration();
        break;
      }

      case qasmParser::T__6:
      case qasmParser::T__7: {
        enterOuterAlt(_localctx, 3);
        setState(466);
        bitDeclaration();
        break;
      }

      case qasmParser::COMPLEX: {
        enterOuterAlt(_localctx, 4);
        setState(467);
        complexDeclaration();
        break;
      }

      case qasmParser::ARRAY: {
        enterOuterAlt(_localctx, 5);
        setState(468);
        arrayDeclaration();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassicalTypeListContext ------------------------------------------------------------------

qasmParser::ClassicalTypeListContext::ClassicalTypeListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<qasmParser::ClassicalTypeContext *> qasmParser::ClassicalTypeListContext::classicalType() {
  return getRuleContexts<qasmParser::ClassicalTypeContext>();
}

qasmParser::ClassicalTypeContext* qasmParser::ClassicalTypeListContext::classicalType(size_t i) {
  return getRuleContext<qasmParser::ClassicalTypeContext>(i);
}

std::vector<tree::TerminalNode *> qasmParser::ClassicalTypeListContext::COMMA() {
  return getTokens(qasmParser::COMMA);
}

tree::TerminalNode* qasmParser::ClassicalTypeListContext::COMMA(size_t i) {
  return getToken(qasmParser::COMMA, i);
}


size_t qasmParser::ClassicalTypeListContext::getRuleIndex() const {
  return qasmParser::RuleClassicalTypeList;
}

void qasmParser::ClassicalTypeListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassicalTypeList(this);
}

void qasmParser::ClassicalTypeListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassicalTypeList(this);
}


std::any qasmParser::ClassicalTypeListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitClassicalTypeList(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::ClassicalTypeListContext* qasmParser::classicalTypeList() {
  ClassicalTypeListContext *_localctx = _tracker.createInstance<ClassicalTypeListContext>(_ctx, getState());
  enterRule(_localctx, 70, qasmParser::RuleClassicalTypeList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(476);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 35, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(471);
        classicalType();
        setState(472);
        match(qasmParser::COMMA); 
      }
      setState(478);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 35, _ctx);
    }
    setState(479);
    classicalType();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassicalArgumentContext ------------------------------------------------------------------

qasmParser::ClassicalArgumentContext::ClassicalArgumentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* qasmParser::ClassicalArgumentContext::Identifier() {
  return getToken(qasmParser::Identifier, 0);
}

qasmParser::SingleDesignatorTypeContext* qasmParser::ClassicalArgumentContext::singleDesignatorType() {
  return getRuleContext<qasmParser::SingleDesignatorTypeContext>(0);
}

qasmParser::DesignatorContext* qasmParser::ClassicalArgumentContext::designator() {
  return getRuleContext<qasmParser::DesignatorContext>(0);
}

qasmParser::NoDesignatorTypeContext* qasmParser::ClassicalArgumentContext::noDesignatorType() {
  return getRuleContext<qasmParser::NoDesignatorTypeContext>(0);
}

tree::TerminalNode* qasmParser::ClassicalArgumentContext::COMPLEX() {
  return getToken(qasmParser::COMPLEX, 0);
}

tree::TerminalNode* qasmParser::ClassicalArgumentContext::LBRACKET() {
  return getToken(qasmParser::LBRACKET, 0);
}

qasmParser::NumericTypeContext* qasmParser::ClassicalArgumentContext::numericType() {
  return getRuleContext<qasmParser::NumericTypeContext>(0);
}

tree::TerminalNode* qasmParser::ClassicalArgumentContext::RBRACKET() {
  return getToken(qasmParser::RBRACKET, 0);
}

qasmParser::ArrayReferenceTypeContext* qasmParser::ClassicalArgumentContext::arrayReferenceType() {
  return getRuleContext<qasmParser::ArrayReferenceTypeContext>(0);
}

tree::TerminalNode* qasmParser::ClassicalArgumentContext::CONST() {
  return getToken(qasmParser::CONST, 0);
}

tree::TerminalNode* qasmParser::ClassicalArgumentContext::MUTABLE() {
  return getToken(qasmParser::MUTABLE, 0);
}


size_t qasmParser::ClassicalArgumentContext::getRuleIndex() const {
  return qasmParser::RuleClassicalArgument;
}

void qasmParser::ClassicalArgumentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassicalArgument(this);
}

void qasmParser::ClassicalArgumentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassicalArgument(this);
}


std::any qasmParser::ClassicalArgumentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitClassicalArgument(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::ClassicalArgumentContext* qasmParser::classicalArgument() {
  ClassicalArgumentContext *_localctx = _tracker.createInstance<ClassicalArgumentContext>(_ctx, getState());
  enterRule(_localctx, 72, qasmParser::RuleClassicalArgument);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(509);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case qasmParser::T__8:
      case qasmParser::T__9:
      case qasmParser::T__10:
      case qasmParser::T__11:
      case qasmParser::T__12:
      case qasmParser::T__90:
      case qasmParser::T__91: {
        enterOuterAlt(_localctx, 1);
        setState(485);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case qasmParser::T__8:
          case qasmParser::T__9:
          case qasmParser::T__10:
          case qasmParser::T__11: {
            setState(481);
            singleDesignatorType();
            setState(482);
            designator();
            break;
          }

          case qasmParser::T__12:
          case qasmParser::T__90:
          case qasmParser::T__91: {
            setState(484);
            noDesignatorType();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(487);
        match(qasmParser::Identifier);
        break;
      }

      case qasmParser::T__7: {
        enterOuterAlt(_localctx, 2);
        setState(489);
        match(qasmParser::T__7);
        setState(490);
        match(qasmParser::Identifier);
        setState(492);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == qasmParser::LBRACKET) {
          setState(491);
          designator();
        }
        break;
      }

      case qasmParser::T__6: {
        enterOuterAlt(_localctx, 3);
        setState(494);
        match(qasmParser::T__6);
        setState(496);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == qasmParser::LBRACKET) {
          setState(495);
          designator();
        }
        setState(498);
        match(qasmParser::Identifier);
        break;
      }

      case qasmParser::COMPLEX: {
        enterOuterAlt(_localctx, 4);
        setState(499);
        match(qasmParser::COMPLEX);
        setState(500);
        match(qasmParser::LBRACKET);
        setState(501);
        numericType();
        setState(502);
        match(qasmParser::RBRACKET);
        setState(503);
        match(qasmParser::Identifier);
        break;
      }

      case qasmParser::CONST:
      case qasmParser::MUTABLE: {
        enterOuterAlt(_localctx, 5);
        setState(505);
        _la = _input->LA(1);
        if (!(_la == qasmParser::CONST

        || _la == qasmParser::MUTABLE)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(506);
        arrayReferenceType();
        setState(507);
        match(qasmParser::Identifier);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassicalArgumentListContext ------------------------------------------------------------------

qasmParser::ClassicalArgumentListContext::ClassicalArgumentListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<qasmParser::ClassicalArgumentContext *> qasmParser::ClassicalArgumentListContext::classicalArgument() {
  return getRuleContexts<qasmParser::ClassicalArgumentContext>();
}

qasmParser::ClassicalArgumentContext* qasmParser::ClassicalArgumentListContext::classicalArgument(size_t i) {
  return getRuleContext<qasmParser::ClassicalArgumentContext>(i);
}

std::vector<tree::TerminalNode *> qasmParser::ClassicalArgumentListContext::COMMA() {
  return getTokens(qasmParser::COMMA);
}

tree::TerminalNode* qasmParser::ClassicalArgumentListContext::COMMA(size_t i) {
  return getToken(qasmParser::COMMA, i);
}


size_t qasmParser::ClassicalArgumentListContext::getRuleIndex() const {
  return qasmParser::RuleClassicalArgumentList;
}

void qasmParser::ClassicalArgumentListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassicalArgumentList(this);
}

void qasmParser::ClassicalArgumentListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassicalArgumentList(this);
}


std::any qasmParser::ClassicalArgumentListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitClassicalArgumentList(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::ClassicalArgumentListContext* qasmParser::classicalArgumentList() {
  ClassicalArgumentListContext *_localctx = _tracker.createInstance<ClassicalArgumentListContext>(_ctx, getState());
  enterRule(_localctx, 74, qasmParser::RuleClassicalArgumentList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(511);
    classicalArgument();
    setState(516);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == qasmParser::COMMA) {
      setState(512);
      match(qasmParser::COMMA);
      setState(513);
      classicalArgument();
      setState(518);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnyTypeArgumentContext ------------------------------------------------------------------

qasmParser::AnyTypeArgumentContext::AnyTypeArgumentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

qasmParser::ClassicalArgumentContext* qasmParser::AnyTypeArgumentContext::classicalArgument() {
  return getRuleContext<qasmParser::ClassicalArgumentContext>(0);
}

qasmParser::QuantumArgumentContext* qasmParser::AnyTypeArgumentContext::quantumArgument() {
  return getRuleContext<qasmParser::QuantumArgumentContext>(0);
}


size_t qasmParser::AnyTypeArgumentContext::getRuleIndex() const {
  return qasmParser::RuleAnyTypeArgument;
}

void qasmParser::AnyTypeArgumentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnyTypeArgument(this);
}

void qasmParser::AnyTypeArgumentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnyTypeArgument(this);
}


std::any qasmParser::AnyTypeArgumentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitAnyTypeArgument(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::AnyTypeArgumentContext* qasmParser::anyTypeArgument() {
  AnyTypeArgumentContext *_localctx = _tracker.createInstance<AnyTypeArgumentContext>(_ctx, getState());
  enterRule(_localctx, 76, qasmParser::RuleAnyTypeArgument);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(521);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case qasmParser::T__6:
      case qasmParser::T__7:
      case qasmParser::T__8:
      case qasmParser::T__9:
      case qasmParser::T__10:
      case qasmParser::T__11:
      case qasmParser::T__12:
      case qasmParser::T__90:
      case qasmParser::T__91:
      case qasmParser::COMPLEX:
      case qasmParser::CONST:
      case qasmParser::MUTABLE: {
        enterOuterAlt(_localctx, 1);
        setState(519);
        classicalArgument();
        break;
      }

      case qasmParser::T__4:
      case qasmParser::T__5: {
        enterOuterAlt(_localctx, 2);
        setState(520);
        quantumArgument();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnyTypeArgumentListContext ------------------------------------------------------------------

qasmParser::AnyTypeArgumentListContext::AnyTypeArgumentListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<qasmParser::AnyTypeArgumentContext *> qasmParser::AnyTypeArgumentListContext::anyTypeArgument() {
  return getRuleContexts<qasmParser::AnyTypeArgumentContext>();
}

qasmParser::AnyTypeArgumentContext* qasmParser::AnyTypeArgumentListContext::anyTypeArgument(size_t i) {
  return getRuleContext<qasmParser::AnyTypeArgumentContext>(i);
}

std::vector<tree::TerminalNode *> qasmParser::AnyTypeArgumentListContext::COMMA() {
  return getTokens(qasmParser::COMMA);
}

tree::TerminalNode* qasmParser::AnyTypeArgumentListContext::COMMA(size_t i) {
  return getToken(qasmParser::COMMA, i);
}


size_t qasmParser::AnyTypeArgumentListContext::getRuleIndex() const {
  return qasmParser::RuleAnyTypeArgumentList;
}

void qasmParser::AnyTypeArgumentListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnyTypeArgumentList(this);
}

void qasmParser::AnyTypeArgumentListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnyTypeArgumentList(this);
}


std::any qasmParser::AnyTypeArgumentListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitAnyTypeArgumentList(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::AnyTypeArgumentListContext* qasmParser::anyTypeArgumentList() {
  AnyTypeArgumentListContext *_localctx = _tracker.createInstance<AnyTypeArgumentListContext>(_ctx, getState());
  enterRule(_localctx, 78, qasmParser::RuleAnyTypeArgumentList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(528);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 42, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(523);
        anyTypeArgument();
        setState(524);
        match(qasmParser::COMMA); 
      }
      setState(530);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 42, _ctx);
    }
    setState(531);
    anyTypeArgument();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AliasStatementContext ------------------------------------------------------------------

qasmParser::AliasStatementContext::AliasStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* qasmParser::AliasStatementContext::Identifier() {
  return getToken(qasmParser::Identifier, 0);
}

tree::TerminalNode* qasmParser::AliasStatementContext::EQUALS() {
  return getToken(qasmParser::EQUALS, 0);
}

qasmParser::AliasInitializerContext* qasmParser::AliasStatementContext::aliasInitializer() {
  return getRuleContext<qasmParser::AliasInitializerContext>(0);
}

tree::TerminalNode* qasmParser::AliasStatementContext::SEMICOLON() {
  return getToken(qasmParser::SEMICOLON, 0);
}


size_t qasmParser::AliasStatementContext::getRuleIndex() const {
  return qasmParser::RuleAliasStatement;
}

void qasmParser::AliasStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAliasStatement(this);
}

void qasmParser::AliasStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAliasStatement(this);
}


std::any qasmParser::AliasStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitAliasStatement(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::AliasStatementContext* qasmParser::aliasStatement() {
  AliasStatementContext *_localctx = _tracker.createInstance<AliasStatementContext>(_ctx, getState());
  enterRule(_localctx, 80, qasmParser::RuleAliasStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(533);
    match(qasmParser::T__13);
    setState(534);
    match(qasmParser::Identifier);
    setState(535);
    match(qasmParser::EQUALS);
    setState(536);
    aliasInitializer(0);
    setState(537);
    match(qasmParser::SEMICOLON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AliasInitializerContext ------------------------------------------------------------------

qasmParser::AliasInitializerContext::AliasInitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

qasmParser::ExpressionContext* qasmParser::AliasInitializerContext::expression() {
  return getRuleContext<qasmParser::ExpressionContext>(0);
}

std::vector<qasmParser::AliasInitializerContext *> qasmParser::AliasInitializerContext::aliasInitializer() {
  return getRuleContexts<qasmParser::AliasInitializerContext>();
}

qasmParser::AliasInitializerContext* qasmParser::AliasInitializerContext::aliasInitializer(size_t i) {
  return getRuleContext<qasmParser::AliasInitializerContext>(i);
}


size_t qasmParser::AliasInitializerContext::getRuleIndex() const {
  return qasmParser::RuleAliasInitializer;
}

void qasmParser::AliasInitializerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAliasInitializer(this);
}

void qasmParser::AliasInitializerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAliasInitializer(this);
}


std::any qasmParser::AliasInitializerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitAliasInitializer(this);
  else
    return visitor->visitChildren(this);
}


qasmParser::AliasInitializerContext* qasmParser::aliasInitializer() {
   return aliasInitializer(0);
}

qasmParser::AliasInitializerContext* qasmParser::aliasInitializer(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  qasmParser::AliasInitializerContext *_localctx = _tracker.createInstance<AliasInitializerContext>(_ctx, parentState);
  qasmParser::AliasInitializerContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 82;
  enterRecursionRule(_localctx, 82, qasmParser::RuleAliasInitializer, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(540);
    expression(0);
    _ctx->stop = _input->LT(-1);
    setState(547);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 43, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<AliasInitializerContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleAliasInitializer);
        setState(542);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(543);
        match(qasmParser::T__14);
        setState(544);
        aliasInitializer(2); 
      }
      setState(549);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 43, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- RangeDefinitionContext ------------------------------------------------------------------

qasmParser::RangeDefinitionContext::RangeDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> qasmParser::RangeDefinitionContext::COLON() {
  return getTokens(qasmParser::COLON);
}

tree::TerminalNode* qasmParser::RangeDefinitionContext::COLON(size_t i) {
  return getToken(qasmParser::COLON, i);
}

std::vector<qasmParser::ExpressionContext *> qasmParser::RangeDefinitionContext::expression() {
  return getRuleContexts<qasmParser::ExpressionContext>();
}

qasmParser::ExpressionContext* qasmParser::RangeDefinitionContext::expression(size_t i) {
  return getRuleContext<qasmParser::ExpressionContext>(i);
}


size_t qasmParser::RangeDefinitionContext::getRuleIndex() const {
  return qasmParser::RuleRangeDefinition;
}

void qasmParser::RangeDefinitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRangeDefinition(this);
}

void qasmParser::RangeDefinitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRangeDefinition(this);
}


std::any qasmParser::RangeDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitRangeDefinition(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::RangeDefinitionContext* qasmParser::rangeDefinition() {
  RangeDefinitionContext *_localctx = _tracker.createInstance<RangeDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 84, qasmParser::RuleRangeDefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(551);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 7) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 7)) & ((1ULL << (qasmParser::T__6 - 7))
      | (1ULL << (qasmParser::T__7 - 7))
      | (1ULL << (qasmParser::T__8 - 7))
      | (1ULL << (qasmParser::T__9 - 7))
      | (1ULL << (qasmParser::T__10 - 7))
      | (1ULL << (qasmParser::T__11 - 7))
      | (1ULL << (qasmParser::T__12 - 7))
      | (1ULL << (qasmParser::T__36 - 7))
      | (1ULL << (qasmParser::T__37 - 7))
      | (1ULL << (qasmParser::T__52 - 7))
      | (1ULL << (qasmParser::T__53 - 7))
      | (1ULL << (qasmParser::T__54 - 7))
      | (1ULL << (qasmParser::T__55 - 7))
      | (1ULL << (qasmParser::T__56 - 7))
      | (1ULL << (qasmParser::T__57 - 7))
      | (1ULL << (qasmParser::T__58 - 7))
      | (1ULL << (qasmParser::T__59 - 7))
      | (1ULL << (qasmParser::T__60 - 7))
      | (1ULL << (qasmParser::T__61 - 7))
      | (1ULL << (qasmParser::T__62 - 7))
      | (1ULL << (qasmParser::T__63 - 7))
      | (1ULL << (qasmParser::T__64 - 7))
      | (1ULL << (qasmParser::T__65 - 7)))) != 0) || ((((_la - 91) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 91)) & ((1ULL << (qasmParser::T__90 - 91))
      | (1ULL << (qasmParser::T__91 - 91))
      | (1ULL << (qasmParser::T__93 - 91))
      | (1ULL << (qasmParser::LPAREN - 91))
      | (1ULL << (qasmParser::MINUS - 91))
      | (1ULL << (qasmParser::ImagNumber - 91))
      | (1ULL << (qasmParser::COMPLEX - 91))
      | (1ULL << (qasmParser::ARRAY - 91))
      | (1ULL << (qasmParser::SIZEOF - 91))
      | (1ULL << (qasmParser::Constant - 91))
      | (1ULL << (qasmParser::Integer - 91))
      | (1ULL << (qasmParser::Identifier - 91))
      | (1ULL << (qasmParser::RealNumber - 91))
      | (1ULL << (qasmParser::TimingLiteral - 91))
      | (1ULL << (qasmParser::StringLiteral - 91)))) != 0)) {
      setState(550);
      expression(0);
    }
    setState(553);
    match(qasmParser::COLON);
    setState(555);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 7) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 7)) & ((1ULL << (qasmParser::T__6 - 7))
      | (1ULL << (qasmParser::T__7 - 7))
      | (1ULL << (qasmParser::T__8 - 7))
      | (1ULL << (qasmParser::T__9 - 7))
      | (1ULL << (qasmParser::T__10 - 7))
      | (1ULL << (qasmParser::T__11 - 7))
      | (1ULL << (qasmParser::T__12 - 7))
      | (1ULL << (qasmParser::T__36 - 7))
      | (1ULL << (qasmParser::T__37 - 7))
      | (1ULL << (qasmParser::T__52 - 7))
      | (1ULL << (qasmParser::T__53 - 7))
      | (1ULL << (qasmParser::T__54 - 7))
      | (1ULL << (qasmParser::T__55 - 7))
      | (1ULL << (qasmParser::T__56 - 7))
      | (1ULL << (qasmParser::T__57 - 7))
      | (1ULL << (qasmParser::T__58 - 7))
      | (1ULL << (qasmParser::T__59 - 7))
      | (1ULL << (qasmParser::T__60 - 7))
      | (1ULL << (qasmParser::T__61 - 7))
      | (1ULL << (qasmParser::T__62 - 7))
      | (1ULL << (qasmParser::T__63 - 7))
      | (1ULL << (qasmParser::T__64 - 7))
      | (1ULL << (qasmParser::T__65 - 7)))) != 0) || ((((_la - 91) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 91)) & ((1ULL << (qasmParser::T__90 - 91))
      | (1ULL << (qasmParser::T__91 - 91))
      | (1ULL << (qasmParser::T__93 - 91))
      | (1ULL << (qasmParser::LPAREN - 91))
      | (1ULL << (qasmParser::MINUS - 91))
      | (1ULL << (qasmParser::ImagNumber - 91))
      | (1ULL << (qasmParser::COMPLEX - 91))
      | (1ULL << (qasmParser::ARRAY - 91))
      | (1ULL << (qasmParser::SIZEOF - 91))
      | (1ULL << (qasmParser::Constant - 91))
      | (1ULL << (qasmParser::Integer - 91))
      | (1ULL << (qasmParser::Identifier - 91))
      | (1ULL << (qasmParser::RealNumber - 91))
      | (1ULL << (qasmParser::TimingLiteral - 91))
      | (1ULL << (qasmParser::StringLiteral - 91)))) != 0)) {
      setState(554);
      expression(0);
    }
    setState(559);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == qasmParser::COLON) {
      setState(557);
      match(qasmParser::COLON);
      setState(558);
      expression(0);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QuantumGateDefinitionContext ------------------------------------------------------------------

qasmParser::QuantumGateDefinitionContext::QuantumGateDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

qasmParser::QuantumGateSignatureContext* qasmParser::QuantumGateDefinitionContext::quantumGateSignature() {
  return getRuleContext<qasmParser::QuantumGateSignatureContext>(0);
}

qasmParser::QuantumBlockContext* qasmParser::QuantumGateDefinitionContext::quantumBlock() {
  return getRuleContext<qasmParser::QuantumBlockContext>(0);
}


size_t qasmParser::QuantumGateDefinitionContext::getRuleIndex() const {
  return qasmParser::RuleQuantumGateDefinition;
}

void qasmParser::QuantumGateDefinitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQuantumGateDefinition(this);
}

void qasmParser::QuantumGateDefinitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQuantumGateDefinition(this);
}


std::any qasmParser::QuantumGateDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitQuantumGateDefinition(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::QuantumGateDefinitionContext* qasmParser::quantumGateDefinition() {
  QuantumGateDefinitionContext *_localctx = _tracker.createInstance<QuantumGateDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 86, qasmParser::RuleQuantumGateDefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(561);
    match(qasmParser::T__15);
    setState(562);
    quantumGateSignature();
    setState(563);
    quantumBlock();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QuantumGateSignatureContext ------------------------------------------------------------------

qasmParser::QuantumGateSignatureContext::QuantumGateSignatureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

qasmParser::QuantumGateNameContext* qasmParser::QuantumGateSignatureContext::quantumGateName() {
  return getRuleContext<qasmParser::QuantumGateNameContext>(0);
}

std::vector<qasmParser::IdentifierListContext *> qasmParser::QuantumGateSignatureContext::identifierList() {
  return getRuleContexts<qasmParser::IdentifierListContext>();
}

qasmParser::IdentifierListContext* qasmParser::QuantumGateSignatureContext::identifierList(size_t i) {
  return getRuleContext<qasmParser::IdentifierListContext>(i);
}

tree::TerminalNode* qasmParser::QuantumGateSignatureContext::LPAREN() {
  return getToken(qasmParser::LPAREN, 0);
}

tree::TerminalNode* qasmParser::QuantumGateSignatureContext::RPAREN() {
  return getToken(qasmParser::RPAREN, 0);
}


size_t qasmParser::QuantumGateSignatureContext::getRuleIndex() const {
  return qasmParser::RuleQuantumGateSignature;
}

void qasmParser::QuantumGateSignatureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQuantumGateSignature(this);
}

void qasmParser::QuantumGateSignatureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQuantumGateSignature(this);
}


std::any qasmParser::QuantumGateSignatureContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitQuantumGateSignature(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::QuantumGateSignatureContext* qasmParser::quantumGateSignature() {
  QuantumGateSignatureContext *_localctx = _tracker.createInstance<QuantumGateSignatureContext>(_ctx, getState());
  enterRule(_localctx, 88, qasmParser::RuleQuantumGateSignature);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(565);
    quantumGateName();
    setState(571);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == qasmParser::LPAREN) {
      setState(566);
      match(qasmParser::LPAREN);
      setState(568);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == qasmParser::Identifier) {
        setState(567);
        identifierList();
      }
      setState(570);
      match(qasmParser::RPAREN);
    }
    setState(573);
    identifierList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QuantumGateNameContext ------------------------------------------------------------------

qasmParser::QuantumGateNameContext::QuantumGateNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t qasmParser::QuantumGateNameContext::getRuleIndex() const {
  return qasmParser::RuleQuantumGateName;
}

void qasmParser::QuantumGateNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQuantumGateName(this);
}

void qasmParser::QuantumGateNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQuantumGateName(this);
}


std::any qasmParser::QuantumGateNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitQuantumGateName(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::QuantumGateNameContext* qasmParser::quantumGateName() {
  QuantumGateNameContext *_localctx = _tracker.createInstance<QuantumGateNameContext>(_ctx, getState());
  enterRule(_localctx, 90, qasmParser::RuleQuantumGateName);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(575);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << qasmParser::T__16)
      | (1ULL << qasmParser::T__17)
      | (1ULL << qasmParser::T__18)
      | (1ULL << qasmParser::T__19)
      | (1ULL << qasmParser::T__20)
      | (1ULL << qasmParser::T__21)
      | (1ULL << qasmParser::T__22)
      | (1ULL << qasmParser::T__23)
      | (1ULL << qasmParser::T__24)
      | (1ULL << qasmParser::T__25)
      | (1ULL << qasmParser::T__26))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QuantumBlockContext ------------------------------------------------------------------

qasmParser::QuantumBlockContext::QuantumBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* qasmParser::QuantumBlockContext::LBRACE() {
  return getToken(qasmParser::LBRACE, 0);
}

tree::TerminalNode* qasmParser::QuantumBlockContext::RBRACE() {
  return getToken(qasmParser::RBRACE, 0);
}

std::vector<qasmParser::QuantumStatementContext *> qasmParser::QuantumBlockContext::quantumStatement() {
  return getRuleContexts<qasmParser::QuantumStatementContext>();
}

qasmParser::QuantumStatementContext* qasmParser::QuantumBlockContext::quantumStatement(size_t i) {
  return getRuleContext<qasmParser::QuantumStatementContext>(i);
}

std::vector<qasmParser::QuantumLoopContext *> qasmParser::QuantumBlockContext::quantumLoop() {
  return getRuleContexts<qasmParser::QuantumLoopContext>();
}

qasmParser::QuantumLoopContext* qasmParser::QuantumBlockContext::quantumLoop(size_t i) {
  return getRuleContext<qasmParser::QuantumLoopContext>(i);
}


size_t qasmParser::QuantumBlockContext::getRuleIndex() const {
  return qasmParser::RuleQuantumBlock;
}

void qasmParser::QuantumBlockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQuantumBlock(this);
}

void qasmParser::QuantumBlockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQuantumBlock(this);
}


std::any qasmParser::QuantumBlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitQuantumBlock(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::QuantumBlockContext* qasmParser::quantumBlock() {
  QuantumBlockContext *_localctx = _tracker.createInstance<QuantumBlockContext>(_ctx, getState());
  enterRule(_localctx, 92, qasmParser::RuleQuantumBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(577);
    match(qasmParser::LBRACE);
    setState(582);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << qasmParser::T__16)
      | (1ULL << qasmParser::T__17)
      | (1ULL << qasmParser::T__18)
      | (1ULL << qasmParser::T__19)
      | (1ULL << qasmParser::T__20)
      | (1ULL << qasmParser::T__21)
      | (1ULL << qasmParser::T__22)
      | (1ULL << qasmParser::T__23)
      | (1ULL << qasmParser::T__24)
      | (1ULL << qasmParser::T__25)
      | (1ULL << qasmParser::T__26)
      | (1ULL << qasmParser::T__27)
      | (1ULL << qasmParser::T__28)
      | (1ULL << qasmParser::T__29)
      | (1ULL << qasmParser::T__30)
      | (1ULL << qasmParser::T__31)
      | (1ULL << qasmParser::T__33)
      | (1ULL << qasmParser::T__34)
      | (1ULL << qasmParser::T__35))) != 0) || ((((_la - 81) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 81)) & ((1ULL << (qasmParser::T__80 - 81))
      | (1ULL << (qasmParser::T__82 - 81))
      | (1ULL << (qasmParser::T__92 - 81))
      | (1ULL << (qasmParser::T__94 - 81))
      | (1ULL << (qasmParser::T__95 - 81)))) != 0)) {
      setState(580);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case qasmParser::T__16:
        case qasmParser::T__17:
        case qasmParser::T__18:
        case qasmParser::T__19:
        case qasmParser::T__20:
        case qasmParser::T__21:
        case qasmParser::T__22:
        case qasmParser::T__23:
        case qasmParser::T__24:
        case qasmParser::T__25:
        case qasmParser::T__26:
        case qasmParser::T__27:
        case qasmParser::T__28:
        case qasmParser::T__29:
        case qasmParser::T__30:
        case qasmParser::T__31:
        case qasmParser::T__33:
        case qasmParser::T__34:
        case qasmParser::T__35:
        case qasmParser::T__92:
        case qasmParser::T__94:
        case qasmParser::T__95: {
          setState(578);
          quantumStatement();
          break;
        }

        case qasmParser::T__80:
        case qasmParser::T__82: {
          setState(579);
          quantumLoop();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(584);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(585);
    match(qasmParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QuantumLoopContext ------------------------------------------------------------------

qasmParser::QuantumLoopContext::QuantumLoopContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

qasmParser::LoopSignatureContext* qasmParser::QuantumLoopContext::loopSignature() {
  return getRuleContext<qasmParser::LoopSignatureContext>(0);
}

qasmParser::QuantumLoopBlockContext* qasmParser::QuantumLoopContext::quantumLoopBlock() {
  return getRuleContext<qasmParser::QuantumLoopBlockContext>(0);
}


size_t qasmParser::QuantumLoopContext::getRuleIndex() const {
  return qasmParser::RuleQuantumLoop;
}

void qasmParser::QuantumLoopContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQuantumLoop(this);
}

void qasmParser::QuantumLoopContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQuantumLoop(this);
}


std::any qasmParser::QuantumLoopContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitQuantumLoop(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::QuantumLoopContext* qasmParser::quantumLoop() {
  QuantumLoopContext *_localctx = _tracker.createInstance<QuantumLoopContext>(_ctx, getState());
  enterRule(_localctx, 94, qasmParser::RuleQuantumLoop);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(587);
    loopSignature();
    setState(588);
    quantumLoopBlock();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QuantumLoopBlockContext ------------------------------------------------------------------

qasmParser::QuantumLoopBlockContext::QuantumLoopBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<qasmParser::QuantumStatementContext *> qasmParser::QuantumLoopBlockContext::quantumStatement() {
  return getRuleContexts<qasmParser::QuantumStatementContext>();
}

qasmParser::QuantumStatementContext* qasmParser::QuantumLoopBlockContext::quantumStatement(size_t i) {
  return getRuleContext<qasmParser::QuantumStatementContext>(i);
}

tree::TerminalNode* qasmParser::QuantumLoopBlockContext::LBRACE() {
  return getToken(qasmParser::LBRACE, 0);
}

tree::TerminalNode* qasmParser::QuantumLoopBlockContext::RBRACE() {
  return getToken(qasmParser::RBRACE, 0);
}


size_t qasmParser::QuantumLoopBlockContext::getRuleIndex() const {
  return qasmParser::RuleQuantumLoopBlock;
}

void qasmParser::QuantumLoopBlockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQuantumLoopBlock(this);
}

void qasmParser::QuantumLoopBlockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQuantumLoopBlock(this);
}


std::any qasmParser::QuantumLoopBlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitQuantumLoopBlock(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::QuantumLoopBlockContext* qasmParser::quantumLoopBlock() {
  QuantumLoopBlockContext *_localctx = _tracker.createInstance<QuantumLoopBlockContext>(_ctx, getState());
  enterRule(_localctx, 96, qasmParser::RuleQuantumLoopBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(599);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case qasmParser::T__16:
      case qasmParser::T__17:
      case qasmParser::T__18:
      case qasmParser::T__19:
      case qasmParser::T__20:
      case qasmParser::T__21:
      case qasmParser::T__22:
      case qasmParser::T__23:
      case qasmParser::T__24:
      case qasmParser::T__25:
      case qasmParser::T__26:
      case qasmParser::T__27:
      case qasmParser::T__28:
      case qasmParser::T__29:
      case qasmParser::T__30:
      case qasmParser::T__31:
      case qasmParser::T__33:
      case qasmParser::T__34:
      case qasmParser::T__35:
      case qasmParser::T__92:
      case qasmParser::T__94:
      case qasmParser::T__95: {
        enterOuterAlt(_localctx, 1);
        setState(590);
        quantumStatement();
        break;
      }

      case qasmParser::LBRACE: {
        enterOuterAlt(_localctx, 2);
        setState(591);
        match(qasmParser::LBRACE);
        setState(595);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & ((1ULL << qasmParser::T__16)
          | (1ULL << qasmParser::T__17)
          | (1ULL << qasmParser::T__18)
          | (1ULL << qasmParser::T__19)
          | (1ULL << qasmParser::T__20)
          | (1ULL << qasmParser::T__21)
          | (1ULL << qasmParser::T__22)
          | (1ULL << qasmParser::T__23)
          | (1ULL << qasmParser::T__24)
          | (1ULL << qasmParser::T__25)
          | (1ULL << qasmParser::T__26)
          | (1ULL << qasmParser::T__27)
          | (1ULL << qasmParser::T__28)
          | (1ULL << qasmParser::T__29)
          | (1ULL << qasmParser::T__30)
          | (1ULL << qasmParser::T__31)
          | (1ULL << qasmParser::T__33)
          | (1ULL << qasmParser::T__34)
          | (1ULL << qasmParser::T__35))) != 0) || ((((_la - 93) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 93)) & ((1ULL << (qasmParser::T__92 - 93))
          | (1ULL << (qasmParser::T__94 - 93))
          | (1ULL << (qasmParser::T__95 - 93)))) != 0)) {
          setState(592);
          quantumStatement();
          setState(597);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(598);
        match(qasmParser::RBRACE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QuantumStatementContext ------------------------------------------------------------------

qasmParser::QuantumStatementContext::QuantumStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

qasmParser::QuantumInstructionContext* qasmParser::QuantumStatementContext::quantumInstruction() {
  return getRuleContext<qasmParser::QuantumInstructionContext>(0);
}

tree::TerminalNode* qasmParser::QuantumStatementContext::SEMICOLON() {
  return getToken(qasmParser::SEMICOLON, 0);
}

qasmParser::TimingStatementContext* qasmParser::QuantumStatementContext::timingStatement() {
  return getRuleContext<qasmParser::TimingStatementContext>(0);
}


size_t qasmParser::QuantumStatementContext::getRuleIndex() const {
  return qasmParser::RuleQuantumStatement;
}

void qasmParser::QuantumStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQuantumStatement(this);
}

void qasmParser::QuantumStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQuantumStatement(this);
}


std::any qasmParser::QuantumStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitQuantumStatement(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::QuantumStatementContext* qasmParser::quantumStatement() {
  QuantumStatementContext *_localctx = _tracker.createInstance<QuantumStatementContext>(_ctx, getState());
  enterRule(_localctx, 98, qasmParser::RuleQuantumStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(605);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case qasmParser::T__16:
      case qasmParser::T__17:
      case qasmParser::T__18:
      case qasmParser::T__19:
      case qasmParser::T__20:
      case qasmParser::T__21:
      case qasmParser::T__22:
      case qasmParser::T__23:
      case qasmParser::T__24:
      case qasmParser::T__25:
      case qasmParser::T__26:
      case qasmParser::T__27:
      case qasmParser::T__28:
      case qasmParser::T__29:
      case qasmParser::T__30:
      case qasmParser::T__31:
      case qasmParser::T__33:
      case qasmParser::T__34:
      case qasmParser::T__35: {
        enterOuterAlt(_localctx, 1);
        setState(601);
        quantumInstruction();
        setState(602);
        match(qasmParser::SEMICOLON);
        break;
      }

      case qasmParser::T__92:
      case qasmParser::T__94:
      case qasmParser::T__95: {
        enterOuterAlt(_localctx, 2);
        setState(604);
        timingStatement();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QuantumInstructionContext ------------------------------------------------------------------

qasmParser::QuantumInstructionContext::QuantumInstructionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

qasmParser::QuantumGateCallContext* qasmParser::QuantumInstructionContext::quantumGateCall() {
  return getRuleContext<qasmParser::QuantumGateCallContext>(0);
}

qasmParser::QuantumPhaseContext* qasmParser::QuantumInstructionContext::quantumPhase() {
  return getRuleContext<qasmParser::QuantumPhaseContext>(0);
}

qasmParser::QuantumMeasurementContext* qasmParser::QuantumInstructionContext::quantumMeasurement() {
  return getRuleContext<qasmParser::QuantumMeasurementContext>(0);
}

qasmParser::QuantumResetContext* qasmParser::QuantumInstructionContext::quantumReset() {
  return getRuleContext<qasmParser::QuantumResetContext>(0);
}

qasmParser::QuantumBarrierContext* qasmParser::QuantumInstructionContext::quantumBarrier() {
  return getRuleContext<qasmParser::QuantumBarrierContext>(0);
}


size_t qasmParser::QuantumInstructionContext::getRuleIndex() const {
  return qasmParser::RuleQuantumInstruction;
}

void qasmParser::QuantumInstructionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQuantumInstruction(this);
}

void qasmParser::QuantumInstructionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQuantumInstruction(this);
}


std::any qasmParser::QuantumInstructionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitQuantumInstruction(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::QuantumInstructionContext* qasmParser::quantumInstruction() {
  QuantumInstructionContext *_localctx = _tracker.createInstance<QuantumInstructionContext>(_ctx, getState());
  enterRule(_localctx, 100, qasmParser::RuleQuantumInstruction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(612);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 54, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(607);
      quantumGateCall();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(608);
      quantumPhase();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(609);
      quantumMeasurement();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(610);
      quantumReset();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(611);
      quantumBarrier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QuantumPhaseContext ------------------------------------------------------------------

qasmParser::QuantumPhaseContext::QuantumPhaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* qasmParser::QuantumPhaseContext::LPAREN() {
  return getToken(qasmParser::LPAREN, 0);
}

qasmParser::ExpressionContext* qasmParser::QuantumPhaseContext::expression() {
  return getRuleContext<qasmParser::ExpressionContext>(0);
}

tree::TerminalNode* qasmParser::QuantumPhaseContext::RPAREN() {
  return getToken(qasmParser::RPAREN, 0);
}

std::vector<qasmParser::QuantumGateModifierContext *> qasmParser::QuantumPhaseContext::quantumGateModifier() {
  return getRuleContexts<qasmParser::QuantumGateModifierContext>();
}

qasmParser::QuantumGateModifierContext* qasmParser::QuantumPhaseContext::quantumGateModifier(size_t i) {
  return getRuleContext<qasmParser::QuantumGateModifierContext>(i);
}

std::vector<qasmParser::IndexedIdentifierContext *> qasmParser::QuantumPhaseContext::indexedIdentifier() {
  return getRuleContexts<qasmParser::IndexedIdentifierContext>();
}

qasmParser::IndexedIdentifierContext* qasmParser::QuantumPhaseContext::indexedIdentifier(size_t i) {
  return getRuleContext<qasmParser::IndexedIdentifierContext>(i);
}

std::vector<tree::TerminalNode *> qasmParser::QuantumPhaseContext::COMMA() {
  return getTokens(qasmParser::COMMA);
}

tree::TerminalNode* qasmParser::QuantumPhaseContext::COMMA(size_t i) {
  return getToken(qasmParser::COMMA, i);
}


size_t qasmParser::QuantumPhaseContext::getRuleIndex() const {
  return qasmParser::RuleQuantumPhase;
}

void qasmParser::QuantumPhaseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQuantumPhase(this);
}

void qasmParser::QuantumPhaseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQuantumPhase(this);
}


std::any qasmParser::QuantumPhaseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitQuantumPhase(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::QuantumPhaseContext* qasmParser::quantumPhase() {
  QuantumPhaseContext *_localctx = _tracker.createInstance<QuantumPhaseContext>(_ctx, getState());
  enterRule(_localctx, 102, qasmParser::RuleQuantumPhase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(617);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << qasmParser::T__31)
      | (1ULL << qasmParser::T__33)
      | (1ULL << qasmParser::T__34)
      | (1ULL << qasmParser::T__35))) != 0)) {
      setState(614);
      quantumGateModifier();
      setState(619);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(620);
    match(qasmParser::T__27);
    setState(621);
    match(qasmParser::LPAREN);
    setState(622);
    expression(0);
    setState(623);
    match(qasmParser::RPAREN);
    setState(632);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == qasmParser::Identifier) {
      setState(624);
      indexedIdentifier();
      setState(629);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == qasmParser::COMMA) {
        setState(625);
        match(qasmParser::COMMA);
        setState(626);
        indexedIdentifier();
        setState(631);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QuantumResetContext ------------------------------------------------------------------

qasmParser::QuantumResetContext::QuantumResetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

qasmParser::IndexedIdentifierContext* qasmParser::QuantumResetContext::indexedIdentifier() {
  return getRuleContext<qasmParser::IndexedIdentifierContext>(0);
}


size_t qasmParser::QuantumResetContext::getRuleIndex() const {
  return qasmParser::RuleQuantumReset;
}

void qasmParser::QuantumResetContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQuantumReset(this);
}

void qasmParser::QuantumResetContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQuantumReset(this);
}


std::any qasmParser::QuantumResetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitQuantumReset(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::QuantumResetContext* qasmParser::quantumReset() {
  QuantumResetContext *_localctx = _tracker.createInstance<QuantumResetContext>(_ctx, getState());
  enterRule(_localctx, 104, qasmParser::RuleQuantumReset);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(634);
    match(qasmParser::T__28);
    setState(635);
    indexedIdentifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QuantumMeasurementContext ------------------------------------------------------------------

qasmParser::QuantumMeasurementContext::QuantumMeasurementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

qasmParser::IndexedIdentifierContext* qasmParser::QuantumMeasurementContext::indexedIdentifier() {
  return getRuleContext<qasmParser::IndexedIdentifierContext>(0);
}


size_t qasmParser::QuantumMeasurementContext::getRuleIndex() const {
  return qasmParser::RuleQuantumMeasurement;
}

void qasmParser::QuantumMeasurementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQuantumMeasurement(this);
}

void qasmParser::QuantumMeasurementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQuantumMeasurement(this);
}


std::any qasmParser::QuantumMeasurementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitQuantumMeasurement(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::QuantumMeasurementContext* qasmParser::quantumMeasurement() {
  QuantumMeasurementContext *_localctx = _tracker.createInstance<QuantumMeasurementContext>(_ctx, getState());
  enterRule(_localctx, 106, qasmParser::RuleQuantumMeasurement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(637);
    match(qasmParser::T__29);
    setState(638);
    indexedIdentifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QuantumMeasurementAssignmentContext ------------------------------------------------------------------

qasmParser::QuantumMeasurementAssignmentContext::QuantumMeasurementAssignmentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

qasmParser::QuantumMeasurementContext* qasmParser::QuantumMeasurementAssignmentContext::quantumMeasurement() {
  return getRuleContext<qasmParser::QuantumMeasurementContext>(0);
}

tree::TerminalNode* qasmParser::QuantumMeasurementAssignmentContext::ARROW() {
  return getToken(qasmParser::ARROW, 0);
}

qasmParser::IndexedIdentifierContext* qasmParser::QuantumMeasurementAssignmentContext::indexedIdentifier() {
  return getRuleContext<qasmParser::IndexedIdentifierContext>(0);
}

tree::TerminalNode* qasmParser::QuantumMeasurementAssignmentContext::EQUALS() {
  return getToken(qasmParser::EQUALS, 0);
}


size_t qasmParser::QuantumMeasurementAssignmentContext::getRuleIndex() const {
  return qasmParser::RuleQuantumMeasurementAssignment;
}

void qasmParser::QuantumMeasurementAssignmentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQuantumMeasurementAssignment(this);
}

void qasmParser::QuantumMeasurementAssignmentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQuantumMeasurementAssignment(this);
}


std::any qasmParser::QuantumMeasurementAssignmentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitQuantumMeasurementAssignment(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::QuantumMeasurementAssignmentContext* qasmParser::quantumMeasurementAssignment() {
  QuantumMeasurementAssignmentContext *_localctx = _tracker.createInstance<QuantumMeasurementAssignmentContext>(_ctx, getState());
  enterRule(_localctx, 108, qasmParser::RuleQuantumMeasurementAssignment);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(649);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case qasmParser::T__29: {
        enterOuterAlt(_localctx, 1);
        setState(640);
        quantumMeasurement();
        setState(643);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == qasmParser::ARROW) {
          setState(641);
          match(qasmParser::ARROW);
          setState(642);
          indexedIdentifier();
        }
        break;
      }

      case qasmParser::Identifier: {
        enterOuterAlt(_localctx, 2);
        setState(645);
        indexedIdentifier();
        setState(646);
        match(qasmParser::EQUALS);
        setState(647);
        quantumMeasurement();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QuantumBarrierContext ------------------------------------------------------------------

qasmParser::QuantumBarrierContext::QuantumBarrierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<qasmParser::IndexedIdentifierContext *> qasmParser::QuantumBarrierContext::indexedIdentifier() {
  return getRuleContexts<qasmParser::IndexedIdentifierContext>();
}

qasmParser::IndexedIdentifierContext* qasmParser::QuantumBarrierContext::indexedIdentifier(size_t i) {
  return getRuleContext<qasmParser::IndexedIdentifierContext>(i);
}

std::vector<tree::TerminalNode *> qasmParser::QuantumBarrierContext::COMMA() {
  return getTokens(qasmParser::COMMA);
}

tree::TerminalNode* qasmParser::QuantumBarrierContext::COMMA(size_t i) {
  return getToken(qasmParser::COMMA, i);
}


size_t qasmParser::QuantumBarrierContext::getRuleIndex() const {
  return qasmParser::RuleQuantumBarrier;
}

void qasmParser::QuantumBarrierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQuantumBarrier(this);
}

void qasmParser::QuantumBarrierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQuantumBarrier(this);
}


std::any qasmParser::QuantumBarrierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitQuantumBarrier(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::QuantumBarrierContext* qasmParser::quantumBarrier() {
  QuantumBarrierContext *_localctx = _tracker.createInstance<QuantumBarrierContext>(_ctx, getState());
  enterRule(_localctx, 110, qasmParser::RuleQuantumBarrier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(651);
    match(qasmParser::T__30);
    setState(660);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == qasmParser::Identifier) {
      setState(652);
      indexedIdentifier();
      setState(657);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == qasmParser::COMMA) {
        setState(653);
        match(qasmParser::COMMA);
        setState(654);
        indexedIdentifier();
        setState(659);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QuantumGateModifierContext ------------------------------------------------------------------

qasmParser::QuantumGateModifierContext::QuantumGateModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

qasmParser::PowModifierContext* qasmParser::QuantumGateModifierContext::powModifier() {
  return getRuleContext<qasmParser::PowModifierContext>(0);
}

qasmParser::CtrlModifierContext* qasmParser::QuantumGateModifierContext::ctrlModifier() {
  return getRuleContext<qasmParser::CtrlModifierContext>(0);
}


size_t qasmParser::QuantumGateModifierContext::getRuleIndex() const {
  return qasmParser::RuleQuantumGateModifier;
}

void qasmParser::QuantumGateModifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQuantumGateModifier(this);
}

void qasmParser::QuantumGateModifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQuantumGateModifier(this);
}


std::any qasmParser::QuantumGateModifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitQuantumGateModifier(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::QuantumGateModifierContext* qasmParser::quantumGateModifier() {
  QuantumGateModifierContext *_localctx = _tracker.createInstance<QuantumGateModifierContext>(_ctx, getState());
  enterRule(_localctx, 112, qasmParser::RuleQuantumGateModifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(665);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case qasmParser::T__31: {
        setState(662);
        match(qasmParser::T__31);
        break;
      }

      case qasmParser::T__33: {
        setState(663);
        powModifier();
        break;
      }

      case qasmParser::T__34:
      case qasmParser::T__35: {
        setState(664);
        ctrlModifier();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(667);
    match(qasmParser::T__32);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PowModifierContext ------------------------------------------------------------------

qasmParser::PowModifierContext::PowModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* qasmParser::PowModifierContext::LPAREN() {
  return getToken(qasmParser::LPAREN, 0);
}

qasmParser::ExpressionContext* qasmParser::PowModifierContext::expression() {
  return getRuleContext<qasmParser::ExpressionContext>(0);
}

tree::TerminalNode* qasmParser::PowModifierContext::RPAREN() {
  return getToken(qasmParser::RPAREN, 0);
}


size_t qasmParser::PowModifierContext::getRuleIndex() const {
  return qasmParser::RulePowModifier;
}

void qasmParser::PowModifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPowModifier(this);
}

void qasmParser::PowModifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPowModifier(this);
}


std::any qasmParser::PowModifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitPowModifier(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::PowModifierContext* qasmParser::powModifier() {
  PowModifierContext *_localctx = _tracker.createInstance<PowModifierContext>(_ctx, getState());
  enterRule(_localctx, 114, qasmParser::RulePowModifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(669);
    match(qasmParser::T__33);
    setState(670);
    match(qasmParser::LPAREN);
    setState(671);
    expression(0);
    setState(672);
    match(qasmParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CtrlModifierContext ------------------------------------------------------------------

qasmParser::CtrlModifierContext::CtrlModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* qasmParser::CtrlModifierContext::LPAREN() {
  return getToken(qasmParser::LPAREN, 0);
}

qasmParser::ExpressionContext* qasmParser::CtrlModifierContext::expression() {
  return getRuleContext<qasmParser::ExpressionContext>(0);
}

tree::TerminalNode* qasmParser::CtrlModifierContext::RPAREN() {
  return getToken(qasmParser::RPAREN, 0);
}


size_t qasmParser::CtrlModifierContext::getRuleIndex() const {
  return qasmParser::RuleCtrlModifier;
}

void qasmParser::CtrlModifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCtrlModifier(this);
}

void qasmParser::CtrlModifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCtrlModifier(this);
}


std::any qasmParser::CtrlModifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitCtrlModifier(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::CtrlModifierContext* qasmParser::ctrlModifier() {
  CtrlModifierContext *_localctx = _tracker.createInstance<CtrlModifierContext>(_ctx, getState());
  enterRule(_localctx, 116, qasmParser::RuleCtrlModifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(674);
    _la = _input->LA(1);
    if (!(_la == qasmParser::T__34

    || _la == qasmParser::T__35)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(679);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == qasmParser::LPAREN) {
      setState(675);
      match(qasmParser::LPAREN);
      setState(676);
      expression(0);
      setState(677);
      match(qasmParser::RPAREN);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QuantumGateCallContext ------------------------------------------------------------------

qasmParser::QuantumGateCallContext::QuantumGateCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

qasmParser::QuantumGateNameContext* qasmParser::QuantumGateCallContext::quantumGateName() {
  return getRuleContext<qasmParser::QuantumGateNameContext>(0);
}

std::vector<qasmParser::IndexedIdentifierContext *> qasmParser::QuantumGateCallContext::indexedIdentifier() {
  return getRuleContexts<qasmParser::IndexedIdentifierContext>();
}

qasmParser::IndexedIdentifierContext* qasmParser::QuantumGateCallContext::indexedIdentifier(size_t i) {
  return getRuleContext<qasmParser::IndexedIdentifierContext>(i);
}

std::vector<qasmParser::QuantumGateModifierContext *> qasmParser::QuantumGateCallContext::quantumGateModifier() {
  return getRuleContexts<qasmParser::QuantumGateModifierContext>();
}

qasmParser::QuantumGateModifierContext* qasmParser::QuantumGateCallContext::quantumGateModifier(size_t i) {
  return getRuleContext<qasmParser::QuantumGateModifierContext>(i);
}

tree::TerminalNode* qasmParser::QuantumGateCallContext::LPAREN() {
  return getToken(qasmParser::LPAREN, 0);
}

qasmParser::ExpressionListContext* qasmParser::QuantumGateCallContext::expressionList() {
  return getRuleContext<qasmParser::ExpressionListContext>(0);
}

tree::TerminalNode* qasmParser::QuantumGateCallContext::RPAREN() {
  return getToken(qasmParser::RPAREN, 0);
}

std::vector<tree::TerminalNode *> qasmParser::QuantumGateCallContext::COMMA() {
  return getTokens(qasmParser::COMMA);
}

tree::TerminalNode* qasmParser::QuantumGateCallContext::COMMA(size_t i) {
  return getToken(qasmParser::COMMA, i);
}


size_t qasmParser::QuantumGateCallContext::getRuleIndex() const {
  return qasmParser::RuleQuantumGateCall;
}

void qasmParser::QuantumGateCallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQuantumGateCall(this);
}

void qasmParser::QuantumGateCallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQuantumGateCall(this);
}


std::any qasmParser::QuantumGateCallContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitQuantumGateCall(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::QuantumGateCallContext* qasmParser::quantumGateCall() {
  QuantumGateCallContext *_localctx = _tracker.createInstance<QuantumGateCallContext>(_ctx, getState());
  enterRule(_localctx, 118, qasmParser::RuleQuantumGateCall);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(684);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << qasmParser::T__31)
      | (1ULL << qasmParser::T__33)
      | (1ULL << qasmParser::T__34)
      | (1ULL << qasmParser::T__35))) != 0)) {
      setState(681);
      quantumGateModifier();
      setState(686);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(687);
    quantumGateName();
    setState(692);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == qasmParser::LPAREN) {
      setState(688);
      match(qasmParser::LPAREN);
      setState(689);
      expressionList();
      setState(690);
      match(qasmParser::RPAREN);
    }
    setState(694);
    indexedIdentifier();
    setState(699);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == qasmParser::COMMA) {
      setState(695);
      match(qasmParser::COMMA);
      setState(696);
      indexedIdentifier();
      setState(701);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnaryOperatorContext ------------------------------------------------------------------

qasmParser::UnaryOperatorContext::UnaryOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* qasmParser::UnaryOperatorContext::MINUS() {
  return getToken(qasmParser::MINUS, 0);
}


size_t qasmParser::UnaryOperatorContext::getRuleIndex() const {
  return qasmParser::RuleUnaryOperator;
}

void qasmParser::UnaryOperatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnaryOperator(this);
}

void qasmParser::UnaryOperatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnaryOperator(this);
}


std::any qasmParser::UnaryOperatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitUnaryOperator(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::UnaryOperatorContext* qasmParser::unaryOperator() {
  UnaryOperatorContext *_localctx = _tracker.createInstance<UnaryOperatorContext>(_ctx, getState());
  enterRule(_localctx, 120, qasmParser::RuleUnaryOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(702);
    _la = _input->LA(1);
    if (!(_la == qasmParser::T__36

    || _la == qasmParser::T__37 || _la == qasmParser::MINUS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ComparisonOperatorContext ------------------------------------------------------------------

qasmParser::ComparisonOperatorContext::ComparisonOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t qasmParser::ComparisonOperatorContext::getRuleIndex() const {
  return qasmParser::RuleComparisonOperator;
}

void qasmParser::ComparisonOperatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComparisonOperator(this);
}

void qasmParser::ComparisonOperatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComparisonOperator(this);
}


std::any qasmParser::ComparisonOperatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitComparisonOperator(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::ComparisonOperatorContext* qasmParser::comparisonOperator() {
  ComparisonOperatorContext *_localctx = _tracker.createInstance<ComparisonOperatorContext>(_ctx, getState());
  enterRule(_localctx, 122, qasmParser::RuleComparisonOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(704);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << qasmParser::T__38)
      | (1ULL << qasmParser::T__39)
      | (1ULL << qasmParser::T__40)
      | (1ULL << qasmParser::T__41))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EqualityOperatorContext ------------------------------------------------------------------

qasmParser::EqualityOperatorContext::EqualityOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t qasmParser::EqualityOperatorContext::getRuleIndex() const {
  return qasmParser::RuleEqualityOperator;
}

void qasmParser::EqualityOperatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEqualityOperator(this);
}

void qasmParser::EqualityOperatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEqualityOperator(this);
}


std::any qasmParser::EqualityOperatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitEqualityOperator(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::EqualityOperatorContext* qasmParser::equalityOperator() {
  EqualityOperatorContext *_localctx = _tracker.createInstance<EqualityOperatorContext>(_ctx, getState());
  enterRule(_localctx, 124, qasmParser::RuleEqualityOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(706);
    _la = _input->LA(1);
    if (!(_la == qasmParser::T__42

    || _la == qasmParser::T__43)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LogicalOperatorContext ------------------------------------------------------------------

qasmParser::LogicalOperatorContext::LogicalOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t qasmParser::LogicalOperatorContext::getRuleIndex() const {
  return qasmParser::RuleLogicalOperator;
}

void qasmParser::LogicalOperatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLogicalOperator(this);
}

void qasmParser::LogicalOperatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLogicalOperator(this);
}


std::any qasmParser::LogicalOperatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitLogicalOperator(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::LogicalOperatorContext* qasmParser::logicalOperator() {
  LogicalOperatorContext *_localctx = _tracker.createInstance<LogicalOperatorContext>(_ctx, getState());
  enterRule(_localctx, 126, qasmParser::RuleLogicalOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(708);
    _la = _input->LA(1);
    if (!(_la == qasmParser::T__44

    || _la == qasmParser::T__45)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionStatementContext ------------------------------------------------------------------

qasmParser::ExpressionStatementContext::ExpressionStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

qasmParser::ExpressionContext* qasmParser::ExpressionStatementContext::expression() {
  return getRuleContext<qasmParser::ExpressionContext>(0);
}

tree::TerminalNode* qasmParser::ExpressionStatementContext::SEMICOLON() {
  return getToken(qasmParser::SEMICOLON, 0);
}


size_t qasmParser::ExpressionStatementContext::getRuleIndex() const {
  return qasmParser::RuleExpressionStatement;
}

void qasmParser::ExpressionStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpressionStatement(this);
}

void qasmParser::ExpressionStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpressionStatement(this);
}


std::any qasmParser::ExpressionStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitExpressionStatement(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::ExpressionStatementContext* qasmParser::expressionStatement() {
  ExpressionStatementContext *_localctx = _tracker.createInstance<ExpressionStatementContext>(_ctx, getState());
  enterRule(_localctx, 128, qasmParser::RuleExpressionStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(710);
    expression(0);
    setState(711);
    match(qasmParser::SEMICOLON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

qasmParser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

qasmParser::ExpressionTerminatorContext* qasmParser::ExpressionContext::expressionTerminator() {
  return getRuleContext<qasmParser::ExpressionTerminatorContext>(0);
}

qasmParser::UnaryExpressionContext* qasmParser::ExpressionContext::unaryExpression() {
  return getRuleContext<qasmParser::UnaryExpressionContext>(0);
}

qasmParser::LogicalAndExpressionContext* qasmParser::ExpressionContext::logicalAndExpression() {
  return getRuleContext<qasmParser::LogicalAndExpressionContext>(0);
}

qasmParser::ExpressionContext* qasmParser::ExpressionContext::expression() {
  return getRuleContext<qasmParser::ExpressionContext>(0);
}


size_t qasmParser::ExpressionContext::getRuleIndex() const {
  return qasmParser::RuleExpression;
}

void qasmParser::ExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpression(this);
}

void qasmParser::ExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpression(this);
}


std::any qasmParser::ExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitExpression(this);
  else
    return visitor->visitChildren(this);
}


qasmParser::ExpressionContext* qasmParser::expression() {
   return expression(0);
}

qasmParser::ExpressionContext* qasmParser::expression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  qasmParser::ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, parentState);
  qasmParser::ExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 130;
  enterRecursionRule(_localctx, 130, qasmParser::RuleExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(717);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 67, _ctx)) {
    case 1: {
      setState(714);
      expressionTerminator();
      break;
    }

    case 2: {
      setState(715);
      unaryExpression();
      break;
    }

    case 3: {
      setState(716);
      logicalAndExpression(0);
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(724);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 68, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleExpression);
        setState(719);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(720);
        match(qasmParser::T__45);
        setState(721);
        logicalAndExpression(0); 
      }
      setState(726);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 68, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- LogicalAndExpressionContext ------------------------------------------------------------------

qasmParser::LogicalAndExpressionContext::LogicalAndExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

qasmParser::BitOrExpressionContext* qasmParser::LogicalAndExpressionContext::bitOrExpression() {
  return getRuleContext<qasmParser::BitOrExpressionContext>(0);
}

qasmParser::LogicalAndExpressionContext* qasmParser::LogicalAndExpressionContext::logicalAndExpression() {
  return getRuleContext<qasmParser::LogicalAndExpressionContext>(0);
}


size_t qasmParser::LogicalAndExpressionContext::getRuleIndex() const {
  return qasmParser::RuleLogicalAndExpression;
}

void qasmParser::LogicalAndExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLogicalAndExpression(this);
}

void qasmParser::LogicalAndExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLogicalAndExpression(this);
}


std::any qasmParser::LogicalAndExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitLogicalAndExpression(this);
  else
    return visitor->visitChildren(this);
}


qasmParser::LogicalAndExpressionContext* qasmParser::logicalAndExpression() {
   return logicalAndExpression(0);
}

qasmParser::LogicalAndExpressionContext* qasmParser::logicalAndExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  qasmParser::LogicalAndExpressionContext *_localctx = _tracker.createInstance<LogicalAndExpressionContext>(_ctx, parentState);
  qasmParser::LogicalAndExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 132;
  enterRecursionRule(_localctx, 132, qasmParser::RuleLogicalAndExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(728);
    bitOrExpression(0);
    _ctx->stop = _input->LT(-1);
    setState(735);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 69, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<LogicalAndExpressionContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleLogicalAndExpression);
        setState(730);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(731);
        match(qasmParser::T__44);
        setState(732);
        bitOrExpression(0); 
      }
      setState(737);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 69, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- BitOrExpressionContext ------------------------------------------------------------------

qasmParser::BitOrExpressionContext::BitOrExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

qasmParser::XOrExpressionContext* qasmParser::BitOrExpressionContext::xOrExpression() {
  return getRuleContext<qasmParser::XOrExpressionContext>(0);
}

qasmParser::BitOrExpressionContext* qasmParser::BitOrExpressionContext::bitOrExpression() {
  return getRuleContext<qasmParser::BitOrExpressionContext>(0);
}


size_t qasmParser::BitOrExpressionContext::getRuleIndex() const {
  return qasmParser::RuleBitOrExpression;
}

void qasmParser::BitOrExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBitOrExpression(this);
}

void qasmParser::BitOrExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBitOrExpression(this);
}


std::any qasmParser::BitOrExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitBitOrExpression(this);
  else
    return visitor->visitChildren(this);
}


qasmParser::BitOrExpressionContext* qasmParser::bitOrExpression() {
   return bitOrExpression(0);
}

qasmParser::BitOrExpressionContext* qasmParser::bitOrExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  qasmParser::BitOrExpressionContext *_localctx = _tracker.createInstance<BitOrExpressionContext>(_ctx, parentState);
  qasmParser::BitOrExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 134;
  enterRecursionRule(_localctx, 134, qasmParser::RuleBitOrExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(739);
    xOrExpression(0);
    _ctx->stop = _input->LT(-1);
    setState(746);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 70, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<BitOrExpressionContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleBitOrExpression);
        setState(741);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(742);
        match(qasmParser::T__46);
        setState(743);
        xOrExpression(0); 
      }
      setState(748);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 70, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- XOrExpressionContext ------------------------------------------------------------------

qasmParser::XOrExpressionContext::XOrExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

qasmParser::BitAndExpressionContext* qasmParser::XOrExpressionContext::bitAndExpression() {
  return getRuleContext<qasmParser::BitAndExpressionContext>(0);
}

qasmParser::XOrExpressionContext* qasmParser::XOrExpressionContext::xOrExpression() {
  return getRuleContext<qasmParser::XOrExpressionContext>(0);
}


size_t qasmParser::XOrExpressionContext::getRuleIndex() const {
  return qasmParser::RuleXOrExpression;
}

void qasmParser::XOrExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterXOrExpression(this);
}

void qasmParser::XOrExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitXOrExpression(this);
}


std::any qasmParser::XOrExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitXOrExpression(this);
  else
    return visitor->visitChildren(this);
}


qasmParser::XOrExpressionContext* qasmParser::xOrExpression() {
   return xOrExpression(0);
}

qasmParser::XOrExpressionContext* qasmParser::xOrExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  qasmParser::XOrExpressionContext *_localctx = _tracker.createInstance<XOrExpressionContext>(_ctx, parentState);
  qasmParser::XOrExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 136;
  enterRecursionRule(_localctx, 136, qasmParser::RuleXOrExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(750);
    bitAndExpression(0);
    _ctx->stop = _input->LT(-1);
    setState(757);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 71, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<XOrExpressionContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleXOrExpression);
        setState(752);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(753);
        match(qasmParser::T__47);
        setState(754);
        bitAndExpression(0); 
      }
      setState(759);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 71, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- BitAndExpressionContext ------------------------------------------------------------------

qasmParser::BitAndExpressionContext::BitAndExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

qasmParser::EqualityExpressionContext* qasmParser::BitAndExpressionContext::equalityExpression() {
  return getRuleContext<qasmParser::EqualityExpressionContext>(0);
}

qasmParser::BitAndExpressionContext* qasmParser::BitAndExpressionContext::bitAndExpression() {
  return getRuleContext<qasmParser::BitAndExpressionContext>(0);
}


size_t qasmParser::BitAndExpressionContext::getRuleIndex() const {
  return qasmParser::RuleBitAndExpression;
}

void qasmParser::BitAndExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBitAndExpression(this);
}

void qasmParser::BitAndExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBitAndExpression(this);
}


std::any qasmParser::BitAndExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitBitAndExpression(this);
  else
    return visitor->visitChildren(this);
}


qasmParser::BitAndExpressionContext* qasmParser::bitAndExpression() {
   return bitAndExpression(0);
}

qasmParser::BitAndExpressionContext* qasmParser::bitAndExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  qasmParser::BitAndExpressionContext *_localctx = _tracker.createInstance<BitAndExpressionContext>(_ctx, parentState);
  qasmParser::BitAndExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 138;
  enterRecursionRule(_localctx, 138, qasmParser::RuleBitAndExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(761);
    equalityExpression(0);
    _ctx->stop = _input->LT(-1);
    setState(768);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 72, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<BitAndExpressionContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleBitAndExpression);
        setState(763);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(764);
        match(qasmParser::T__48);
        setState(765);
        equalityExpression(0); 
      }
      setState(770);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 72, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- EqualityExpressionContext ------------------------------------------------------------------

qasmParser::EqualityExpressionContext::EqualityExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

qasmParser::ComparisonExpressionContext* qasmParser::EqualityExpressionContext::comparisonExpression() {
  return getRuleContext<qasmParser::ComparisonExpressionContext>(0);
}

qasmParser::EqualityExpressionContext* qasmParser::EqualityExpressionContext::equalityExpression() {
  return getRuleContext<qasmParser::EqualityExpressionContext>(0);
}

qasmParser::EqualityOperatorContext* qasmParser::EqualityExpressionContext::equalityOperator() {
  return getRuleContext<qasmParser::EqualityOperatorContext>(0);
}


size_t qasmParser::EqualityExpressionContext::getRuleIndex() const {
  return qasmParser::RuleEqualityExpression;
}

void qasmParser::EqualityExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEqualityExpression(this);
}

void qasmParser::EqualityExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEqualityExpression(this);
}


std::any qasmParser::EqualityExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitEqualityExpression(this);
  else
    return visitor->visitChildren(this);
}


qasmParser::EqualityExpressionContext* qasmParser::equalityExpression() {
   return equalityExpression(0);
}

qasmParser::EqualityExpressionContext* qasmParser::equalityExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  qasmParser::EqualityExpressionContext *_localctx = _tracker.createInstance<EqualityExpressionContext>(_ctx, parentState);
  qasmParser::EqualityExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 140;
  enterRecursionRule(_localctx, 140, qasmParser::RuleEqualityExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(772);
    comparisonExpression(0);
    _ctx->stop = _input->LT(-1);
    setState(780);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 73, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<EqualityExpressionContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleEqualityExpression);
        setState(774);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(775);
        equalityOperator();
        setState(776);
        comparisonExpression(0); 
      }
      setState(782);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 73, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ComparisonExpressionContext ------------------------------------------------------------------

qasmParser::ComparisonExpressionContext::ComparisonExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

qasmParser::BitShiftExpressionContext* qasmParser::ComparisonExpressionContext::bitShiftExpression() {
  return getRuleContext<qasmParser::BitShiftExpressionContext>(0);
}

qasmParser::ComparisonExpressionContext* qasmParser::ComparisonExpressionContext::comparisonExpression() {
  return getRuleContext<qasmParser::ComparisonExpressionContext>(0);
}

qasmParser::ComparisonOperatorContext* qasmParser::ComparisonExpressionContext::comparisonOperator() {
  return getRuleContext<qasmParser::ComparisonOperatorContext>(0);
}


size_t qasmParser::ComparisonExpressionContext::getRuleIndex() const {
  return qasmParser::RuleComparisonExpression;
}

void qasmParser::ComparisonExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComparisonExpression(this);
}

void qasmParser::ComparisonExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComparisonExpression(this);
}


std::any qasmParser::ComparisonExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitComparisonExpression(this);
  else
    return visitor->visitChildren(this);
}


qasmParser::ComparisonExpressionContext* qasmParser::comparisonExpression() {
   return comparisonExpression(0);
}

qasmParser::ComparisonExpressionContext* qasmParser::comparisonExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  qasmParser::ComparisonExpressionContext *_localctx = _tracker.createInstance<ComparisonExpressionContext>(_ctx, parentState);
  qasmParser::ComparisonExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 142;
  enterRecursionRule(_localctx, 142, qasmParser::RuleComparisonExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(784);
    bitShiftExpression(0);
    _ctx->stop = _input->LT(-1);
    setState(792);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 74, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<ComparisonExpressionContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleComparisonExpression);
        setState(786);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(787);
        comparisonOperator();
        setState(788);
        bitShiftExpression(0); 
      }
      setState(794);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 74, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- BitShiftExpressionContext ------------------------------------------------------------------

qasmParser::BitShiftExpressionContext::BitShiftExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

qasmParser::AdditiveExpressionContext* qasmParser::BitShiftExpressionContext::additiveExpression() {
  return getRuleContext<qasmParser::AdditiveExpressionContext>(0);
}

qasmParser::BitShiftExpressionContext* qasmParser::BitShiftExpressionContext::bitShiftExpression() {
  return getRuleContext<qasmParser::BitShiftExpressionContext>(0);
}


size_t qasmParser::BitShiftExpressionContext::getRuleIndex() const {
  return qasmParser::RuleBitShiftExpression;
}

void qasmParser::BitShiftExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBitShiftExpression(this);
}

void qasmParser::BitShiftExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBitShiftExpression(this);
}


std::any qasmParser::BitShiftExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitBitShiftExpression(this);
  else
    return visitor->visitChildren(this);
}


qasmParser::BitShiftExpressionContext* qasmParser::bitShiftExpression() {
   return bitShiftExpression(0);
}

qasmParser::BitShiftExpressionContext* qasmParser::bitShiftExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  qasmParser::BitShiftExpressionContext *_localctx = _tracker.createInstance<BitShiftExpressionContext>(_ctx, parentState);
  qasmParser::BitShiftExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 144;
  enterRecursionRule(_localctx, 144, qasmParser::RuleBitShiftExpression, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(796);
    additiveExpression(0);
    _ctx->stop = _input->LT(-1);
    setState(803);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 75, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<BitShiftExpressionContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleBitShiftExpression);
        setState(798);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(799);
        _la = _input->LA(1);
        if (!(_la == qasmParser::T__49

        || _la == qasmParser::T__50)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(800);
        additiveExpression(0); 
      }
      setState(805);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 75, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- AdditiveExpressionContext ------------------------------------------------------------------

qasmParser::AdditiveExpressionContext::AdditiveExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

qasmParser::MultiplicativeExpressionContext* qasmParser::AdditiveExpressionContext::multiplicativeExpression() {
  return getRuleContext<qasmParser::MultiplicativeExpressionContext>(0);
}

qasmParser::AdditiveExpressionContext* qasmParser::AdditiveExpressionContext::additiveExpression() {
  return getRuleContext<qasmParser::AdditiveExpressionContext>(0);
}

tree::TerminalNode* qasmParser::AdditiveExpressionContext::PLUS() {
  return getToken(qasmParser::PLUS, 0);
}

tree::TerminalNode* qasmParser::AdditiveExpressionContext::MINUS() {
  return getToken(qasmParser::MINUS, 0);
}


size_t qasmParser::AdditiveExpressionContext::getRuleIndex() const {
  return qasmParser::RuleAdditiveExpression;
}

void qasmParser::AdditiveExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAdditiveExpression(this);
}

void qasmParser::AdditiveExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAdditiveExpression(this);
}


std::any qasmParser::AdditiveExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitAdditiveExpression(this);
  else
    return visitor->visitChildren(this);
}


qasmParser::AdditiveExpressionContext* qasmParser::additiveExpression() {
   return additiveExpression(0);
}

qasmParser::AdditiveExpressionContext* qasmParser::additiveExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  qasmParser::AdditiveExpressionContext *_localctx = _tracker.createInstance<AdditiveExpressionContext>(_ctx, parentState);
  qasmParser::AdditiveExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 146;
  enterRecursionRule(_localctx, 146, qasmParser::RuleAdditiveExpression, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(807);
    multiplicativeExpression(0);
    _ctx->stop = _input->LT(-1);
    setState(814);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 76, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<AdditiveExpressionContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleAdditiveExpression);
        setState(809);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(810);
        _la = _input->LA(1);
        if (!(_la == qasmParser::PLUS

        || _la == qasmParser::MINUS)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(811);
        multiplicativeExpression(0); 
      }
      setState(816);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 76, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- MultiplicativeExpressionContext ------------------------------------------------------------------

qasmParser::MultiplicativeExpressionContext::MultiplicativeExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

qasmParser::UnaryExpressionContext* qasmParser::MultiplicativeExpressionContext::unaryExpression() {
  return getRuleContext<qasmParser::UnaryExpressionContext>(0);
}

qasmParser::MultiplicativeExpressionContext* qasmParser::MultiplicativeExpressionContext::multiplicativeExpression() {
  return getRuleContext<qasmParser::MultiplicativeExpressionContext>(0);
}

tree::TerminalNode* qasmParser::MultiplicativeExpressionContext::MUL() {
  return getToken(qasmParser::MUL, 0);
}

tree::TerminalNode* qasmParser::MultiplicativeExpressionContext::DIV() {
  return getToken(qasmParser::DIV, 0);
}

tree::TerminalNode* qasmParser::MultiplicativeExpressionContext::MOD() {
  return getToken(qasmParser::MOD, 0);
}


size_t qasmParser::MultiplicativeExpressionContext::getRuleIndex() const {
  return qasmParser::RuleMultiplicativeExpression;
}

void qasmParser::MultiplicativeExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultiplicativeExpression(this);
}

void qasmParser::MultiplicativeExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultiplicativeExpression(this);
}


std::any qasmParser::MultiplicativeExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitMultiplicativeExpression(this);
  else
    return visitor->visitChildren(this);
}


qasmParser::MultiplicativeExpressionContext* qasmParser::multiplicativeExpression() {
   return multiplicativeExpression(0);
}

qasmParser::MultiplicativeExpressionContext* qasmParser::multiplicativeExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  qasmParser::MultiplicativeExpressionContext *_localctx = _tracker.createInstance<MultiplicativeExpressionContext>(_ctx, parentState);
  qasmParser::MultiplicativeExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 148;
  enterRecursionRule(_localctx, 148, qasmParser::RuleMultiplicativeExpression, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(818);
    unaryExpression();
    _ctx->stop = _input->LT(-1);
    setState(825);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 77, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<MultiplicativeExpressionContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleMultiplicativeExpression);
        setState(820);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(821);
        _la = _input->LA(1);
        if (!(((((_la - 114) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 114)) & ((1ULL << (qasmParser::MUL - 114))
          | (1ULL << (qasmParser::DIV - 114))
          | (1ULL << (qasmParser::MOD - 114)))) != 0))) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(822);
        unaryExpression(); 
      }
      setState(827);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 77, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- UnaryExpressionContext ------------------------------------------------------------------

qasmParser::UnaryExpressionContext::UnaryExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

qasmParser::PowerExpressionContext* qasmParser::UnaryExpressionContext::powerExpression() {
  return getRuleContext<qasmParser::PowerExpressionContext>(0);
}

qasmParser::UnaryOperatorContext* qasmParser::UnaryExpressionContext::unaryOperator() {
  return getRuleContext<qasmParser::UnaryOperatorContext>(0);
}


size_t qasmParser::UnaryExpressionContext::getRuleIndex() const {
  return qasmParser::RuleUnaryExpression;
}

void qasmParser::UnaryExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnaryExpression(this);
}

void qasmParser::UnaryExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnaryExpression(this);
}


std::any qasmParser::UnaryExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitUnaryExpression(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::UnaryExpressionContext* qasmParser::unaryExpression() {
  UnaryExpressionContext *_localctx = _tracker.createInstance<UnaryExpressionContext>(_ctx, getState());
  enterRule(_localctx, 150, qasmParser::RuleUnaryExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(829);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == qasmParser::T__36

    || _la == qasmParser::T__37 || _la == qasmParser::MINUS) {
      setState(828);
      unaryOperator();
    }
    setState(831);
    powerExpression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PowerExpressionContext ------------------------------------------------------------------

qasmParser::PowerExpressionContext::PowerExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

qasmParser::IndexExpressionContext* qasmParser::PowerExpressionContext::indexExpression() {
  return getRuleContext<qasmParser::IndexExpressionContext>(0);
}

qasmParser::PowerExpressionContext* qasmParser::PowerExpressionContext::powerExpression() {
  return getRuleContext<qasmParser::PowerExpressionContext>(0);
}


size_t qasmParser::PowerExpressionContext::getRuleIndex() const {
  return qasmParser::RulePowerExpression;
}

void qasmParser::PowerExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPowerExpression(this);
}

void qasmParser::PowerExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPowerExpression(this);
}


std::any qasmParser::PowerExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitPowerExpression(this);
  else
    return visitor->visitChildren(this);
}


qasmParser::PowerExpressionContext* qasmParser::powerExpression() {
   return powerExpression(0);
}

qasmParser::PowerExpressionContext* qasmParser::powerExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  qasmParser::PowerExpressionContext *_localctx = _tracker.createInstance<PowerExpressionContext>(_ctx, parentState);
  qasmParser::PowerExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 152;
  enterRecursionRule(_localctx, 152, qasmParser::RulePowerExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(834);
    indexExpression(0);
    _ctx->stop = _input->LT(-1);
    setState(841);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 79, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<PowerExpressionContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RulePowerExpression);
        setState(836);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(837);
        match(qasmParser::T__51);
        setState(838);
        indexExpression(0); 
      }
      setState(843);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 79, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- IndexOperatorContext ------------------------------------------------------------------

qasmParser::IndexOperatorContext::IndexOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* qasmParser::IndexOperatorContext::LBRACKET() {
  return getToken(qasmParser::LBRACKET, 0);
}

tree::TerminalNode* qasmParser::IndexOperatorContext::RBRACKET() {
  return getToken(qasmParser::RBRACKET, 0);
}

qasmParser::DiscreteSetContext* qasmParser::IndexOperatorContext::discreteSet() {
  return getRuleContext<qasmParser::DiscreteSetContext>(0);
}

std::vector<qasmParser::ExpressionContext *> qasmParser::IndexOperatorContext::expression() {
  return getRuleContexts<qasmParser::ExpressionContext>();
}

qasmParser::ExpressionContext* qasmParser::IndexOperatorContext::expression(size_t i) {
  return getRuleContext<qasmParser::ExpressionContext>(i);
}

std::vector<qasmParser::RangeDefinitionContext *> qasmParser::IndexOperatorContext::rangeDefinition() {
  return getRuleContexts<qasmParser::RangeDefinitionContext>();
}

qasmParser::RangeDefinitionContext* qasmParser::IndexOperatorContext::rangeDefinition(size_t i) {
  return getRuleContext<qasmParser::RangeDefinitionContext>(i);
}

std::vector<tree::TerminalNode *> qasmParser::IndexOperatorContext::COMMA() {
  return getTokens(qasmParser::COMMA);
}

tree::TerminalNode* qasmParser::IndexOperatorContext::COMMA(size_t i) {
  return getToken(qasmParser::COMMA, i);
}


size_t qasmParser::IndexOperatorContext::getRuleIndex() const {
  return qasmParser::RuleIndexOperator;
}

void qasmParser::IndexOperatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIndexOperator(this);
}

void qasmParser::IndexOperatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIndexOperator(this);
}


std::any qasmParser::IndexOperatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitIndexOperator(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::IndexOperatorContext* qasmParser::indexOperator() {
  IndexOperatorContext *_localctx = _tracker.createInstance<IndexOperatorContext>(_ctx, getState());
  enterRule(_localctx, 154, qasmParser::RuleIndexOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(844);
    match(qasmParser::LBRACKET);
    setState(860);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case qasmParser::LBRACE: {
        setState(845);
        discreteSet();
        break;
      }

      case qasmParser::T__6:
      case qasmParser::T__7:
      case qasmParser::T__8:
      case qasmParser::T__9:
      case qasmParser::T__10:
      case qasmParser::T__11:
      case qasmParser::T__12:
      case qasmParser::T__36:
      case qasmParser::T__37:
      case qasmParser::T__52:
      case qasmParser::T__53:
      case qasmParser::T__54:
      case qasmParser::T__55:
      case qasmParser::T__56:
      case qasmParser::T__57:
      case qasmParser::T__58:
      case qasmParser::T__59:
      case qasmParser::T__60:
      case qasmParser::T__61:
      case qasmParser::T__62:
      case qasmParser::T__63:
      case qasmParser::T__64:
      case qasmParser::T__65:
      case qasmParser::T__90:
      case qasmParser::T__91:
      case qasmParser::T__93:
      case qasmParser::LPAREN:
      case qasmParser::COLON:
      case qasmParser::MINUS:
      case qasmParser::ImagNumber:
      case qasmParser::COMPLEX:
      case qasmParser::ARRAY:
      case qasmParser::SIZEOF:
      case qasmParser::Constant:
      case qasmParser::Integer:
      case qasmParser::Identifier:
      case qasmParser::RealNumber:
      case qasmParser::TimingLiteral:
      case qasmParser::StringLiteral: {
        setState(848);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 80, _ctx)) {
        case 1: {
          setState(846);
          expression(0);
          break;
        }

        case 2: {
          setState(847);
          rangeDefinition();
          break;
        }

        default:
          break;
        }
        setState(857);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == qasmParser::COMMA) {
          setState(850);
          match(qasmParser::COMMA);
          setState(853);
          _errHandler->sync(this);
          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 81, _ctx)) {
          case 1: {
            setState(851);
            expression(0);
            break;
          }

          case 2: {
            setState(852);
            rangeDefinition();
            break;
          }

          default:
            break;
          }
          setState(859);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(862);
    match(qasmParser::RBRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IndexExpressionContext ------------------------------------------------------------------

qasmParser::IndexExpressionContext::IndexExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

qasmParser::ExpressionTerminatorContext* qasmParser::IndexExpressionContext::expressionTerminator() {
  return getRuleContext<qasmParser::ExpressionTerminatorContext>(0);
}

qasmParser::IndexExpressionContext* qasmParser::IndexExpressionContext::indexExpression() {
  return getRuleContext<qasmParser::IndexExpressionContext>(0);
}

qasmParser::IndexOperatorContext* qasmParser::IndexExpressionContext::indexOperator() {
  return getRuleContext<qasmParser::IndexOperatorContext>(0);
}


size_t qasmParser::IndexExpressionContext::getRuleIndex() const {
  return qasmParser::RuleIndexExpression;
}

void qasmParser::IndexExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIndexExpression(this);
}

void qasmParser::IndexExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIndexExpression(this);
}


std::any qasmParser::IndexExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitIndexExpression(this);
  else
    return visitor->visitChildren(this);
}


qasmParser::IndexExpressionContext* qasmParser::indexExpression() {
   return indexExpression(0);
}

qasmParser::IndexExpressionContext* qasmParser::indexExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  qasmParser::IndexExpressionContext *_localctx = _tracker.createInstance<IndexExpressionContext>(_ctx, parentState);
  qasmParser::IndexExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 156;
  enterRecursionRule(_localctx, 156, qasmParser::RuleIndexExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(865);
    expressionTerminator();
    _ctx->stop = _input->LT(-1);
    setState(871);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 84, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<IndexExpressionContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleIndexExpression);
        setState(867);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(868);
        indexOperator(); 
      }
      setState(873);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 84, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- IndexedIdentifierContext ------------------------------------------------------------------

qasmParser::IndexedIdentifierContext::IndexedIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* qasmParser::IndexedIdentifierContext::Identifier() {
  return getToken(qasmParser::Identifier, 0);
}

std::vector<qasmParser::IndexOperatorContext *> qasmParser::IndexedIdentifierContext::indexOperator() {
  return getRuleContexts<qasmParser::IndexOperatorContext>();
}

qasmParser::IndexOperatorContext* qasmParser::IndexedIdentifierContext::indexOperator(size_t i) {
  return getRuleContext<qasmParser::IndexOperatorContext>(i);
}


size_t qasmParser::IndexedIdentifierContext::getRuleIndex() const {
  return qasmParser::RuleIndexedIdentifier;
}

void qasmParser::IndexedIdentifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIndexedIdentifier(this);
}

void qasmParser::IndexedIdentifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIndexedIdentifier(this);
}


std::any qasmParser::IndexedIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitIndexedIdentifier(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::IndexedIdentifierContext* qasmParser::indexedIdentifier() {
  IndexedIdentifierContext *_localctx = _tracker.createInstance<IndexedIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 158, qasmParser::RuleIndexedIdentifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(874);
    match(qasmParser::Identifier);
    setState(878);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == qasmParser::LBRACKET) {
      setState(875);
      indexOperator();
      setState(880);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionTerminatorContext ------------------------------------------------------------------

qasmParser::ExpressionTerminatorContext::ExpressionTerminatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* qasmParser::ExpressionTerminatorContext::Constant() {
  return getToken(qasmParser::Constant, 0);
}

tree::TerminalNode* qasmParser::ExpressionTerminatorContext::Integer() {
  return getToken(qasmParser::Integer, 0);
}

tree::TerminalNode* qasmParser::ExpressionTerminatorContext::RealNumber() {
  return getToken(qasmParser::RealNumber, 0);
}

tree::TerminalNode* qasmParser::ExpressionTerminatorContext::ImagNumber() {
  return getToken(qasmParser::ImagNumber, 0);
}

qasmParser::BooleanLiteralContext* qasmParser::ExpressionTerminatorContext::booleanLiteral() {
  return getRuleContext<qasmParser::BooleanLiteralContext>(0);
}

tree::TerminalNode* qasmParser::ExpressionTerminatorContext::Identifier() {
  return getToken(qasmParser::Identifier, 0);
}

tree::TerminalNode* qasmParser::ExpressionTerminatorContext::StringLiteral() {
  return getToken(qasmParser::StringLiteral, 0);
}

qasmParser::BuiltInCallContext* qasmParser::ExpressionTerminatorContext::builtInCall() {
  return getRuleContext<qasmParser::BuiltInCallContext>(0);
}

qasmParser::ExternOrSubroutineCallContext* qasmParser::ExpressionTerminatorContext::externOrSubroutineCall() {
  return getRuleContext<qasmParser::ExternOrSubroutineCallContext>(0);
}

qasmParser::TimingIdentifierContext* qasmParser::ExpressionTerminatorContext::timingIdentifier() {
  return getRuleContext<qasmParser::TimingIdentifierContext>(0);
}

tree::TerminalNode* qasmParser::ExpressionTerminatorContext::LPAREN() {
  return getToken(qasmParser::LPAREN, 0);
}

qasmParser::ExpressionContext* qasmParser::ExpressionTerminatorContext::expression() {
  return getRuleContext<qasmParser::ExpressionContext>(0);
}

tree::TerminalNode* qasmParser::ExpressionTerminatorContext::RPAREN() {
  return getToken(qasmParser::RPAREN, 0);
}


size_t qasmParser::ExpressionTerminatorContext::getRuleIndex() const {
  return qasmParser::RuleExpressionTerminator;
}

void qasmParser::ExpressionTerminatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpressionTerminator(this);
}

void qasmParser::ExpressionTerminatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpressionTerminator(this);
}


std::any qasmParser::ExpressionTerminatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitExpressionTerminator(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::ExpressionTerminatorContext* qasmParser::expressionTerminator() {
  ExpressionTerminatorContext *_localctx = _tracker.createInstance<ExpressionTerminatorContext>(_ctx, getState());
  enterRule(_localctx, 160, qasmParser::RuleExpressionTerminator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(895);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 86, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(881);
      match(qasmParser::Constant);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(882);
      match(qasmParser::Integer);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(883);
      match(qasmParser::RealNumber);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(884);
      match(qasmParser::ImagNumber);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(885);
      booleanLiteral();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(886);
      match(qasmParser::Identifier);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(887);
      match(qasmParser::StringLiteral);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(888);
      builtInCall();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(889);
      externOrSubroutineCall();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(890);
      timingIdentifier();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(891);
      match(qasmParser::LPAREN);
      setState(892);
      expression(0);
      setState(893);
      match(qasmParser::RPAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BooleanLiteralContext ------------------------------------------------------------------

qasmParser::BooleanLiteralContext::BooleanLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t qasmParser::BooleanLiteralContext::getRuleIndex() const {
  return qasmParser::RuleBooleanLiteral;
}

void qasmParser::BooleanLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBooleanLiteral(this);
}

void qasmParser::BooleanLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBooleanLiteral(this);
}


std::any qasmParser::BooleanLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitBooleanLiteral(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::BooleanLiteralContext* qasmParser::booleanLiteral() {
  BooleanLiteralContext *_localctx = _tracker.createInstance<BooleanLiteralContext>(_ctx, getState());
  enterRule(_localctx, 162, qasmParser::RuleBooleanLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(897);
    _la = _input->LA(1);
    if (!(_la == qasmParser::T__52

    || _la == qasmParser::T__53)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BuiltInCallContext ------------------------------------------------------------------

qasmParser::BuiltInCallContext::BuiltInCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* qasmParser::BuiltInCallContext::LPAREN() {
  return getToken(qasmParser::LPAREN, 0);
}

qasmParser::ExpressionListContext* qasmParser::BuiltInCallContext::expressionList() {
  return getRuleContext<qasmParser::ExpressionListContext>(0);
}

tree::TerminalNode* qasmParser::BuiltInCallContext::RPAREN() {
  return getToken(qasmParser::RPAREN, 0);
}

qasmParser::BuiltInMathContext* qasmParser::BuiltInCallContext::builtInMath() {
  return getRuleContext<qasmParser::BuiltInMathContext>(0);
}

qasmParser::CastOperatorContext* qasmParser::BuiltInCallContext::castOperator() {
  return getRuleContext<qasmParser::CastOperatorContext>(0);
}

tree::TerminalNode* qasmParser::BuiltInCallContext::SIZEOF() {
  return getToken(qasmParser::SIZEOF, 0);
}


size_t qasmParser::BuiltInCallContext::getRuleIndex() const {
  return qasmParser::RuleBuiltInCall;
}

void qasmParser::BuiltInCallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBuiltInCall(this);
}

void qasmParser::BuiltInCallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBuiltInCall(this);
}


std::any qasmParser::BuiltInCallContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitBuiltInCall(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::BuiltInCallContext* qasmParser::builtInCall() {
  BuiltInCallContext *_localctx = _tracker.createInstance<BuiltInCallContext>(_ctx, getState());
  enterRule(_localctx, 164, qasmParser::RuleBuiltInCall);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(902);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case qasmParser::T__54:
      case qasmParser::T__55:
      case qasmParser::T__56:
      case qasmParser::T__57:
      case qasmParser::T__58:
      case qasmParser::T__59:
      case qasmParser::T__60:
      case qasmParser::T__61:
      case qasmParser::T__62:
      case qasmParser::T__63:
      case qasmParser::T__64:
      case qasmParser::T__65: {
        setState(899);
        builtInMath();
        break;
      }

      case qasmParser::T__6:
      case qasmParser::T__7:
      case qasmParser::T__8:
      case qasmParser::T__9:
      case qasmParser::T__10:
      case qasmParser::T__11:
      case qasmParser::T__12:
      case qasmParser::T__90:
      case qasmParser::T__91:
      case qasmParser::COMPLEX:
      case qasmParser::ARRAY: {
        setState(900);
        castOperator();
        break;
      }

      case qasmParser::SIZEOF: {
        setState(901);
        match(qasmParser::SIZEOF);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(904);
    match(qasmParser::LPAREN);
    setState(905);
    expressionList();
    setState(906);
    match(qasmParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BuiltInMathContext ------------------------------------------------------------------

qasmParser::BuiltInMathContext::BuiltInMathContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t qasmParser::BuiltInMathContext::getRuleIndex() const {
  return qasmParser::RuleBuiltInMath;
}

void qasmParser::BuiltInMathContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBuiltInMath(this);
}

void qasmParser::BuiltInMathContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBuiltInMath(this);
}


std::any qasmParser::BuiltInMathContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitBuiltInMath(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::BuiltInMathContext* qasmParser::builtInMath() {
  BuiltInMathContext *_localctx = _tracker.createInstance<BuiltInMathContext>(_ctx, getState());
  enterRule(_localctx, 166, qasmParser::RuleBuiltInMath);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(908);
    _la = _input->LA(1);
    if (!(((((_la - 55) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 55)) & ((1ULL << (qasmParser::T__54 - 55))
      | (1ULL << (qasmParser::T__55 - 55))
      | (1ULL << (qasmParser::T__56 - 55))
      | (1ULL << (qasmParser::T__57 - 55))
      | (1ULL << (qasmParser::T__58 - 55))
      | (1ULL << (qasmParser::T__59 - 55))
      | (1ULL << (qasmParser::T__60 - 55))
      | (1ULL << (qasmParser::T__61 - 55))
      | (1ULL << (qasmParser::T__62 - 55))
      | (1ULL << (qasmParser::T__63 - 55))
      | (1ULL << (qasmParser::T__64 - 55))
      | (1ULL << (qasmParser::T__65 - 55)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CastOperatorContext ------------------------------------------------------------------

qasmParser::CastOperatorContext::CastOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

qasmParser::ClassicalTypeContext* qasmParser::CastOperatorContext::classicalType() {
  return getRuleContext<qasmParser::ClassicalTypeContext>(0);
}


size_t qasmParser::CastOperatorContext::getRuleIndex() const {
  return qasmParser::RuleCastOperator;
}

void qasmParser::CastOperatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCastOperator(this);
}

void qasmParser::CastOperatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCastOperator(this);
}


std::any qasmParser::CastOperatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitCastOperator(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::CastOperatorContext* qasmParser::castOperator() {
  CastOperatorContext *_localctx = _tracker.createInstance<CastOperatorContext>(_ctx, getState());
  enterRule(_localctx, 168, qasmParser::RuleCastOperator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(910);
    classicalType();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionListContext ------------------------------------------------------------------

qasmParser::ExpressionListContext::ExpressionListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<qasmParser::ExpressionContext *> qasmParser::ExpressionListContext::expression() {
  return getRuleContexts<qasmParser::ExpressionContext>();
}

qasmParser::ExpressionContext* qasmParser::ExpressionListContext::expression(size_t i) {
  return getRuleContext<qasmParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> qasmParser::ExpressionListContext::COMMA() {
  return getTokens(qasmParser::COMMA);
}

tree::TerminalNode* qasmParser::ExpressionListContext::COMMA(size_t i) {
  return getToken(qasmParser::COMMA, i);
}


size_t qasmParser::ExpressionListContext::getRuleIndex() const {
  return qasmParser::RuleExpressionList;
}

void qasmParser::ExpressionListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpressionList(this);
}

void qasmParser::ExpressionListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpressionList(this);
}


std::any qasmParser::ExpressionListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitExpressionList(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::ExpressionListContext* qasmParser::expressionList() {
  ExpressionListContext *_localctx = _tracker.createInstance<ExpressionListContext>(_ctx, getState());
  enterRule(_localctx, 170, qasmParser::RuleExpressionList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(912);
    expression(0);
    setState(917);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == qasmParser::COMMA) {
      setState(913);
      match(qasmParser::COMMA);
      setState(914);
      expression(0);
      setState(919);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EqualsExpressionContext ------------------------------------------------------------------

qasmParser::EqualsExpressionContext::EqualsExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* qasmParser::EqualsExpressionContext::EQUALS() {
  return getToken(qasmParser::EQUALS, 0);
}

qasmParser::ExpressionContext* qasmParser::EqualsExpressionContext::expression() {
  return getRuleContext<qasmParser::ExpressionContext>(0);
}


size_t qasmParser::EqualsExpressionContext::getRuleIndex() const {
  return qasmParser::RuleEqualsExpression;
}

void qasmParser::EqualsExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEqualsExpression(this);
}

void qasmParser::EqualsExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEqualsExpression(this);
}


std::any qasmParser::EqualsExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitEqualsExpression(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::EqualsExpressionContext* qasmParser::equalsExpression() {
  EqualsExpressionContext *_localctx = _tracker.createInstance<EqualsExpressionContext>(_ctx, getState());
  enterRule(_localctx, 172, qasmParser::RuleEqualsExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(920);
    match(qasmParser::EQUALS);
    setState(921);
    expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssignmentOperatorContext ------------------------------------------------------------------

qasmParser::AssignmentOperatorContext::AssignmentOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* qasmParser::AssignmentOperatorContext::EQUALS() {
  return getToken(qasmParser::EQUALS, 0);
}


size_t qasmParser::AssignmentOperatorContext::getRuleIndex() const {
  return qasmParser::RuleAssignmentOperator;
}

void qasmParser::AssignmentOperatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssignmentOperator(this);
}

void qasmParser::AssignmentOperatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssignmentOperator(this);
}


std::any qasmParser::AssignmentOperatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitAssignmentOperator(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::AssignmentOperatorContext* qasmParser::assignmentOperator() {
  AssignmentOperatorContext *_localctx = _tracker.createInstance<AssignmentOperatorContext>(_ctx, getState());
  enterRule(_localctx, 174, qasmParser::RuleAssignmentOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(923);
    _la = _input->LA(1);
    if (!(((((_la - 67) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 67)) & ((1ULL << (qasmParser::T__66 - 67))
      | (1ULL << (qasmParser::T__67 - 67))
      | (1ULL << (qasmParser::T__68 - 67))
      | (1ULL << (qasmParser::T__69 - 67))
      | (1ULL << (qasmParser::T__70 - 67))
      | (1ULL << (qasmParser::T__71 - 67))
      | (1ULL << (qasmParser::T__72 - 67))
      | (1ULL << (qasmParser::T__73 - 67))
      | (1ULL << (qasmParser::T__74 - 67))
      | (1ULL << (qasmParser::T__75 - 67))
      | (1ULL << (qasmParser::T__76 - 67))
      | (1ULL << (qasmParser::T__77 - 67))
      | (1ULL << (qasmParser::EQUALS - 67)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiscreteSetContext ------------------------------------------------------------------

qasmParser::DiscreteSetContext::DiscreteSetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* qasmParser::DiscreteSetContext::LBRACE() {
  return getToken(qasmParser::LBRACE, 0);
}

std::vector<qasmParser::ExpressionContext *> qasmParser::DiscreteSetContext::expression() {
  return getRuleContexts<qasmParser::ExpressionContext>();
}

qasmParser::ExpressionContext* qasmParser::DiscreteSetContext::expression(size_t i) {
  return getRuleContext<qasmParser::ExpressionContext>(i);
}

tree::TerminalNode* qasmParser::DiscreteSetContext::RBRACE() {
  return getToken(qasmParser::RBRACE, 0);
}

std::vector<tree::TerminalNode *> qasmParser::DiscreteSetContext::COMMA() {
  return getTokens(qasmParser::COMMA);
}

tree::TerminalNode* qasmParser::DiscreteSetContext::COMMA(size_t i) {
  return getToken(qasmParser::COMMA, i);
}


size_t qasmParser::DiscreteSetContext::getRuleIndex() const {
  return qasmParser::RuleDiscreteSet;
}

void qasmParser::DiscreteSetContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDiscreteSet(this);
}

void qasmParser::DiscreteSetContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDiscreteSet(this);
}


std::any qasmParser::DiscreteSetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitDiscreteSet(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::DiscreteSetContext* qasmParser::discreteSet() {
  DiscreteSetContext *_localctx = _tracker.createInstance<DiscreteSetContext>(_ctx, getState());
  enterRule(_localctx, 176, qasmParser::RuleDiscreteSet);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(925);
    match(qasmParser::LBRACE);
    setState(926);
    expression(0);
    setState(931);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == qasmParser::COMMA) {
      setState(927);
      match(qasmParser::COMMA);
      setState(928);
      expression(0);
      setState(933);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(934);
    match(qasmParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetDeclarationContext ------------------------------------------------------------------

qasmParser::SetDeclarationContext::SetDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

qasmParser::DiscreteSetContext* qasmParser::SetDeclarationContext::discreteSet() {
  return getRuleContext<qasmParser::DiscreteSetContext>(0);
}

tree::TerminalNode* qasmParser::SetDeclarationContext::LBRACKET() {
  return getToken(qasmParser::LBRACKET, 0);
}

qasmParser::RangeDefinitionContext* qasmParser::SetDeclarationContext::rangeDefinition() {
  return getRuleContext<qasmParser::RangeDefinitionContext>(0);
}

tree::TerminalNode* qasmParser::SetDeclarationContext::RBRACKET() {
  return getToken(qasmParser::RBRACKET, 0);
}

tree::TerminalNode* qasmParser::SetDeclarationContext::Identifier() {
  return getToken(qasmParser::Identifier, 0);
}


size_t qasmParser::SetDeclarationContext::getRuleIndex() const {
  return qasmParser::RuleSetDeclaration;
}

void qasmParser::SetDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSetDeclaration(this);
}

void qasmParser::SetDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSetDeclaration(this);
}


std::any qasmParser::SetDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitSetDeclaration(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::SetDeclarationContext* qasmParser::setDeclaration() {
  SetDeclarationContext *_localctx = _tracker.createInstance<SetDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 178, qasmParser::RuleSetDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(942);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case qasmParser::LBRACE: {
        enterOuterAlt(_localctx, 1);
        setState(936);
        discreteSet();
        break;
      }

      case qasmParser::LBRACKET: {
        enterOuterAlt(_localctx, 2);
        setState(937);
        match(qasmParser::LBRACKET);
        setState(938);
        rangeDefinition();
        setState(939);
        match(qasmParser::RBRACKET);
        break;
      }

      case qasmParser::Identifier: {
        enterOuterAlt(_localctx, 3);
        setState(941);
        match(qasmParser::Identifier);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProgramBlockContext ------------------------------------------------------------------

qasmParser::ProgramBlockContext::ProgramBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<qasmParser::StatementContext *> qasmParser::ProgramBlockContext::statement() {
  return getRuleContexts<qasmParser::StatementContext>();
}

qasmParser::StatementContext* qasmParser::ProgramBlockContext::statement(size_t i) {
  return getRuleContext<qasmParser::StatementContext>(i);
}

std::vector<qasmParser::ControlDirectiveContext *> qasmParser::ProgramBlockContext::controlDirective() {
  return getRuleContexts<qasmParser::ControlDirectiveContext>();
}

qasmParser::ControlDirectiveContext* qasmParser::ProgramBlockContext::controlDirective(size_t i) {
  return getRuleContext<qasmParser::ControlDirectiveContext>(i);
}

tree::TerminalNode* qasmParser::ProgramBlockContext::LBRACE() {
  return getToken(qasmParser::LBRACE, 0);
}

tree::TerminalNode* qasmParser::ProgramBlockContext::RBRACE() {
  return getToken(qasmParser::RBRACE, 0);
}


size_t qasmParser::ProgramBlockContext::getRuleIndex() const {
  return qasmParser::RuleProgramBlock;
}

void qasmParser::ProgramBlockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProgramBlock(this);
}

void qasmParser::ProgramBlockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProgramBlock(this);
}


std::any qasmParser::ProgramBlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitProgramBlock(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::ProgramBlockContext* qasmParser::programBlock() {
  ProgramBlockContext *_localctx = _tracker.createInstance<ProgramBlockContext>(_ctx, getState());
  enterRule(_localctx, 180, qasmParser::RuleProgramBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(955);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 93, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(944);
      statement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(945);
      controlDirective();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(946);
      match(qasmParser::LBRACE);
      setState(951);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (((((_la - 7) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 7)) & ((1ULL << (qasmParser::T__6 - 7))
        | (1ULL << (qasmParser::T__7 - 7))
        | (1ULL << (qasmParser::T__8 - 7))
        | (1ULL << (qasmParser::T__9 - 7))
        | (1ULL << (qasmParser::T__10 - 7))
        | (1ULL << (qasmParser::T__11 - 7))
        | (1ULL << (qasmParser::T__12 - 7))
        | (1ULL << (qasmParser::T__13 - 7))
        | (1ULL << (qasmParser::T__16 - 7))
        | (1ULL << (qasmParser::T__17 - 7))
        | (1ULL << (qasmParser::T__18 - 7))
        | (1ULL << (qasmParser::T__19 - 7))
        | (1ULL << (qasmParser::T__20 - 7))
        | (1ULL << (qasmParser::T__21 - 7))
        | (1ULL << (qasmParser::T__22 - 7))
        | (1ULL << (qasmParser::T__23 - 7))
        | (1ULL << (qasmParser::T__24 - 7))
        | (1ULL << (qasmParser::T__25 - 7))
        | (1ULL << (qasmParser::T__26 - 7))
        | (1ULL << (qasmParser::T__27 - 7))
        | (1ULL << (qasmParser::T__28 - 7))
        | (1ULL << (qasmParser::T__29 - 7))
        | (1ULL << (qasmParser::T__30 - 7))
        | (1ULL << (qasmParser::T__31 - 7))
        | (1ULL << (qasmParser::T__33 - 7))
        | (1ULL << (qasmParser::T__34 - 7))
        | (1ULL << (qasmParser::T__35 - 7))
        | (1ULL << (qasmParser::T__36 - 7))
        | (1ULL << (qasmParser::T__37 - 7))
        | (1ULL << (qasmParser::T__52 - 7))
        | (1ULL << (qasmParser::T__53 - 7))
        | (1ULL << (qasmParser::T__54 - 7))
        | (1ULL << (qasmParser::T__55 - 7))
        | (1ULL << (qasmParser::T__56 - 7))
        | (1ULL << (qasmParser::T__57 - 7))
        | (1ULL << (qasmParser::T__58 - 7))
        | (1ULL << (qasmParser::T__59 - 7))
        | (1ULL << (qasmParser::T__60 - 7))
        | (1ULL << (qasmParser::T__61 - 7))
        | (1ULL << (qasmParser::T__62 - 7))
        | (1ULL << (qasmParser::T__63 - 7))
        | (1ULL << (qasmParser::T__64 - 7))
        | (1ULL << (qasmParser::T__65 - 7)))) != 0) || ((((_la - 79) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 79)) & ((1ULL << (qasmParser::T__78 - 79))
        | (1ULL << (qasmParser::T__80 - 79))
        | (1ULL << (qasmParser::T__82 - 79))
        | (1ULL << (qasmParser::T__83 - 79))
        | (1ULL << (qasmParser::T__84 - 79))
        | (1ULL << (qasmParser::T__85 - 79))
        | (1ULL << (qasmParser::T__86 - 79))
        | (1ULL << (qasmParser::T__90 - 79))
        | (1ULL << (qasmParser::T__91 - 79))
        | (1ULL << (qasmParser::T__92 - 79))
        | (1ULL << (qasmParser::T__93 - 79))
        | (1ULL << (qasmParser::T__94 - 79))
        | (1ULL << (qasmParser::T__95 - 79))
        | (1ULL << (qasmParser::LPAREN - 79))
        | (1ULL << (qasmParser::MINUS - 79))
        | (1ULL << (qasmParser::ImagNumber - 79))
        | (1ULL << (qasmParser::COMPLEX - 79))
        | (1ULL << (qasmParser::CONST - 79))
        | (1ULL << (qasmParser::ARRAY - 79))
        | (1ULL << (qasmParser::SIZEOF - 79))
        | (1ULL << (qasmParser::Constant - 79))
        | (1ULL << (qasmParser::Integer - 79))
        | (1ULL << (qasmParser::Identifier - 79))
        | (1ULL << (qasmParser::RealNumber - 79))
        | (1ULL << (qasmParser::TimingLiteral - 79))
        | (1ULL << (qasmParser::StringLiteral - 79)))) != 0)) {
        setState(949);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 91, _ctx)) {
        case 1: {
          setState(947);
          statement();
          break;
        }

        case 2: {
          setState(948);
          controlDirective();
          break;
        }

        default:
          break;
        }
        setState(953);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(954);
      match(qasmParser::RBRACE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BranchingStatementContext ------------------------------------------------------------------

qasmParser::BranchingStatementContext::BranchingStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* qasmParser::BranchingStatementContext::LPAREN() {
  return getToken(qasmParser::LPAREN, 0);
}

qasmParser::ExpressionContext* qasmParser::BranchingStatementContext::expression() {
  return getRuleContext<qasmParser::ExpressionContext>(0);
}

tree::TerminalNode* qasmParser::BranchingStatementContext::RPAREN() {
  return getToken(qasmParser::RPAREN, 0);
}

std::vector<qasmParser::ProgramBlockContext *> qasmParser::BranchingStatementContext::programBlock() {
  return getRuleContexts<qasmParser::ProgramBlockContext>();
}

qasmParser::ProgramBlockContext* qasmParser::BranchingStatementContext::programBlock(size_t i) {
  return getRuleContext<qasmParser::ProgramBlockContext>(i);
}


size_t qasmParser::BranchingStatementContext::getRuleIndex() const {
  return qasmParser::RuleBranchingStatement;
}

void qasmParser::BranchingStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBranchingStatement(this);
}

void qasmParser::BranchingStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBranchingStatement(this);
}


std::any qasmParser::BranchingStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitBranchingStatement(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::BranchingStatementContext* qasmParser::branchingStatement() {
  BranchingStatementContext *_localctx = _tracker.createInstance<BranchingStatementContext>(_ctx, getState());
  enterRule(_localctx, 182, qasmParser::RuleBranchingStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(957);
    match(qasmParser::T__78);
    setState(958);
    match(qasmParser::LPAREN);
    setState(959);
    expression(0);
    setState(960);
    match(qasmParser::RPAREN);
    setState(961);
    programBlock();
    setState(964);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 94, _ctx)) {
    case 1: {
      setState(962);
      match(qasmParser::T__79);
      setState(963);
      programBlock();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LoopSignatureContext ------------------------------------------------------------------

qasmParser::LoopSignatureContext::LoopSignatureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* qasmParser::LoopSignatureContext::Identifier() {
  return getToken(qasmParser::Identifier, 0);
}

qasmParser::SetDeclarationContext* qasmParser::LoopSignatureContext::setDeclaration() {
  return getRuleContext<qasmParser::SetDeclarationContext>(0);
}

tree::TerminalNode* qasmParser::LoopSignatureContext::LPAREN() {
  return getToken(qasmParser::LPAREN, 0);
}

qasmParser::ExpressionContext* qasmParser::LoopSignatureContext::expression() {
  return getRuleContext<qasmParser::ExpressionContext>(0);
}

tree::TerminalNode* qasmParser::LoopSignatureContext::RPAREN() {
  return getToken(qasmParser::RPAREN, 0);
}


size_t qasmParser::LoopSignatureContext::getRuleIndex() const {
  return qasmParser::RuleLoopSignature;
}

void qasmParser::LoopSignatureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLoopSignature(this);
}

void qasmParser::LoopSignatureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLoopSignature(this);
}


std::any qasmParser::LoopSignatureContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitLoopSignature(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::LoopSignatureContext* qasmParser::loopSignature() {
  LoopSignatureContext *_localctx = _tracker.createInstance<LoopSignatureContext>(_ctx, getState());
  enterRule(_localctx, 184, qasmParser::RuleLoopSignature);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(975);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case qasmParser::T__80: {
        enterOuterAlt(_localctx, 1);
        setState(966);
        match(qasmParser::T__80);
        setState(967);
        match(qasmParser::Identifier);
        setState(968);
        match(qasmParser::T__81);
        setState(969);
        setDeclaration();
        break;
      }

      case qasmParser::T__82: {
        enterOuterAlt(_localctx, 2);
        setState(970);
        match(qasmParser::T__82);
        setState(971);
        match(qasmParser::LPAREN);
        setState(972);
        expression(0);
        setState(973);
        match(qasmParser::RPAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LoopStatementContext ------------------------------------------------------------------

qasmParser::LoopStatementContext::LoopStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

qasmParser::LoopSignatureContext* qasmParser::LoopStatementContext::loopSignature() {
  return getRuleContext<qasmParser::LoopSignatureContext>(0);
}

qasmParser::ProgramBlockContext* qasmParser::LoopStatementContext::programBlock() {
  return getRuleContext<qasmParser::ProgramBlockContext>(0);
}


size_t qasmParser::LoopStatementContext::getRuleIndex() const {
  return qasmParser::RuleLoopStatement;
}

void qasmParser::LoopStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLoopStatement(this);
}

void qasmParser::LoopStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLoopStatement(this);
}


std::any qasmParser::LoopStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitLoopStatement(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::LoopStatementContext* qasmParser::loopStatement() {
  LoopStatementContext *_localctx = _tracker.createInstance<LoopStatementContext>(_ctx, getState());
  enterRule(_localctx, 186, qasmParser::RuleLoopStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(977);
    loopSignature();
    setState(978);
    programBlock();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EndStatementContext ------------------------------------------------------------------

qasmParser::EndStatementContext::EndStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* qasmParser::EndStatementContext::SEMICOLON() {
  return getToken(qasmParser::SEMICOLON, 0);
}


size_t qasmParser::EndStatementContext::getRuleIndex() const {
  return qasmParser::RuleEndStatement;
}

void qasmParser::EndStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEndStatement(this);
}

void qasmParser::EndStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEndStatement(this);
}


std::any qasmParser::EndStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitEndStatement(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::EndStatementContext* qasmParser::endStatement() {
  EndStatementContext *_localctx = _tracker.createInstance<EndStatementContext>(_ctx, getState());
  enterRule(_localctx, 188, qasmParser::RuleEndStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(980);
    match(qasmParser::T__83);
    setState(981);
    match(qasmParser::SEMICOLON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReturnStatementContext ------------------------------------------------------------------

qasmParser::ReturnStatementContext::ReturnStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* qasmParser::ReturnStatementContext::SEMICOLON() {
  return getToken(qasmParser::SEMICOLON, 0);
}

qasmParser::ExpressionContext* qasmParser::ReturnStatementContext::expression() {
  return getRuleContext<qasmParser::ExpressionContext>(0);
}

qasmParser::QuantumMeasurementContext* qasmParser::ReturnStatementContext::quantumMeasurement() {
  return getRuleContext<qasmParser::QuantumMeasurementContext>(0);
}


size_t qasmParser::ReturnStatementContext::getRuleIndex() const {
  return qasmParser::RuleReturnStatement;
}

void qasmParser::ReturnStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReturnStatement(this);
}

void qasmParser::ReturnStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReturnStatement(this);
}


std::any qasmParser::ReturnStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitReturnStatement(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::ReturnStatementContext* qasmParser::returnStatement() {
  ReturnStatementContext *_localctx = _tracker.createInstance<ReturnStatementContext>(_ctx, getState());
  enterRule(_localctx, 190, qasmParser::RuleReturnStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(983);
    match(qasmParser::T__84);
    setState(986);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case qasmParser::T__6:
      case qasmParser::T__7:
      case qasmParser::T__8:
      case qasmParser::T__9:
      case qasmParser::T__10:
      case qasmParser::T__11:
      case qasmParser::T__12:
      case qasmParser::T__36:
      case qasmParser::T__37:
      case qasmParser::T__52:
      case qasmParser::T__53:
      case qasmParser::T__54:
      case qasmParser::T__55:
      case qasmParser::T__56:
      case qasmParser::T__57:
      case qasmParser::T__58:
      case qasmParser::T__59:
      case qasmParser::T__60:
      case qasmParser::T__61:
      case qasmParser::T__62:
      case qasmParser::T__63:
      case qasmParser::T__64:
      case qasmParser::T__65:
      case qasmParser::T__90:
      case qasmParser::T__91:
      case qasmParser::T__93:
      case qasmParser::LPAREN:
      case qasmParser::MINUS:
      case qasmParser::ImagNumber:
      case qasmParser::COMPLEX:
      case qasmParser::ARRAY:
      case qasmParser::SIZEOF:
      case qasmParser::Constant:
      case qasmParser::Integer:
      case qasmParser::Identifier:
      case qasmParser::RealNumber:
      case qasmParser::TimingLiteral:
      case qasmParser::StringLiteral: {
        setState(984);
        expression(0);
        break;
      }

      case qasmParser::T__29: {
        setState(985);
        quantumMeasurement();
        break;
      }

      case qasmParser::SEMICOLON: {
        break;
      }

    default:
      break;
    }
    setState(988);
    match(qasmParser::SEMICOLON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ControlDirectiveContext ------------------------------------------------------------------

qasmParser::ControlDirectiveContext::ControlDirectiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* qasmParser::ControlDirectiveContext::SEMICOLON() {
  return getToken(qasmParser::SEMICOLON, 0);
}

qasmParser::EndStatementContext* qasmParser::ControlDirectiveContext::endStatement() {
  return getRuleContext<qasmParser::EndStatementContext>(0);
}

qasmParser::ReturnStatementContext* qasmParser::ControlDirectiveContext::returnStatement() {
  return getRuleContext<qasmParser::ReturnStatementContext>(0);
}


size_t qasmParser::ControlDirectiveContext::getRuleIndex() const {
  return qasmParser::RuleControlDirective;
}

void qasmParser::ControlDirectiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterControlDirective(this);
}

void qasmParser::ControlDirectiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitControlDirective(this);
}


std::any qasmParser::ControlDirectiveContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitControlDirective(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::ControlDirectiveContext* qasmParser::controlDirective() {
  ControlDirectiveContext *_localctx = _tracker.createInstance<ControlDirectiveContext>(_ctx, getState());
  enterRule(_localctx, 192, qasmParser::RuleControlDirective);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(994);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case qasmParser::T__85:
      case qasmParser::T__86: {
        enterOuterAlt(_localctx, 1);
        setState(990);
        _la = _input->LA(1);
        if (!(_la == qasmParser::T__85

        || _la == qasmParser::T__86)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(991);
        match(qasmParser::SEMICOLON);
        break;
      }

      case qasmParser::T__83: {
        enterOuterAlt(_localctx, 2);
        setState(992);
        endStatement();
        break;
      }

      case qasmParser::T__84: {
        enterOuterAlt(_localctx, 3);
        setState(993);
        returnStatement();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExternDeclarationContext ------------------------------------------------------------------

qasmParser::ExternDeclarationContext::ExternDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* qasmParser::ExternDeclarationContext::Identifier() {
  return getToken(qasmParser::Identifier, 0);
}

tree::TerminalNode* qasmParser::ExternDeclarationContext::LPAREN() {
  return getToken(qasmParser::LPAREN, 0);
}

tree::TerminalNode* qasmParser::ExternDeclarationContext::RPAREN() {
  return getToken(qasmParser::RPAREN, 0);
}

tree::TerminalNode* qasmParser::ExternDeclarationContext::SEMICOLON() {
  return getToken(qasmParser::SEMICOLON, 0);
}

qasmParser::ClassicalTypeListContext* qasmParser::ExternDeclarationContext::classicalTypeList() {
  return getRuleContext<qasmParser::ClassicalTypeListContext>(0);
}

qasmParser::ReturnSignatureContext* qasmParser::ExternDeclarationContext::returnSignature() {
  return getRuleContext<qasmParser::ReturnSignatureContext>(0);
}


size_t qasmParser::ExternDeclarationContext::getRuleIndex() const {
  return qasmParser::RuleExternDeclaration;
}

void qasmParser::ExternDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExternDeclaration(this);
}

void qasmParser::ExternDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExternDeclaration(this);
}


std::any qasmParser::ExternDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitExternDeclaration(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::ExternDeclarationContext* qasmParser::externDeclaration() {
  ExternDeclarationContext *_localctx = _tracker.createInstance<ExternDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 194, qasmParser::RuleExternDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(996);
    match(qasmParser::T__87);
    setState(997);
    match(qasmParser::Identifier);
    setState(998);
    match(qasmParser::LPAREN);
    setState(1000);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << qasmParser::T__6)
      | (1ULL << qasmParser::T__7)
      | (1ULL << qasmParser::T__8)
      | (1ULL << qasmParser::T__9)
      | (1ULL << qasmParser::T__10)
      | (1ULL << qasmParser::T__11)
      | (1ULL << qasmParser::T__12))) != 0) || ((((_la - 91) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 91)) & ((1ULL << (qasmParser::T__90 - 91))
      | (1ULL << (qasmParser::T__91 - 91))
      | (1ULL << (qasmParser::COMPLEX - 91))
      | (1ULL << (qasmParser::ARRAY - 91)))) != 0)) {
      setState(999);
      classicalTypeList();
    }
    setState(1002);
    match(qasmParser::RPAREN);
    setState(1004);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == qasmParser::ARROW) {
      setState(1003);
      returnSignature();
    }
    setState(1006);
    match(qasmParser::SEMICOLON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExternOrSubroutineCallContext ------------------------------------------------------------------

qasmParser::ExternOrSubroutineCallContext::ExternOrSubroutineCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* qasmParser::ExternOrSubroutineCallContext::Identifier() {
  return getToken(qasmParser::Identifier, 0);
}

tree::TerminalNode* qasmParser::ExternOrSubroutineCallContext::LPAREN() {
  return getToken(qasmParser::LPAREN, 0);
}

tree::TerminalNode* qasmParser::ExternOrSubroutineCallContext::RPAREN() {
  return getToken(qasmParser::RPAREN, 0);
}

qasmParser::ExpressionListContext* qasmParser::ExternOrSubroutineCallContext::expressionList() {
  return getRuleContext<qasmParser::ExpressionListContext>(0);
}


size_t qasmParser::ExternOrSubroutineCallContext::getRuleIndex() const {
  return qasmParser::RuleExternOrSubroutineCall;
}

void qasmParser::ExternOrSubroutineCallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExternOrSubroutineCall(this);
}

void qasmParser::ExternOrSubroutineCallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExternOrSubroutineCall(this);
}


std::any qasmParser::ExternOrSubroutineCallContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitExternOrSubroutineCall(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::ExternOrSubroutineCallContext* qasmParser::externOrSubroutineCall() {
  ExternOrSubroutineCallContext *_localctx = _tracker.createInstance<ExternOrSubroutineCallContext>(_ctx, getState());
  enterRule(_localctx, 196, qasmParser::RuleExternOrSubroutineCall);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1008);
    match(qasmParser::Identifier);
    setState(1009);
    match(qasmParser::LPAREN);
    setState(1011);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 7) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 7)) & ((1ULL << (qasmParser::T__6 - 7))
      | (1ULL << (qasmParser::T__7 - 7))
      | (1ULL << (qasmParser::T__8 - 7))
      | (1ULL << (qasmParser::T__9 - 7))
      | (1ULL << (qasmParser::T__10 - 7))
      | (1ULL << (qasmParser::T__11 - 7))
      | (1ULL << (qasmParser::T__12 - 7))
      | (1ULL << (qasmParser::T__36 - 7))
      | (1ULL << (qasmParser::T__37 - 7))
      | (1ULL << (qasmParser::T__52 - 7))
      | (1ULL << (qasmParser::T__53 - 7))
      | (1ULL << (qasmParser::T__54 - 7))
      | (1ULL << (qasmParser::T__55 - 7))
      | (1ULL << (qasmParser::T__56 - 7))
      | (1ULL << (qasmParser::T__57 - 7))
      | (1ULL << (qasmParser::T__58 - 7))
      | (1ULL << (qasmParser::T__59 - 7))
      | (1ULL << (qasmParser::T__60 - 7))
      | (1ULL << (qasmParser::T__61 - 7))
      | (1ULL << (qasmParser::T__62 - 7))
      | (1ULL << (qasmParser::T__63 - 7))
      | (1ULL << (qasmParser::T__64 - 7))
      | (1ULL << (qasmParser::T__65 - 7)))) != 0) || ((((_la - 91) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 91)) & ((1ULL << (qasmParser::T__90 - 91))
      | (1ULL << (qasmParser::T__91 - 91))
      | (1ULL << (qasmParser::T__93 - 91))
      | (1ULL << (qasmParser::LPAREN - 91))
      | (1ULL << (qasmParser::MINUS - 91))
      | (1ULL << (qasmParser::ImagNumber - 91))
      | (1ULL << (qasmParser::COMPLEX - 91))
      | (1ULL << (qasmParser::ARRAY - 91))
      | (1ULL << (qasmParser::SIZEOF - 91))
      | (1ULL << (qasmParser::Constant - 91))
      | (1ULL << (qasmParser::Integer - 91))
      | (1ULL << (qasmParser::Identifier - 91))
      | (1ULL << (qasmParser::RealNumber - 91))
      | (1ULL << (qasmParser::TimingLiteral - 91))
      | (1ULL << (qasmParser::StringLiteral - 91)))) != 0)) {
      setState(1010);
      expressionList();
    }
    setState(1013);
    match(qasmParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubroutineDefinitionContext ------------------------------------------------------------------

qasmParser::SubroutineDefinitionContext::SubroutineDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* qasmParser::SubroutineDefinitionContext::Identifier() {
  return getToken(qasmParser::Identifier, 0);
}

tree::TerminalNode* qasmParser::SubroutineDefinitionContext::LPAREN() {
  return getToken(qasmParser::LPAREN, 0);
}

tree::TerminalNode* qasmParser::SubroutineDefinitionContext::RPAREN() {
  return getToken(qasmParser::RPAREN, 0);
}

qasmParser::SubroutineBlockContext* qasmParser::SubroutineDefinitionContext::subroutineBlock() {
  return getRuleContext<qasmParser::SubroutineBlockContext>(0);
}

qasmParser::AnyTypeArgumentListContext* qasmParser::SubroutineDefinitionContext::anyTypeArgumentList() {
  return getRuleContext<qasmParser::AnyTypeArgumentListContext>(0);
}

qasmParser::ReturnSignatureContext* qasmParser::SubroutineDefinitionContext::returnSignature() {
  return getRuleContext<qasmParser::ReturnSignatureContext>(0);
}


size_t qasmParser::SubroutineDefinitionContext::getRuleIndex() const {
  return qasmParser::RuleSubroutineDefinition;
}

void qasmParser::SubroutineDefinitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubroutineDefinition(this);
}

void qasmParser::SubroutineDefinitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubroutineDefinition(this);
}


std::any qasmParser::SubroutineDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitSubroutineDefinition(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::SubroutineDefinitionContext* qasmParser::subroutineDefinition() {
  SubroutineDefinitionContext *_localctx = _tracker.createInstance<SubroutineDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 198, qasmParser::RuleSubroutineDefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1015);
    match(qasmParser::T__88);
    setState(1016);
    match(qasmParser::Identifier);
    setState(1017);
    match(qasmParser::LPAREN);
    setState(1019);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << qasmParser::T__4)
      | (1ULL << qasmParser::T__5)
      | (1ULL << qasmParser::T__6)
      | (1ULL << qasmParser::T__7)
      | (1ULL << qasmParser::T__8)
      | (1ULL << qasmParser::T__9)
      | (1ULL << qasmParser::T__10)
      | (1ULL << qasmParser::T__11)
      | (1ULL << qasmParser::T__12))) != 0) || ((((_la - 91) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 91)) & ((1ULL << (qasmParser::T__90 - 91))
      | (1ULL << (qasmParser::T__91 - 91))
      | (1ULL << (qasmParser::COMPLEX - 91))
      | (1ULL << (qasmParser::CONST - 91))
      | (1ULL << (qasmParser::MUTABLE - 91)))) != 0)) {
      setState(1018);
      anyTypeArgumentList();
    }
    setState(1021);
    match(qasmParser::RPAREN);
    setState(1023);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == qasmParser::ARROW) {
      setState(1022);
      returnSignature();
    }
    setState(1025);
    subroutineBlock();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubroutineBlockContext ------------------------------------------------------------------

qasmParser::SubroutineBlockContext::SubroutineBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* qasmParser::SubroutineBlockContext::LBRACE() {
  return getToken(qasmParser::LBRACE, 0);
}

tree::TerminalNode* qasmParser::SubroutineBlockContext::RBRACE() {
  return getToken(qasmParser::RBRACE, 0);
}

std::vector<qasmParser::StatementContext *> qasmParser::SubroutineBlockContext::statement() {
  return getRuleContexts<qasmParser::StatementContext>();
}

qasmParser::StatementContext* qasmParser::SubroutineBlockContext::statement(size_t i) {
  return getRuleContext<qasmParser::StatementContext>(i);
}

qasmParser::ReturnStatementContext* qasmParser::SubroutineBlockContext::returnStatement() {
  return getRuleContext<qasmParser::ReturnStatementContext>(0);
}


size_t qasmParser::SubroutineBlockContext::getRuleIndex() const {
  return qasmParser::RuleSubroutineBlock;
}

void qasmParser::SubroutineBlockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubroutineBlock(this);
}

void qasmParser::SubroutineBlockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubroutineBlock(this);
}


std::any qasmParser::SubroutineBlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitSubroutineBlock(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::SubroutineBlockContext* qasmParser::subroutineBlock() {
  SubroutineBlockContext *_localctx = _tracker.createInstance<SubroutineBlockContext>(_ctx, getState());
  enterRule(_localctx, 200, qasmParser::RuleSubroutineBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1027);
    match(qasmParser::LBRACE);
    setState(1031);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 7) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 7)) & ((1ULL << (qasmParser::T__6 - 7))
      | (1ULL << (qasmParser::T__7 - 7))
      | (1ULL << (qasmParser::T__8 - 7))
      | (1ULL << (qasmParser::T__9 - 7))
      | (1ULL << (qasmParser::T__10 - 7))
      | (1ULL << (qasmParser::T__11 - 7))
      | (1ULL << (qasmParser::T__12 - 7))
      | (1ULL << (qasmParser::T__13 - 7))
      | (1ULL << (qasmParser::T__16 - 7))
      | (1ULL << (qasmParser::T__17 - 7))
      | (1ULL << (qasmParser::T__18 - 7))
      | (1ULL << (qasmParser::T__19 - 7))
      | (1ULL << (qasmParser::T__20 - 7))
      | (1ULL << (qasmParser::T__21 - 7))
      | (1ULL << (qasmParser::T__22 - 7))
      | (1ULL << (qasmParser::T__23 - 7))
      | (1ULL << (qasmParser::T__24 - 7))
      | (1ULL << (qasmParser::T__25 - 7))
      | (1ULL << (qasmParser::T__26 - 7))
      | (1ULL << (qasmParser::T__27 - 7))
      | (1ULL << (qasmParser::T__28 - 7))
      | (1ULL << (qasmParser::T__29 - 7))
      | (1ULL << (qasmParser::T__30 - 7))
      | (1ULL << (qasmParser::T__31 - 7))
      | (1ULL << (qasmParser::T__33 - 7))
      | (1ULL << (qasmParser::T__34 - 7))
      | (1ULL << (qasmParser::T__35 - 7))
      | (1ULL << (qasmParser::T__36 - 7))
      | (1ULL << (qasmParser::T__37 - 7))
      | (1ULL << (qasmParser::T__52 - 7))
      | (1ULL << (qasmParser::T__53 - 7))
      | (1ULL << (qasmParser::T__54 - 7))
      | (1ULL << (qasmParser::T__55 - 7))
      | (1ULL << (qasmParser::T__56 - 7))
      | (1ULL << (qasmParser::T__57 - 7))
      | (1ULL << (qasmParser::T__58 - 7))
      | (1ULL << (qasmParser::T__59 - 7))
      | (1ULL << (qasmParser::T__60 - 7))
      | (1ULL << (qasmParser::T__61 - 7))
      | (1ULL << (qasmParser::T__62 - 7))
      | (1ULL << (qasmParser::T__63 - 7))
      | (1ULL << (qasmParser::T__64 - 7))
      | (1ULL << (qasmParser::T__65 - 7)))) != 0) || ((((_la - 79) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 79)) & ((1ULL << (qasmParser::T__78 - 79))
      | (1ULL << (qasmParser::T__80 - 79))
      | (1ULL << (qasmParser::T__82 - 79))
      | (1ULL << (qasmParser::T__83 - 79))
      | (1ULL << (qasmParser::T__90 - 79))
      | (1ULL << (qasmParser::T__91 - 79))
      | (1ULL << (qasmParser::T__92 - 79))
      | (1ULL << (qasmParser::T__93 - 79))
      | (1ULL << (qasmParser::T__94 - 79))
      | (1ULL << (qasmParser::T__95 - 79))
      | (1ULL << (qasmParser::LPAREN - 79))
      | (1ULL << (qasmParser::MINUS - 79))
      | (1ULL << (qasmParser::ImagNumber - 79))
      | (1ULL << (qasmParser::COMPLEX - 79))
      | (1ULL << (qasmParser::CONST - 79))
      | (1ULL << (qasmParser::ARRAY - 79))
      | (1ULL << (qasmParser::SIZEOF - 79))
      | (1ULL << (qasmParser::Constant - 79))
      | (1ULL << (qasmParser::Integer - 79))
      | (1ULL << (qasmParser::Identifier - 79))
      | (1ULL << (qasmParser::RealNumber - 79))
      | (1ULL << (qasmParser::TimingLiteral - 79))
      | (1ULL << (qasmParser::StringLiteral - 79)))) != 0)) {
      setState(1028);
      statement();
      setState(1033);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1035);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == qasmParser::T__84) {
      setState(1034);
      returnStatement();
    }
    setState(1037);
    match(qasmParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PragmaContext ------------------------------------------------------------------

qasmParser::PragmaContext::PragmaContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* qasmParser::PragmaContext::LBRACE() {
  return getToken(qasmParser::LBRACE, 0);
}

tree::TerminalNode* qasmParser::PragmaContext::RBRACE() {
  return getToken(qasmParser::RBRACE, 0);
}

std::vector<qasmParser::StatementContext *> qasmParser::PragmaContext::statement() {
  return getRuleContexts<qasmParser::StatementContext>();
}

qasmParser::StatementContext* qasmParser::PragmaContext::statement(size_t i) {
  return getRuleContext<qasmParser::StatementContext>(i);
}


size_t qasmParser::PragmaContext::getRuleIndex() const {
  return qasmParser::RulePragma;
}

void qasmParser::PragmaContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPragma(this);
}

void qasmParser::PragmaContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPragma(this);
}


std::any qasmParser::PragmaContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitPragma(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::PragmaContext* qasmParser::pragma() {
  PragmaContext *_localctx = _tracker.createInstance<PragmaContext>(_ctx, getState());
  enterRule(_localctx, 202, qasmParser::RulePragma);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1039);
    match(qasmParser::T__89);
    setState(1040);
    match(qasmParser::LBRACE);
    setState(1044);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 7) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 7)) & ((1ULL << (qasmParser::T__6 - 7))
      | (1ULL << (qasmParser::T__7 - 7))
      | (1ULL << (qasmParser::T__8 - 7))
      | (1ULL << (qasmParser::T__9 - 7))
      | (1ULL << (qasmParser::T__10 - 7))
      | (1ULL << (qasmParser::T__11 - 7))
      | (1ULL << (qasmParser::T__12 - 7))
      | (1ULL << (qasmParser::T__13 - 7))
      | (1ULL << (qasmParser::T__16 - 7))
      | (1ULL << (qasmParser::T__17 - 7))
      | (1ULL << (qasmParser::T__18 - 7))
      | (1ULL << (qasmParser::T__19 - 7))
      | (1ULL << (qasmParser::T__20 - 7))
      | (1ULL << (qasmParser::T__21 - 7))
      | (1ULL << (qasmParser::T__22 - 7))
      | (1ULL << (qasmParser::T__23 - 7))
      | (1ULL << (qasmParser::T__24 - 7))
      | (1ULL << (qasmParser::T__25 - 7))
      | (1ULL << (qasmParser::T__26 - 7))
      | (1ULL << (qasmParser::T__27 - 7))
      | (1ULL << (qasmParser::T__28 - 7))
      | (1ULL << (qasmParser::T__29 - 7))
      | (1ULL << (qasmParser::T__30 - 7))
      | (1ULL << (qasmParser::T__31 - 7))
      | (1ULL << (qasmParser::T__33 - 7))
      | (1ULL << (qasmParser::T__34 - 7))
      | (1ULL << (qasmParser::T__35 - 7))
      | (1ULL << (qasmParser::T__36 - 7))
      | (1ULL << (qasmParser::T__37 - 7))
      | (1ULL << (qasmParser::T__52 - 7))
      | (1ULL << (qasmParser::T__53 - 7))
      | (1ULL << (qasmParser::T__54 - 7))
      | (1ULL << (qasmParser::T__55 - 7))
      | (1ULL << (qasmParser::T__56 - 7))
      | (1ULL << (qasmParser::T__57 - 7))
      | (1ULL << (qasmParser::T__58 - 7))
      | (1ULL << (qasmParser::T__59 - 7))
      | (1ULL << (qasmParser::T__60 - 7))
      | (1ULL << (qasmParser::T__61 - 7))
      | (1ULL << (qasmParser::T__62 - 7))
      | (1ULL << (qasmParser::T__63 - 7))
      | (1ULL << (qasmParser::T__64 - 7))
      | (1ULL << (qasmParser::T__65 - 7)))) != 0) || ((((_la - 79) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 79)) & ((1ULL << (qasmParser::T__78 - 79))
      | (1ULL << (qasmParser::T__80 - 79))
      | (1ULL << (qasmParser::T__82 - 79))
      | (1ULL << (qasmParser::T__83 - 79))
      | (1ULL << (qasmParser::T__90 - 79))
      | (1ULL << (qasmParser::T__91 - 79))
      | (1ULL << (qasmParser::T__92 - 79))
      | (1ULL << (qasmParser::T__93 - 79))
      | (1ULL << (qasmParser::T__94 - 79))
      | (1ULL << (qasmParser::T__95 - 79))
      | (1ULL << (qasmParser::LPAREN - 79))
      | (1ULL << (qasmParser::MINUS - 79))
      | (1ULL << (qasmParser::ImagNumber - 79))
      | (1ULL << (qasmParser::COMPLEX - 79))
      | (1ULL << (qasmParser::CONST - 79))
      | (1ULL << (qasmParser::ARRAY - 79))
      | (1ULL << (qasmParser::SIZEOF - 79))
      | (1ULL << (qasmParser::Constant - 79))
      | (1ULL << (qasmParser::Integer - 79))
      | (1ULL << (qasmParser::Identifier - 79))
      | (1ULL << (qasmParser::RealNumber - 79))
      | (1ULL << (qasmParser::TimingLiteral - 79))
      | (1ULL << (qasmParser::StringLiteral - 79)))) != 0)) {
      setState(1041);
      statement();
      setState(1046);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1047);
    match(qasmParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TimingTypeContext ------------------------------------------------------------------

qasmParser::TimingTypeContext::TimingTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t qasmParser::TimingTypeContext::getRuleIndex() const {
  return qasmParser::RuleTimingType;
}

void qasmParser::TimingTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTimingType(this);
}

void qasmParser::TimingTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTimingType(this);
}


std::any qasmParser::TimingTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitTimingType(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::TimingTypeContext* qasmParser::timingType() {
  TimingTypeContext *_localctx = _tracker.createInstance<TimingTypeContext>(_ctx, getState());
  enterRule(_localctx, 204, qasmParser::RuleTimingType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1049);
    _la = _input->LA(1);
    if (!(_la == qasmParser::T__90

    || _la == qasmParser::T__91)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TimingBoxContext ------------------------------------------------------------------

qasmParser::TimingBoxContext::TimingBoxContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

qasmParser::QuantumBlockContext* qasmParser::TimingBoxContext::quantumBlock() {
  return getRuleContext<qasmParser::QuantumBlockContext>(0);
}

qasmParser::DesignatorContext* qasmParser::TimingBoxContext::designator() {
  return getRuleContext<qasmParser::DesignatorContext>(0);
}


size_t qasmParser::TimingBoxContext::getRuleIndex() const {
  return qasmParser::RuleTimingBox;
}

void qasmParser::TimingBoxContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTimingBox(this);
}

void qasmParser::TimingBoxContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTimingBox(this);
}


std::any qasmParser::TimingBoxContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitTimingBox(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::TimingBoxContext* qasmParser::timingBox() {
  TimingBoxContext *_localctx = _tracker.createInstance<TimingBoxContext>(_ctx, getState());
  enterRule(_localctx, 206, qasmParser::RuleTimingBox);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1051);
    match(qasmParser::T__92);
    setState(1053);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == qasmParser::LBRACKET) {
      setState(1052);
      designator();
    }
    setState(1055);
    quantumBlock();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TimingIdentifierContext ------------------------------------------------------------------

qasmParser::TimingIdentifierContext::TimingIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* qasmParser::TimingIdentifierContext::TimingLiteral() {
  return getToken(qasmParser::TimingLiteral, 0);
}

tree::TerminalNode* qasmParser::TimingIdentifierContext::LPAREN() {
  return getToken(qasmParser::LPAREN, 0);
}

tree::TerminalNode* qasmParser::TimingIdentifierContext::RPAREN() {
  return getToken(qasmParser::RPAREN, 0);
}

tree::TerminalNode* qasmParser::TimingIdentifierContext::Identifier() {
  return getToken(qasmParser::Identifier, 0);
}

qasmParser::QuantumBlockContext* qasmParser::TimingIdentifierContext::quantumBlock() {
  return getRuleContext<qasmParser::QuantumBlockContext>(0);
}


size_t qasmParser::TimingIdentifierContext::getRuleIndex() const {
  return qasmParser::RuleTimingIdentifier;
}

void qasmParser::TimingIdentifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTimingIdentifier(this);
}

void qasmParser::TimingIdentifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTimingIdentifier(this);
}


std::any qasmParser::TimingIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitTimingIdentifier(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::TimingIdentifierContext* qasmParser::timingIdentifier() {
  TimingIdentifierContext *_localctx = _tracker.createInstance<TimingIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 208, qasmParser::RuleTimingIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1065);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case qasmParser::TimingLiteral: {
        enterOuterAlt(_localctx, 1);
        setState(1057);
        match(qasmParser::TimingLiteral);
        break;
      }

      case qasmParser::T__93: {
        enterOuterAlt(_localctx, 2);
        setState(1058);
        match(qasmParser::T__93);
        setState(1059);
        match(qasmParser::LPAREN);
        setState(1062);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case qasmParser::Identifier: {
            setState(1060);
            match(qasmParser::Identifier);
            break;
          }

          case qasmParser::LBRACE: {
            setState(1061);
            quantumBlock();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(1064);
        match(qasmParser::RPAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TimingInstructionNameContext ------------------------------------------------------------------

qasmParser::TimingInstructionNameContext::TimingInstructionNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t qasmParser::TimingInstructionNameContext::getRuleIndex() const {
  return qasmParser::RuleTimingInstructionName;
}

void qasmParser::TimingInstructionNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTimingInstructionName(this);
}

void qasmParser::TimingInstructionNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTimingInstructionName(this);
}


std::any qasmParser::TimingInstructionNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitTimingInstructionName(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::TimingInstructionNameContext* qasmParser::timingInstructionName() {
  TimingInstructionNameContext *_localctx = _tracker.createInstance<TimingInstructionNameContext>(_ctx, getState());
  enterRule(_localctx, 210, qasmParser::RuleTimingInstructionName);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1067);
    _la = _input->LA(1);
    if (!(_la == qasmParser::T__94

    || _la == qasmParser::T__95)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TimingInstructionContext ------------------------------------------------------------------

qasmParser::TimingInstructionContext::TimingInstructionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

qasmParser::TimingInstructionNameContext* qasmParser::TimingInstructionContext::timingInstructionName() {
  return getRuleContext<qasmParser::TimingInstructionNameContext>(0);
}

qasmParser::DesignatorContext* qasmParser::TimingInstructionContext::designator() {
  return getRuleContext<qasmParser::DesignatorContext>(0);
}

std::vector<qasmParser::IndexedIdentifierContext *> qasmParser::TimingInstructionContext::indexedIdentifier() {
  return getRuleContexts<qasmParser::IndexedIdentifierContext>();
}

qasmParser::IndexedIdentifierContext* qasmParser::TimingInstructionContext::indexedIdentifier(size_t i) {
  return getRuleContext<qasmParser::IndexedIdentifierContext>(i);
}

tree::TerminalNode* qasmParser::TimingInstructionContext::LPAREN() {
  return getToken(qasmParser::LPAREN, 0);
}

tree::TerminalNode* qasmParser::TimingInstructionContext::RPAREN() {
  return getToken(qasmParser::RPAREN, 0);
}

std::vector<tree::TerminalNode *> qasmParser::TimingInstructionContext::COMMA() {
  return getTokens(qasmParser::COMMA);
}

tree::TerminalNode* qasmParser::TimingInstructionContext::COMMA(size_t i) {
  return getToken(qasmParser::COMMA, i);
}

qasmParser::ExpressionListContext* qasmParser::TimingInstructionContext::expressionList() {
  return getRuleContext<qasmParser::ExpressionListContext>(0);
}


size_t qasmParser::TimingInstructionContext::getRuleIndex() const {
  return qasmParser::RuleTimingInstruction;
}

void qasmParser::TimingInstructionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTimingInstruction(this);
}

void qasmParser::TimingInstructionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTimingInstruction(this);
}


std::any qasmParser::TimingInstructionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitTimingInstruction(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::TimingInstructionContext* qasmParser::timingInstruction() {
  TimingInstructionContext *_localctx = _tracker.createInstance<TimingInstructionContext>(_ctx, getState());
  enterRule(_localctx, 212, qasmParser::RuleTimingInstruction);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1069);
    timingInstructionName();
    setState(1075);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == qasmParser::LPAREN) {
      setState(1070);
      match(qasmParser::LPAREN);
      setState(1072);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 7) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 7)) & ((1ULL << (qasmParser::T__6 - 7))
        | (1ULL << (qasmParser::T__7 - 7))
        | (1ULL << (qasmParser::T__8 - 7))
        | (1ULL << (qasmParser::T__9 - 7))
        | (1ULL << (qasmParser::T__10 - 7))
        | (1ULL << (qasmParser::T__11 - 7))
        | (1ULL << (qasmParser::T__12 - 7))
        | (1ULL << (qasmParser::T__36 - 7))
        | (1ULL << (qasmParser::T__37 - 7))
        | (1ULL << (qasmParser::T__52 - 7))
        | (1ULL << (qasmParser::T__53 - 7))
        | (1ULL << (qasmParser::T__54 - 7))
        | (1ULL << (qasmParser::T__55 - 7))
        | (1ULL << (qasmParser::T__56 - 7))
        | (1ULL << (qasmParser::T__57 - 7))
        | (1ULL << (qasmParser::T__58 - 7))
        | (1ULL << (qasmParser::T__59 - 7))
        | (1ULL << (qasmParser::T__60 - 7))
        | (1ULL << (qasmParser::T__61 - 7))
        | (1ULL << (qasmParser::T__62 - 7))
        | (1ULL << (qasmParser::T__63 - 7))
        | (1ULL << (qasmParser::T__64 - 7))
        | (1ULL << (qasmParser::T__65 - 7)))) != 0) || ((((_la - 91) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 91)) & ((1ULL << (qasmParser::T__90 - 91))
        | (1ULL << (qasmParser::T__91 - 91))
        | (1ULL << (qasmParser::T__93 - 91))
        | (1ULL << (qasmParser::LPAREN - 91))
        | (1ULL << (qasmParser::MINUS - 91))
        | (1ULL << (qasmParser::ImagNumber - 91))
        | (1ULL << (qasmParser::COMPLEX - 91))
        | (1ULL << (qasmParser::ARRAY - 91))
        | (1ULL << (qasmParser::SIZEOF - 91))
        | (1ULL << (qasmParser::Constant - 91))
        | (1ULL << (qasmParser::Integer - 91))
        | (1ULL << (qasmParser::Identifier - 91))
        | (1ULL << (qasmParser::RealNumber - 91))
        | (1ULL << (qasmParser::TimingLiteral - 91))
        | (1ULL << (qasmParser::StringLiteral - 91)))) != 0)) {
        setState(1071);
        expressionList();
      }
      setState(1074);
      match(qasmParser::RPAREN);
    }
    setState(1077);
    designator();
    setState(1078);
    indexedIdentifier();
    setState(1083);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == qasmParser::COMMA) {
      setState(1079);
      match(qasmParser::COMMA);
      setState(1080);
      indexedIdentifier();
      setState(1085);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TimingStatementContext ------------------------------------------------------------------

qasmParser::TimingStatementContext::TimingStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

qasmParser::TimingInstructionContext* qasmParser::TimingStatementContext::timingInstruction() {
  return getRuleContext<qasmParser::TimingInstructionContext>(0);
}

tree::TerminalNode* qasmParser::TimingStatementContext::SEMICOLON() {
  return getToken(qasmParser::SEMICOLON, 0);
}

qasmParser::TimingBoxContext* qasmParser::TimingStatementContext::timingBox() {
  return getRuleContext<qasmParser::TimingBoxContext>(0);
}


size_t qasmParser::TimingStatementContext::getRuleIndex() const {
  return qasmParser::RuleTimingStatement;
}

void qasmParser::TimingStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTimingStatement(this);
}

void qasmParser::TimingStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTimingStatement(this);
}


std::any qasmParser::TimingStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitTimingStatement(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::TimingStatementContext* qasmParser::timingStatement() {
  TimingStatementContext *_localctx = _tracker.createInstance<TimingStatementContext>(_ctx, getState());
  enterRule(_localctx, 214, qasmParser::RuleTimingStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1090);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case qasmParser::T__94:
      case qasmParser::T__95: {
        enterOuterAlt(_localctx, 1);
        setState(1086);
        timingInstruction();
        setState(1087);
        match(qasmParser::SEMICOLON);
        break;
      }

      case qasmParser::T__92: {
        enterOuterAlt(_localctx, 2);
        setState(1089);
        timingBox();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CalibrationContext ------------------------------------------------------------------

qasmParser::CalibrationContext::CalibrationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

qasmParser::CalibrationGrammarDeclarationContext* qasmParser::CalibrationContext::calibrationGrammarDeclaration() {
  return getRuleContext<qasmParser::CalibrationGrammarDeclarationContext>(0);
}

qasmParser::CalibrationDefinitionContext* qasmParser::CalibrationContext::calibrationDefinition() {
  return getRuleContext<qasmParser::CalibrationDefinitionContext>(0);
}


size_t qasmParser::CalibrationContext::getRuleIndex() const {
  return qasmParser::RuleCalibration;
}

void qasmParser::CalibrationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCalibration(this);
}

void qasmParser::CalibrationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCalibration(this);
}


std::any qasmParser::CalibrationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitCalibration(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::CalibrationContext* qasmParser::calibration() {
  CalibrationContext *_localctx = _tracker.createInstance<CalibrationContext>(_ctx, getState());
  enterRule(_localctx, 216, qasmParser::RuleCalibration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1094);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case qasmParser::T__96: {
        enterOuterAlt(_localctx, 1);
        setState(1092);
        calibrationGrammarDeclaration();
        break;
      }

      case qasmParser::T__97: {
        enterOuterAlt(_localctx, 2);
        setState(1093);
        calibrationDefinition();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CalibrationGrammarDeclarationContext ------------------------------------------------------------------

qasmParser::CalibrationGrammarDeclarationContext::CalibrationGrammarDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

qasmParser::CalibrationGrammarContext* qasmParser::CalibrationGrammarDeclarationContext::calibrationGrammar() {
  return getRuleContext<qasmParser::CalibrationGrammarContext>(0);
}

tree::TerminalNode* qasmParser::CalibrationGrammarDeclarationContext::SEMICOLON() {
  return getToken(qasmParser::SEMICOLON, 0);
}


size_t qasmParser::CalibrationGrammarDeclarationContext::getRuleIndex() const {
  return qasmParser::RuleCalibrationGrammarDeclaration;
}

void qasmParser::CalibrationGrammarDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCalibrationGrammarDeclaration(this);
}

void qasmParser::CalibrationGrammarDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCalibrationGrammarDeclaration(this);
}


std::any qasmParser::CalibrationGrammarDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitCalibrationGrammarDeclaration(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::CalibrationGrammarDeclarationContext* qasmParser::calibrationGrammarDeclaration() {
  CalibrationGrammarDeclarationContext *_localctx = _tracker.createInstance<CalibrationGrammarDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 218, qasmParser::RuleCalibrationGrammarDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1096);
    match(qasmParser::T__96);
    setState(1097);
    calibrationGrammar();
    setState(1098);
    match(qasmParser::SEMICOLON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CalibrationDefinitionContext ------------------------------------------------------------------

qasmParser::CalibrationDefinitionContext::CalibrationDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* qasmParser::CalibrationDefinitionContext::Identifier() {
  return getToken(qasmParser::Identifier, 0);
}

qasmParser::IdentifierListContext* qasmParser::CalibrationDefinitionContext::identifierList() {
  return getRuleContext<qasmParser::IdentifierListContext>(0);
}

tree::TerminalNode* qasmParser::CalibrationDefinitionContext::LBRACE() {
  return getToken(qasmParser::LBRACE, 0);
}

tree::TerminalNode* qasmParser::CalibrationDefinitionContext::RBRACE() {
  return getToken(qasmParser::RBRACE, 0);
}

tree::TerminalNode* qasmParser::CalibrationDefinitionContext::LPAREN() {
  return getToken(qasmParser::LPAREN, 0);
}

tree::TerminalNode* qasmParser::CalibrationDefinitionContext::RPAREN() {
  return getToken(qasmParser::RPAREN, 0);
}

qasmParser::ReturnSignatureContext* qasmParser::CalibrationDefinitionContext::returnSignature() {
  return getRuleContext<qasmParser::ReturnSignatureContext>(0);
}

qasmParser::CalibrationArgumentListContext* qasmParser::CalibrationDefinitionContext::calibrationArgumentList() {
  return getRuleContext<qasmParser::CalibrationArgumentListContext>(0);
}


size_t qasmParser::CalibrationDefinitionContext::getRuleIndex() const {
  return qasmParser::RuleCalibrationDefinition;
}

void qasmParser::CalibrationDefinitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCalibrationDefinition(this);
}

void qasmParser::CalibrationDefinitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCalibrationDefinition(this);
}


std::any qasmParser::CalibrationDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitCalibrationDefinition(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::CalibrationDefinitionContext* qasmParser::calibrationDefinition() {
  CalibrationDefinitionContext *_localctx = _tracker.createInstance<CalibrationDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 220, qasmParser::RuleCalibrationDefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1100);
    match(qasmParser::T__97);
    setState(1101);
    match(qasmParser::Identifier);
    setState(1107);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == qasmParser::LPAREN) {
      setState(1102);
      match(qasmParser::LPAREN);
      setState(1104);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 7) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 7)) & ((1ULL << (qasmParser::T__6 - 7))
        | (1ULL << (qasmParser::T__7 - 7))
        | (1ULL << (qasmParser::T__8 - 7))
        | (1ULL << (qasmParser::T__9 - 7))
        | (1ULL << (qasmParser::T__10 - 7))
        | (1ULL << (qasmParser::T__11 - 7))
        | (1ULL << (qasmParser::T__12 - 7))
        | (1ULL << (qasmParser::T__36 - 7))
        | (1ULL << (qasmParser::T__37 - 7))
        | (1ULL << (qasmParser::T__52 - 7))
        | (1ULL << (qasmParser::T__53 - 7))
        | (1ULL << (qasmParser::T__54 - 7))
        | (1ULL << (qasmParser::T__55 - 7))
        | (1ULL << (qasmParser::T__56 - 7))
        | (1ULL << (qasmParser::T__57 - 7))
        | (1ULL << (qasmParser::T__58 - 7))
        | (1ULL << (qasmParser::T__59 - 7))
        | (1ULL << (qasmParser::T__60 - 7))
        | (1ULL << (qasmParser::T__61 - 7))
        | (1ULL << (qasmParser::T__62 - 7))
        | (1ULL << (qasmParser::T__63 - 7))
        | (1ULL << (qasmParser::T__64 - 7))
        | (1ULL << (qasmParser::T__65 - 7)))) != 0) || ((((_la - 91) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 91)) & ((1ULL << (qasmParser::T__90 - 91))
        | (1ULL << (qasmParser::T__91 - 91))
        | (1ULL << (qasmParser::T__93 - 91))
        | (1ULL << (qasmParser::LPAREN - 91))
        | (1ULL << (qasmParser::MINUS - 91))
        | (1ULL << (qasmParser::ImagNumber - 91))
        | (1ULL << (qasmParser::COMPLEX - 91))
        | (1ULL << (qasmParser::CONST - 91))
        | (1ULL << (qasmParser::MUTABLE - 91))
        | (1ULL << (qasmParser::ARRAY - 91))
        | (1ULL << (qasmParser::SIZEOF - 91))
        | (1ULL << (qasmParser::Constant - 91))
        | (1ULL << (qasmParser::Integer - 91))
        | (1ULL << (qasmParser::Identifier - 91))
        | (1ULL << (qasmParser::RealNumber - 91))
        | (1ULL << (qasmParser::TimingLiteral - 91))
        | (1ULL << (qasmParser::StringLiteral - 91)))) != 0)) {
        setState(1103);
        calibrationArgumentList();
      }
      setState(1106);
      match(qasmParser::RPAREN);
    }
    setState(1109);
    identifierList();
    setState(1111);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == qasmParser::ARROW) {
      setState(1110);
      returnSignature();
    }
    setState(1113);
    match(qasmParser::LBRACE);
    setState(1117);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 117, _ctx);
    while (alt != 1 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1 + 1) {
        setState(1114);
        matchWildcard(); 
      }
      setState(1119);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 117, _ctx);
    }
    setState(1120);
    match(qasmParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CalibrationGrammarContext ------------------------------------------------------------------

qasmParser::CalibrationGrammarContext::CalibrationGrammarContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* qasmParser::CalibrationGrammarContext::StringLiteral() {
  return getToken(qasmParser::StringLiteral, 0);
}


size_t qasmParser::CalibrationGrammarContext::getRuleIndex() const {
  return qasmParser::RuleCalibrationGrammar;
}

void qasmParser::CalibrationGrammarContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCalibrationGrammar(this);
}

void qasmParser::CalibrationGrammarContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCalibrationGrammar(this);
}


std::any qasmParser::CalibrationGrammarContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitCalibrationGrammar(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::CalibrationGrammarContext* qasmParser::calibrationGrammar() {
  CalibrationGrammarContext *_localctx = _tracker.createInstance<CalibrationGrammarContext>(_ctx, getState());
  enterRule(_localctx, 222, qasmParser::RuleCalibrationGrammar);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1122);
    _la = _input->LA(1);
    if (!(_la == qasmParser::T__98

    || _la == qasmParser::StringLiteral)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CalibrationArgumentListContext ------------------------------------------------------------------

qasmParser::CalibrationArgumentListContext::CalibrationArgumentListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

qasmParser::ClassicalArgumentListContext* qasmParser::CalibrationArgumentListContext::classicalArgumentList() {
  return getRuleContext<qasmParser::ClassicalArgumentListContext>(0);
}

qasmParser::ExpressionListContext* qasmParser::CalibrationArgumentListContext::expressionList() {
  return getRuleContext<qasmParser::ExpressionListContext>(0);
}


size_t qasmParser::CalibrationArgumentListContext::getRuleIndex() const {
  return qasmParser::RuleCalibrationArgumentList;
}

void qasmParser::CalibrationArgumentListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCalibrationArgumentList(this);
}

void qasmParser::CalibrationArgumentListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<qasmListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCalibrationArgumentList(this);
}


std::any qasmParser::CalibrationArgumentListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<qasmVisitor*>(visitor))
    return parserVisitor->visitCalibrationArgumentList(this);
  else
    return visitor->visitChildren(this);
}

qasmParser::CalibrationArgumentListContext* qasmParser::calibrationArgumentList() {
  CalibrationArgumentListContext *_localctx = _tracker.createInstance<CalibrationArgumentListContext>(_ctx, getState());
  enterRule(_localctx, 224, qasmParser::RuleCalibrationArgumentList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1126);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 118, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1124);
      classicalArgumentList();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1125);
      expressionList();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool qasmParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 41: return aliasInitializerSempred(antlrcpp::downCast<AliasInitializerContext *>(context), predicateIndex);
    case 65: return expressionSempred(antlrcpp::downCast<ExpressionContext *>(context), predicateIndex);
    case 66: return logicalAndExpressionSempred(antlrcpp::downCast<LogicalAndExpressionContext *>(context), predicateIndex);
    case 67: return bitOrExpressionSempred(antlrcpp::downCast<BitOrExpressionContext *>(context), predicateIndex);
    case 68: return xOrExpressionSempred(antlrcpp::downCast<XOrExpressionContext *>(context), predicateIndex);
    case 69: return bitAndExpressionSempred(antlrcpp::downCast<BitAndExpressionContext *>(context), predicateIndex);
    case 70: return equalityExpressionSempred(antlrcpp::downCast<EqualityExpressionContext *>(context), predicateIndex);
    case 71: return comparisonExpressionSempred(antlrcpp::downCast<ComparisonExpressionContext *>(context), predicateIndex);
    case 72: return bitShiftExpressionSempred(antlrcpp::downCast<BitShiftExpressionContext *>(context), predicateIndex);
    case 73: return additiveExpressionSempred(antlrcpp::downCast<AdditiveExpressionContext *>(context), predicateIndex);
    case 74: return multiplicativeExpressionSempred(antlrcpp::downCast<MultiplicativeExpressionContext *>(context), predicateIndex);
    case 76: return powerExpressionSempred(antlrcpp::downCast<PowerExpressionContext *>(context), predicateIndex);
    case 78: return indexExpressionSempred(antlrcpp::downCast<IndexExpressionContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool qasmParser::aliasInitializerSempred(AliasInitializerContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool qasmParser::expressionSempred(ExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 1: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool qasmParser::logicalAndExpressionSempred(LogicalAndExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 2: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool qasmParser::bitOrExpressionSempred(BitOrExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 3: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool qasmParser::xOrExpressionSempred(XOrExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 4: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool qasmParser::bitAndExpressionSempred(BitAndExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 5: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool qasmParser::equalityExpressionSempred(EqualityExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 6: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool qasmParser::comparisonExpressionSempred(ComparisonExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 7: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool qasmParser::bitShiftExpressionSempred(BitShiftExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 8: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool qasmParser::additiveExpressionSempred(AdditiveExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 9: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool qasmParser::multiplicativeExpressionSempred(MultiplicativeExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 10: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool qasmParser::powerExpressionSempred(PowerExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 11: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool qasmParser::indexExpressionSempred(IndexExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 12: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

void qasmParser::initialize() {
  std::call_once(qasmParserOnceFlag, qasmParserInitialize);
}
